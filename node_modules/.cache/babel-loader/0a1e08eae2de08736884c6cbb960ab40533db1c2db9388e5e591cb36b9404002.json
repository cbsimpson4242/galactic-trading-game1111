{"ast":null,"code":"var _jsxFileName = \"F:\\\\Windsurf\\\\Native\\\\GTC 3\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport TradingGrid from './components/TradingGrid';\nimport Sidebar from './components/Sidebar';\nimport NotificationContainer from './components/NotificationContainer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [gameState, setGameState] = useState({\n    credits: 74192,\n    profit: 6011,\n    pnl: 4191,\n    totalMargin: 75945,\n    isSimulationPaused: false\n  });\n  const [commodities, setCommodities] = useState([{\n    id: 'quantum-crystals',\n    name: 'Quantum Crystals',\n    icon: '💎',\n    lastPrice: 29,\n    supply: 5825,\n    demand: 2159,\n    buyPrice: 28,\n    sellPrice: 30,\n    buyQuantity: 1068,\n    sellQuantity: 1042,\n    unit: 'Tons',\n    quantity: 1,\n    holdings: 0,\n    priceHistory: [{\n      time: '00:00',\n      price: 25\n    }, {\n      time: '04:00',\n      price: 27\n    }, {\n      time: '08:00',\n      price: 26\n    }, {\n      time: '12:00',\n      price: 28\n    }, {\n      time: '16:00',\n      price: 30\n    }, {\n      time: '20:00',\n      price: 29\n    }]\n  }, {\n    id: 'dark-matter',\n    name: 'Dark Matter',\n    icon: '⚫',\n    lastPrice: 929,\n    supply: 1296,\n    demand: 3383,\n    buyPrice: 910,\n    sellPrice: 948,\n    buyQuantity: 800,\n    sellQuantity: 1200,\n    unit: 'Units',\n    quantity: 1,\n    holdings: 0,\n    priceHistory: [{\n      time: '00:00',\n      price: 850\n    }, {\n      time: '04:00',\n      price: 880\n    }, {\n      time: '08:00',\n      price: 920\n    }, {\n      time: '12:00',\n      price: 950\n    }, {\n      time: '16:00',\n      price: 940\n    }, {\n      time: '20:00',\n      price: 929\n    }]\n  }, {\n    id: 'neural-processors',\n    name: 'Neural Processors',\n    icon: '🧠',\n    lastPrice: 304,\n    supply: 8886,\n    demand: 2359,\n    buyPrice: 298,\n    sellPrice: 310,\n    buyQuantity: 1500,\n    sellQuantity: 1000,\n    unit: 'Units',\n    quantity: 1,\n    holdings: 0,\n    priceHistory: [{\n      time: '00:00',\n      price: 280\n    }, {\n      time: '04:00',\n      price: 290\n    }, {\n      time: '08:00',\n      price: 300\n    }, {\n      time: '12:00',\n      price: 310\n    }, {\n      time: '16:00',\n      price: 305\n    }, {\n      time: '20:00',\n      price: 304\n    }]\n  }, {\n    id: 'antimatter-cores',\n    name: 'Antimatter Cores',\n    icon: '⚛️',\n    lastPrice: 1347,\n    supply: 623,\n    demand: 1911,\n    buyPrice: 1320,\n    sellPrice: 1374,\n    buyQuantity: 500,\n    sellQuantity: 800,\n    unit: 'Units',\n    quantity: 1,\n    holdings: 0,\n    priceHistory: [{\n      time: '00:00',\n      price: 1300\n    }, {\n      time: '04:00',\n      price: 1320\n    }, {\n      time: '08:00',\n      price: 1350\n    }, {\n      time: '12:00',\n      price: 1380\n    }, {\n      time: '16:00',\n      price: 1360\n    }, {\n      time: '20:00',\n      price: 1347\n    }]\n  }, {\n    id: 'plasma-cells',\n    name: 'Plasma Cells',\n    icon: '⚡',\n    lastPrice: 77,\n    supply: 4618,\n    demand: 3229,\n    buyPrice: 75,\n    sellPrice: 79,\n    buyQuantity: 2000,\n    sellQuantity: 1500,\n    unit: 'Units',\n    quantity: 1,\n    holdings: 0,\n    priceHistory: [{\n      time: '00:00',\n      price: 70\n    }, {\n      time: '04:00',\n      price: 72\n    }, {\n      time: '08:00',\n      price: 75\n    }, {\n      time: '12:00',\n      price: 78\n    }, {\n      time: '16:00',\n      price: 76\n    }, {\n      time: '20:00',\n      price: 77\n    }]\n  }, {\n    id: 'fusion-reactors',\n    name: 'Fusion Reactors',\n    icon: '🔋',\n    lastPrice: 5235,\n    supply: 214,\n    demand: 800,\n    buyPrice: 5130,\n    sellPrice: 5340,\n    buyQuantity: 100,\n    sellQuantity: 300,\n    unit: 'Units',\n    quantity: 1,\n    holdings: 0,\n    priceHistory: [{\n      time: '00:00',\n      price: 5000\n    }, {\n      time: '04:00',\n      price: 5100\n    }, {\n      time: '08:00',\n      price: 5200\n    }, {\n      time: '12:00',\n      price: 5300\n    }, {\n      time: '16:00',\n      price: 5250\n    }, {\n      time: '20:00',\n      price: 5235\n    }]\n  }]);\n  const [aiPortfolio, setAiPortfolio] = useState({\n    'Quantum Crystals': 12345,\n    'Dark Matter': 8901,\n    'Neural Processors': 15678,\n    'Plasma Cells': 4567\n  });\n  const [marketTrends, setMarketTrends] = useState([{\n    name: 'Quantum Crystals',\n    trend: 'Bullish',\n    color: '#00ff88'\n  }, {\n    name: 'Dark Matter',\n    trend: 'Bearish',\n    color: '#ff4444'\n  }, {\n    name: 'Neural Processors',\n    trend: 'Bullish',\n    color: '#00ff88'\n  }]);\n  const [tradeFeed, setTradeFeed] = useState([{\n    time: '19:11',\n    commodity: 'FREAC',\n    action: 'SELL',\n    quantity: 11,\n    value: 56903\n  }, {\n    time: '19:10',\n    commodity: 'ACORE',\n    action: 'BUY',\n    quantity: 47,\n    value: 61147\n  }, {\n    time: '19:09',\n    commodity: 'QCRYS',\n    action: 'SELL',\n    quantity: 73,\n    value: 2190\n  }, {\n    time: '19:08',\n    commodity: 'DMATT',\n    action: 'BUY',\n    quantity: 25,\n    value: 23225\n  }, {\n    time: '19:07',\n    commodity: 'NPROC',\n    action: 'SELL',\n    quantity: 15,\n    value: 4560\n  }]);\n  const [notifications, setNotifications] = useState([]);\n  const handleQuantityChange = (commodityId, newQuantity) => {\n    setCommodities(prev => prev.map(commodity => commodity.id === commodityId ? {\n      ...commodity,\n      quantity: Math.max(1, Math.min(100, newQuantity))\n    } : commodity));\n  };\n  const handleBuy = commodityId => {\n    const commodity = commodities.find(c => c.id === commodityId);\n    const cost = commodity.buyPrice * commodity.quantity;\n    if (gameState.credits >= cost) {\n      setGameState(prev => ({\n        ...prev,\n        credits: prev.credits - cost,\n        totalMargin: prev.totalMargin + cost\n      }));\n\n      // Add to trade feed\n      const newTrade = {\n        time: new Date().toLocaleTimeString('en-US', {\n          hour12: false,\n          hour: '2-digit',\n          minute: '2-digit'\n        }),\n        commodity: commodity.name.substring(0, 5).toUpperCase(),\n        action: 'BUY',\n        quantity: commodity.quantity,\n        value: cost\n      };\n      setTradeFeed(prev => [newTrade, ...prev.slice(0, 4)]);\n\n      // Show success notification\n      showNotification({\n        type: 'buy',\n        title: 'Trade Successful!',\n        message: `Bought ${commodity.quantity} ${commodity.name} for ₹${cost.toLocaleString()}`\n      });\n    } else {\n      // Show error notification\n      showNotification({\n        type: 'error',\n        title: 'Insufficient Credits',\n        message: `You need ₹${cost.toLocaleString()} but only have ₹${gameState.credits.toLocaleString()}`\n      });\n    }\n  };\n  const handleSell = commodityId => {\n    const commodity = commodities.find(c => c.id === commodityId);\n    const revenue = commodity.sellPrice * commodity.quantity;\n    setGameState(prev => ({\n      ...prev,\n      credits: prev.credits + revenue,\n      profit: prev.profit + (revenue - commodity.buyPrice * commodity.quantity)\n    }));\n\n    // Add to trade feed\n    const newTrade = {\n      time: new Date().toLocaleTimeString('en-US', {\n        hour12: false,\n        hour: '2-digit',\n        minute: '2-digit'\n      }),\n      commodity: commodity.name.substring(0, 5).toUpperCase(),\n      action: 'SELL',\n      quantity: commodity.quantity,\n      value: revenue\n    };\n    setTradeFeed(prev => [newTrade, ...prev.slice(0, 4)]);\n\n    // Show success notification\n    showNotification({\n      type: 'sell',\n      title: 'Trade Successful!',\n      message: `Sold ${commodity.quantity} ${commodity.name} for ₹${revenue.toLocaleString()}`\n    });\n  };\n  const toggleSimulation = () => {\n    setGameState(prev => ({\n      ...prev,\n      isSimulationPaused: !prev.isSimulationPaused\n    }));\n  };\n  const showNotification = notificationData => {\n    const newNotification = {\n      id: Date.now() + Math.random(),\n      ...notificationData\n    };\n    setNotifications(prev => [...prev, newNotification]);\n  };\n  const removeNotification = notificationId => {\n    setNotifications(prev => prev.filter(n => n.id !== notificationId));\n  };\n\n  // Simulate price fluctuations\n  useEffect(() => {\n    if (!gameState.isSimulationPaused) {\n      const interval = setInterval(() => {\n        setCommodities(prev => prev.map(commodity => {\n          const priceChange = (Math.random() - 0.5) * 0.1; // ±5% change\n          const newLastPrice = Math.max(1, Math.round(commodity.lastPrice * (1 + priceChange)));\n          const newBuyPrice = Math.max(1, newLastPrice - Math.floor(Math.random() * 3) - 1);\n          const newSellPrice = newLastPrice + Math.floor(Math.random() * 3) + 1;\n\n          // Update price history\n          const currentTime = new Date().toLocaleTimeString('en-US', {\n            hour12: false,\n            hour: '2-digit',\n            minute: '2-digit'\n          });\n          const newPriceHistory = [...commodity.priceHistory.slice(1), {\n            time: currentTime,\n            price: newLastPrice\n          }];\n          return {\n            ...commodity,\n            lastPrice: newLastPrice,\n            buyPrice: newBuyPrice,\n            sellPrice: newSellPrice,\n            priceHistory: newPriceHistory\n          };\n        }));\n      }, 3000);\n      return () => clearInterval(interval);\n    }\n  }, [gameState.isSimulationPaused]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      gameState: gameState,\n      onToggleSimulation: toggleSimulation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(TradingGrid, {\n        commodities: commodities,\n        onQuantityChange: handleQuantityChange,\n        onBuy: handleBuy,\n        onSell: handleSell\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Sidebar, {\n        aiPortfolio: aiPortfolio,\n        marketTrends: marketTrends,\n        tradeFeed: tradeFeed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NotificationContainer, {\n      notifications: notifications,\n      onRemoveNotification: removeNotification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"J6tl3QvupgSR4KErq4xFeeRtWrE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","TradingGrid","Sidebar","NotificationContainer","jsxDEV","_jsxDEV","App","_s","gameState","setGameState","credits","profit","pnl","totalMargin","isSimulationPaused","commodities","setCommodities","id","name","icon","lastPrice","supply","demand","buyPrice","sellPrice","buyQuantity","sellQuantity","unit","quantity","holdings","priceHistory","time","price","aiPortfolio","setAiPortfolio","marketTrends","setMarketTrends","trend","color","tradeFeed","setTradeFeed","commodity","action","value","notifications","setNotifications","handleQuantityChange","commodityId","newQuantity","prev","map","Math","max","min","handleBuy","find","c","cost","newTrade","Date","toLocaleTimeString","hour12","hour","minute","substring","toUpperCase","slice","showNotification","type","title","message","toLocaleString","handleSell","revenue","toggleSimulation","notificationData","newNotification","now","random","removeNotification","notificationId","filter","n","interval","setInterval","priceChange","newLastPrice","round","newBuyPrice","floor","newSellPrice","currentTime","newPriceHistory","clearInterval","className","children","onToggleSimulation","fileName","_jsxFileName","lineNumber","columnNumber","onQuantityChange","onBuy","onSell","onRemoveNotification","_c","$RefreshReg$"],"sources":["F:/Windsurf/Native/GTC 3/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport TradingGrid from './components/TradingGrid';\r\nimport Sidebar from './components/Sidebar';\r\nimport NotificationContainer from './components/NotificationContainer';\r\n\r\nfunction App() {\r\n  const [gameState, setGameState] = useState({\r\n    credits: 74192,\r\n    profit: 6011,\r\n    pnl: 4191,\r\n    totalMargin: 75945,\r\n    isSimulationPaused: false\r\n  });\r\n\r\n  const [commodities, setCommodities] = useState([\r\n    {\r\n      id: 'quantum-crystals',\r\n      name: 'Quantum Crystals',\r\n      icon: '💎',\r\n      lastPrice: 29,\r\n      supply: 5825,\r\n      demand: 2159,\r\n      buyPrice: 28,\r\n      sellPrice: 30,\r\n      buyQuantity: 1068,\r\n      sellQuantity: 1042,\r\n      unit: 'Tons',\r\n      quantity: 1,\r\n      holdings: 0,\r\n      priceHistory: [\r\n        { time: '00:00', price: 25 }, { time: '04:00', price: 27 }, { time: '08:00', price: 26 },\r\n        { time: '12:00', price: 28 }, { time: '16:00', price: 30 }, { time: '20:00', price: 29 }\r\n      ]\r\n    },\r\n    {\r\n      id: 'dark-matter',\r\n      name: 'Dark Matter',\r\n      icon: '⚫',\r\n      lastPrice: 929,\r\n      supply: 1296,\r\n      demand: 3383,\r\n      buyPrice: 910,\r\n      sellPrice: 948,\r\n      buyQuantity: 800,\r\n      sellQuantity: 1200,\r\n      unit: 'Units',\r\n      quantity: 1,\r\n      holdings: 0,\r\n      priceHistory: [\r\n        { time: '00:00', price: 850 }, { time: '04:00', price: 880 }, { time: '08:00', price: 920 },\r\n        { time: '12:00', price: 950 }, { time: '16:00', price: 940 }, { time: '20:00', price: 929 }\r\n      ]\r\n    },\r\n    {\r\n      id: 'neural-processors',\r\n      name: 'Neural Processors',\r\n      icon: '🧠',\r\n      lastPrice: 304,\r\n      supply: 8886,\r\n      demand: 2359,\r\n      buyPrice: 298,\r\n      sellPrice: 310,\r\n      buyQuantity: 1500,\r\n      sellQuantity: 1000,\r\n      unit: 'Units',\r\n      quantity: 1,\r\n      holdings: 0,\r\n      priceHistory: [\r\n        { time: '00:00', price: 280 }, { time: '04:00', price: 290 }, { time: '08:00', price: 300 },\r\n        { time: '12:00', price: 310 }, { time: '16:00', price: 305 }, { time: '20:00', price: 304 }\r\n      ]\r\n    },\r\n    {\r\n      id: 'antimatter-cores',\r\n      name: 'Antimatter Cores',\r\n      icon: '⚛️',\r\n      lastPrice: 1347,\r\n      supply: 623,\r\n      demand: 1911,\r\n      buyPrice: 1320,\r\n      sellPrice: 1374,\r\n      buyQuantity: 500,\r\n      sellQuantity: 800,\r\n      unit: 'Units',\r\n      quantity: 1,\r\n      holdings: 0,\r\n      priceHistory: [\r\n        { time: '00:00', price: 1300 }, { time: '04:00', price: 1320 }, { time: '08:00', price: 1350 },\r\n        { time: '12:00', price: 1380 }, { time: '16:00', price: 1360 }, { time: '20:00', price: 1347 }\r\n      ]\r\n    },\r\n    {\r\n      id: 'plasma-cells',\r\n      name: 'Plasma Cells',\r\n      icon: '⚡',\r\n      lastPrice: 77,\r\n      supply: 4618,\r\n      demand: 3229,\r\n      buyPrice: 75,\r\n      sellPrice: 79,\r\n      buyQuantity: 2000,\r\n      sellQuantity: 1500,\r\n      unit: 'Units',\r\n      quantity: 1,\r\n      holdings: 0,\r\n      priceHistory: [\r\n        { time: '00:00', price: 70 }, { time: '04:00', price: 72 }, { time: '08:00', price: 75 },\r\n        { time: '12:00', price: 78 }, { time: '16:00', price: 76 }, { time: '20:00', price: 77 }\r\n      ]\r\n    },\r\n    {\r\n      id: 'fusion-reactors',\r\n      name: 'Fusion Reactors',\r\n      icon: '🔋',\r\n      lastPrice: 5235,\r\n      supply: 214,\r\n      demand: 800,\r\n      buyPrice: 5130,\r\n      sellPrice: 5340,\r\n      buyQuantity: 100,\r\n      sellQuantity: 300,\r\n      unit: 'Units',\r\n      quantity: 1,\r\n      holdings: 0,\r\n      priceHistory: [\r\n        { time: '00:00', price: 5000 }, { time: '04:00', price: 5100 }, { time: '08:00', price: 5200 },\r\n        { time: '12:00', price: 5300 }, { time: '16:00', price: 5250 }, { time: '20:00', price: 5235 }\r\n      ]\r\n    }\r\n  ]);\r\n\r\n  const [aiPortfolio, setAiPortfolio] = useState({\r\n    'Quantum Crystals': 12345,\r\n    'Dark Matter': 8901,\r\n    'Neural Processors': 15678,\r\n    'Plasma Cells': 4567\r\n  });\r\n\r\n  const [marketTrends, setMarketTrends] = useState([\r\n    { name: 'Quantum Crystals', trend: 'Bullish', color: '#00ff88' },\r\n    { name: 'Dark Matter', trend: 'Bearish', color: '#ff4444' },\r\n    { name: 'Neural Processors', trend: 'Bullish', color: '#00ff88' }\r\n  ]);\r\n\r\n  const [tradeFeed, setTradeFeed] = useState([\r\n    { time: '19:11', commodity: 'FREAC', action: 'SELL', quantity: 11, value: 56903 },\r\n    { time: '19:10', commodity: 'ACORE', action: 'BUY', quantity: 47, value: 61147 },\r\n    { time: '19:09', commodity: 'QCRYS', action: 'SELL', quantity: 73, value: 2190 },\r\n    { time: '19:08', commodity: 'DMATT', action: 'BUY', quantity: 25, value: 23225 },\r\n    { time: '19:07', commodity: 'NPROC', action: 'SELL', quantity: 15, value: 4560 }\r\n  ]);\r\n\r\n  const [notifications, setNotifications] = useState([]);\r\n\r\n  const handleQuantityChange = (commodityId, newQuantity) => {\r\n    setCommodities(prev => prev.map(commodity => \r\n      commodity.id === commodityId \r\n        ? { ...commodity, quantity: Math.max(1, Math.min(100, newQuantity)) }\r\n        : commodity\r\n    ));\r\n  };\r\n\r\n  const handleBuy = (commodityId) => {\r\n    const commodity = commodities.find(c => c.id === commodityId);\r\n    const cost = commodity.buyPrice * commodity.quantity;\r\n    \r\n    if (gameState.credits >= cost) {\r\n      setGameState(prev => ({\r\n        ...prev,\r\n        credits: prev.credits - cost,\r\n        totalMargin: prev.totalMargin + cost\r\n      }));\r\n      \r\n      // Add to trade feed\r\n      const newTrade = {\r\n        time: new Date().toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' }),\r\n        commodity: commodity.name.substring(0, 5).toUpperCase(),\r\n        action: 'BUY',\r\n        quantity: commodity.quantity,\r\n        value: cost\r\n      };\r\n      \r\n      setTradeFeed(prev => [newTrade, ...prev.slice(0, 4)]);\r\n      \r\n      // Show success notification\r\n      showNotification({\r\n        type: 'buy',\r\n        title: 'Trade Successful!',\r\n        message: `Bought ${commodity.quantity} ${commodity.name} for ₹${cost.toLocaleString()}`\r\n      });\r\n    } else {\r\n      // Show error notification\r\n      showNotification({\r\n        type: 'error',\r\n        title: 'Insufficient Credits',\r\n        message: `You need ₹${cost.toLocaleString()} but only have ₹${gameState.credits.toLocaleString()}`\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSell = (commodityId) => {\r\n    const commodity = commodities.find(c => c.id === commodityId);\r\n    const revenue = commodity.sellPrice * commodity.quantity;\r\n    \r\n    setGameState(prev => ({\r\n      ...prev,\r\n      credits: prev.credits + revenue,\r\n      profit: prev.profit + (revenue - commodity.buyPrice * commodity.quantity)\r\n    }));\r\n    \r\n    // Add to trade feed\r\n    const newTrade = {\r\n      time: new Date().toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' }),\r\n      commodity: commodity.name.substring(0, 5).toUpperCase(),\r\n      action: 'SELL',\r\n      quantity: commodity.quantity,\r\n      value: revenue\r\n    };\r\n    \r\n    setTradeFeed(prev => [newTrade, ...prev.slice(0, 4)]);\r\n    \r\n    // Show success notification\r\n    showNotification({\r\n      type: 'sell',\r\n      title: 'Trade Successful!',\r\n      message: `Sold ${commodity.quantity} ${commodity.name} for ₹${revenue.toLocaleString()}`\r\n    });\r\n  };\r\n\r\n  const toggleSimulation = () => {\r\n    setGameState(prev => ({\r\n      ...prev,\r\n      isSimulationPaused: !prev.isSimulationPaused\r\n    }));\r\n  };\r\n\r\n  const showNotification = (notificationData) => {\r\n    const newNotification = {\r\n      id: Date.now() + Math.random(),\r\n      ...notificationData\r\n    };\r\n    \r\n    setNotifications(prev => [...prev, newNotification]);\r\n  };\r\n\r\n  const removeNotification = (notificationId) => {\r\n    setNotifications(prev => prev.filter(n => n.id !== notificationId));\r\n  };\r\n\r\n  // Simulate price fluctuations\r\n  useEffect(() => {\r\n    if (!gameState.isSimulationPaused) {\r\n      const interval = setInterval(() => {\r\n        setCommodities(prev => prev.map(commodity => {\r\n          const priceChange = (Math.random() - 0.5) * 0.1; // ±5% change\r\n          const newLastPrice = Math.max(1, Math.round(commodity.lastPrice * (1 + priceChange)));\r\n          const newBuyPrice = Math.max(1, newLastPrice - Math.floor(Math.random() * 3) - 1);\r\n          const newSellPrice = newLastPrice + Math.floor(Math.random() * 3) + 1;\r\n          \r\n          // Update price history\r\n          const currentTime = new Date().toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' });\r\n          const newPriceHistory = [...commodity.priceHistory.slice(1), { time: currentTime, price: newLastPrice }];\r\n          \r\n          return {\r\n            ...commodity,\r\n            lastPrice: newLastPrice,\r\n            buyPrice: newBuyPrice,\r\n            sellPrice: newSellPrice,\r\n            priceHistory: newPriceHistory\r\n          };\r\n        }));\r\n      }, 3000);\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [gameState.isSimulationPaused]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header \r\n        gameState={gameState} \r\n        onToggleSimulation={toggleSimulation}\r\n      />\r\n      <div className=\"main-content\">\r\n        <TradingGrid \r\n          commodities={commodities}\r\n          onQuantityChange={handleQuantityChange}\r\n          onBuy={handleBuy}\r\n          onSell={handleSell}\r\n        />\r\n        <Sidebar \r\n          aiPortfolio={aiPortfolio}\r\n          marketTrends={marketTrends}\r\n          tradeFeed={tradeFeed}\r\n        />\r\n      </div>\r\n      <NotificationContainer \r\n        notifications={notifications}\r\n        onRemoveNotification={removeNotification}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
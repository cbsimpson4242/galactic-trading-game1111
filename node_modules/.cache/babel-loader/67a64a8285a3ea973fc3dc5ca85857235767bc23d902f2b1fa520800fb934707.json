{"ast":null,"code":"import _objectSpread from\"F:/Windsurf/Native/GTC 3/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import'./App.css';import Header from'./components/Header';import TradingGrid from'./components/TradingGrid';import Sidebar from'./components/Sidebar';import NotificationContainer from'./components/NotificationContainer';import AITraderPanel from'./components/AITraderPanel';import MarketSentiment from'./components/MarketSentiment';import FactoryManager from'./components/FactoryManager';import AIControlCenter from'./components/AIControlCenter';import Login from'./components/Login';import{generateAITraders,generateTradingDecision,generateFactoryDecision,executeTrade,updateTraderPerformance}from'./aiTraders';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[currentUser,setCurrentUser]=useState(null);const[gameState,setGameState]=useState({credits:100000,profit:0,pnl:0,totalMargin:0,isSimulationPaused:false});const[commodities,setCommodities]=useState([{id:'quantum-crystals',name:'Quantum Crystals',icon:'💎',lastPrice:29,supply:30000,buyPrice:28,sellPrice:30,buyQuantity:1068,sellQuantity:1042,unit:'Tons',quantity:1,holdings:0,costBasis:0,// Track average purchase price\npriceHistory:[{time:'00:00',price:25},{time:'02:00',price:26},{time:'04:00',price:27},{time:'06:00',price:25},{time:'08:00',price:26},{time:'10:00',price:28},{time:'12:00',price:28},{time:'14:00',price:29},{time:'16:00',price:30},{time:'18:00',price:31},{time:'20:00',price:29},{time:'22:00',price:30}]},{id:'dark-matter',name:'Dark Matter',icon:'⚫',lastPrice:929,supply:30000,buyPrice:910,sellPrice:948,buyQuantity:800,sellQuantity:1200,unit:'Units',quantity:1,holdings:0,costBasis:0,priceHistory:[{time:'00:00',price:850},{time:'02:00',price:860},{time:'04:00',price:880},{time:'06:00',price:870},{time:'08:00',price:920},{time:'10:00',price:935},{time:'12:00',price:950},{time:'14:00',price:945},{time:'16:00',price:940},{time:'18:00',price:935},{time:'20:00',price:929},{time:'22:00',price:925}]},{id:'neural-processors',name:'Neural Processors',icon:'🧠',lastPrice:304,supply:30000,buyPrice:298,sellPrice:310,buyQuantity:1500,sellQuantity:1000,unit:'Units',quantity:1,holdings:0,costBasis:0,priceHistory:[{time:'00:00',price:280},{time:'02:00',price:285},{time:'04:00',price:290},{time:'06:00',price:288},{time:'08:00',price:300},{time:'10:00',price:305},{time:'12:00',price:310},{time:'14:00',price:308},{time:'16:00',price:305},{time:'18:00',price:302},{time:'20:00',price:304},{time:'22:00',price:306}]},{id:'antimatter-cores',name:'Antimatter Cores',icon:'⚛️',lastPrice:1347,supply:30000,buyPrice:1320,sellPrice:1374,buyQuantity:500,sellQuantity:800,unit:'Units',quantity:1,holdings:0,costBasis:0,priceHistory:[{time:'00:00',price:1300},{time:'02:00',price:1310},{time:'04:00',price:1320},{time:'06:00',price:1315},{time:'08:00',price:1350},{time:'10:00',price:1365},{time:'12:00',price:1380},{time:'14:00',price:1375},{time:'16:00',price:1360},{time:'18:00',price:1355},{time:'20:00',price:1347},{time:'22:00',price:1350}]},{id:'plasma-cells',name:'Plasma Cells',icon:'⚡',lastPrice:77,supply:30000,buyPrice:75,sellPrice:79,buyQuantity:2000,sellQuantity:1500,unit:'Units',quantity:1,holdings:0,costBasis:0,priceHistory:[{time:'00:00',price:70},{time:'02:00',price:71},{time:'04:00',price:72},{time:'06:00',price:71},{time:'08:00',price:75},{time:'10:00',price:76},{time:'12:00',price:78},{time:'14:00',price:77},{time:'16:00',price:76},{time:'18:00',price:75},{time:'20:00',price:77},{time:'22:00',price:78}]},{id:'fusion-reactors',name:'Fusion Reactors',icon:'🔋',lastPrice:5235,supply:30000,buyPrice:5130,sellPrice:5340,buyQuantity:100,sellQuantity:300,unit:'Units',quantity:1,holdings:0,costBasis:0,priceHistory:[{time:'00:00',price:5000},{time:'02:00',price:5050},{time:'04:00',price:5100},{time:'06:00',price:5080},{time:'08:00',price:5200},{time:'10:00',price:5250},{time:'12:00',price:5300},{time:'14:00',price:5280},{time:'16:00',price:5250},{time:'18:00',price:5240},{time:'20:00',price:5235},{time:'22:00',price:5240}]}]);const[aiPortfolio,setAiPortfolio]=useState({'Quantum Crystals':12345,'Dark Matter':8901,'Neural Processors':15678,'Plasma Cells':4567});const[marketTrends,setMarketTrends]=useState([{name:'Quantum Crystals',trend:'Bullish',color:'#00ff88'},{name:'Dark Matter',trend:'Bearish',color:'#ff4444'},{name:'Neural Processors',trend:'Bullish',color:'#00ff88'}]);const[tradeFeed,setTradeFeed]=useState([{time:'19:11',commodity:'FREAC',action:'SELL',quantity:11,value:56903,trader:'AlphaBot1',isAI:true},{time:'19:10',commodity:'ACORE',action:'BUY',quantity:47,value:61147,trader:'You',isAI:false},{time:'19:09',commodity:'QCRYS',action:'SELL',quantity:73,value:2190,trader:'CyberTrader2',isAI:true},{time:'19:08',commodity:'DMATT',action:'BUY',quantity:25,value:23225,trader:'You',isAI:false},{time:'19:07',commodity:'NPROC',action:'SELL',quantity:15,value:4560,trader:'QuantumAI3',isAI:true}]);const[notifications,setNotifications]=useState([]);// AI Trading System\nconst[aiTraders,setAiTraders]=useState([]);const[aiTradeFeed,setAiTradeFeed]=useState([]);const[showAITraders,setShowAITraders]=useState(false);const[showMarketSentiment,setShowMarketSentiment]=useState(false);const[showFactoryManager,setShowFactoryManager]=useState(false);const[showAIControlCenter,setShowAIControlCenter]=useState(false);const[factories,setFactories]=useState([]);const handleQuantityChange=(commodityId,newQuantity)=>{setCommodities(prev=>prev.map(commodity=>commodity.id===commodityId?_objectSpread(_objectSpread({},commodity),{},{quantity:Math.max(1,newQuantity)}):commodity));};const handleBuy=commodityId=>{const commodity=commodities.find(c=>c.id===commodityId);const cost=commodity.buyPrice*commodity.quantity;if(gameState.credits>=cost&&commodity.supply>=commodity.quantity){setGameState(prev=>_objectSpread(_objectSpread({},prev),{},{credits:prev.credits-cost,totalMargin:prev.totalMargin+cost}));// Update holdings, supply, and cost basis\nsetCommodities(prev=>prev.map(c=>c.id===commodityId?_objectSpread(_objectSpread({},c),{},{holdings:c.holdings+c.quantity,supply:Math.max(0,c.supply-c.quantity),costBasis:c.holdings===0?c.buyPrice:(c.costBasis*c.holdings+c.buyPrice*c.quantity)/(c.holdings+c.quantity)}):c));// Add to trade feed\nconst newTrade={time:new Date().toLocaleTimeString('en-US',{hour12:false,hour:'2-digit',minute:'2-digit'}),commodity:commodity.name.substring(0,5).toUpperCase(),action:'BUY',quantity:commodity.quantity,value:cost,trader:'You',isAI:false};setTradeFeed(prev=>[newTrade,...prev.slice(0,14)]);// Keep last 15 trades total\n// Show success notification\nshowNotification({type:'buy',title:'Trade Successful!',message:\"Bought \".concat(commodity.quantity,\" \").concat(commodity.name,\" for \\u20B9\").concat(cost.toLocaleString())});}else if(commodity.supply<commodity.quantity){// Show error notification for insufficient supply\nshowNotification({type:'error',title:'Insufficient Supply',message:\"Only \".concat(commodity.supply,\" \").concat(commodity.name,\" available, but trying to buy \").concat(commodity.quantity)});}else{// Show error notification for insufficient credits\nshowNotification({type:'error',title:'Insufficient Credits',message:\"You need \\u20B9\".concat(cost.toLocaleString(),\" but only have \\u20B9\").concat(gameState.credits.toLocaleString())});}};const handleSell=function(commodityId){let sellQuantity=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;const commodity=commodities.find(c=>c.id===commodityId);const quantityToSell=sellQuantity!==null?sellQuantity:commodity.quantity;const revenue=commodity.sellPrice*quantityToSell;// Check if user has enough holdings to sell\nif(commodity.holdings>=quantityToSell){setGameState(prev=>_objectSpread(_objectSpread({},prev),{},{credits:prev.credits+revenue,profit:prev.profit+(revenue-commodity.costBasis*quantityToSell)}));// Update holdings, supply, and cost basis\nsetCommodities(prev=>prev.map(c=>c.id===commodityId?_objectSpread(_objectSpread({},c),{},{holdings:c.holdings-quantityToSell,supply:c.supply+quantityToSell,costBasis:c.holdings-quantityToSell===0?0:c.costBasis// Reset cost basis if all sold\n}):c));// Add to trade feed\nconst newTrade={time:new Date().toLocaleTimeString('en-US',{hour12:false,hour:'2-digit',minute:'2-digit'}),commodity:commodity.name.substring(0,5).toUpperCase(),action:'SELL',quantity:quantityToSell,value:revenue,trader:'You',isAI:false};setTradeFeed(prev=>[newTrade,...prev.slice(0,14)]);// Keep last 15 trades total\n// Show success notification\nshowNotification({type:'sell',title:'Trade Successful!',message:\"Sold \".concat(quantityToSell,\" \").concat(commodity.name,\" for \\u20B9\").concat(revenue.toLocaleString())});}else{// Show error notification for insufficient holdings\nshowNotification({type:'error',title:'Insufficient Holdings',message:\"You only have \".concat(commodity.holdings,\" \").concat(commodity.name,\" but trying to sell \").concat(quantityToSell)});}};const handleLogin=user=>{setCurrentUser(user);// Load user's game state if it exists\nif(user.gameState){setGameState(prev=>_objectSpread(_objectSpread({},prev),user.gameState));}};const handleLogout=()=>{// Save current game state to user data\nif(currentUser){const existingUsers=JSON.parse(localStorage.getItem('gtc_users')||'[]');const updatedUsers=existingUsers.map(user=>{if(user.username===currentUser.username){return _objectSpread(_objectSpread({},user),{},{gameState:{credits:gameState.credits,profit:gameState.profit,pnl:gameState.pnl,totalMargin:gameState.totalMargin}});}return user;});localStorage.setItem('gtc_users',JSON.stringify(updatedUsers));}setCurrentUser(null);setGameState({credits:100000,profit:0,pnl:0,totalMargin:0,isSimulationPaused:false});};const toggleSimulation=()=>{setGameState(prev=>_objectSpread(_objectSpread({},prev),{},{isSimulationPaused:!prev.isSimulationPaused}));};const showNotification=notificationData=>{const newNotification=_objectSpread({id:Date.now()+Math.random()},notificationData);setNotifications(prev=>[...prev,newNotification]);};const removeNotification=notificationId=>{setNotifications(prev=>prev.filter(n=>n.id!==notificationId));};// Calculate live portfolio P&L\nconst calculatePortfolioPnL=commoditiesList=>{let totalPnL=0;let totalPortfolioValue=0;commoditiesList.forEach(commodity=>{if(commodity.holdings>0){const currentValue=commodity.holdings*commodity.lastPrice;const costValue=commodity.holdings*commodity.costBasis;const commodityPnL=currentValue-costValue;totalPnL+=commodityPnL;totalPortfolioValue+=currentValue;}});return{totalPnL,totalPortfolioValue};};// Initialize AI traders\nuseEffect(()=>{if(aiTraders.length===0){setAiTraders(generateAITraders());}},[aiTraders.length]);// Update live P&L whenever commodities change\nuseEffect(()=>{const{totalPnL,totalPortfolioValue}=calculatePortfolioPnL(commodities);setGameState(prev=>_objectSpread(_objectSpread({},prev),{},{pnl:totalPnL,totalMargin:totalPortfolioValue}));},[commodities]);// AI Trading simulation - synchronized with price updates\nuseEffect(()=>{if(!gameState.isSimulationPaused&&aiTraders.length>0){const interval=setInterval(()=>{// Generate trading decisions for all AI traders\nconst allTradingDecisions=[];const allFactoryDecisions=[];aiTraders.forEach(trader=>{// Generate trading decisions\nconst tradingDecisions=generateTradingDecision(trader,commodities,{commodities,marketTrends},aiTradeFeed);allTradingDecisions.push(...tradingDecisions);// Generate factory building decisions (less frequent)\nconst factoryDecisions=generateFactoryDecision(trader,commodities,{commodities,marketTrends},aiTradeFeed);allFactoryDecisions.push(...factoryDecisions);});// Execute trades\nif(allTradingDecisions.length>0){const executedTrades=[];const updatedTraders=[...aiTraders];allTradingDecisions.forEach(decision=>{const traderIndex=updatedTraders.findIndex(t=>t.id===decision.traderId);if(traderIndex!==-1){// Find the commodity being traded (use ID for more reliable matching)\nconst commodity=commodities.find(c=>c.id===decision.commodityId||c.name===decision.commodityName);// Check if trade is valid (sufficient supply for buy, or sufficient holdings for sell)\nlet canExecute=false;if(decision.action==='BUY'){canExecute=commodity&&commodity.supply>=decision.quantity;}else if(decision.action==='SELL'){// Check if AI trader has sufficient holdings to sell\nconst trader=updatedTraders[traderIndex];const traderHoldings=trader.portfolio[commodity.id]||0;canExecute=traderHoldings>=decision.quantity;}if(canExecute){// Execute the trade\nupdatedTraders[traderIndex]=executeTrade(updatedTraders[traderIndex],decision,commodities);// Update commodity supply\nsetCommodities(prev=>prev.map(c=>{if(c.id===decision.commodityId||c.name===decision.commodityName){if(decision.action==='BUY'){return _objectSpread(_objectSpread({},c),{},{supply:Math.max(0,c.supply-decision.quantity)});}else if(decision.action==='SELL'){return _objectSpread(_objectSpread({},c),{},{supply:c.supply+decision.quantity});}}return c;}));// Add to AI trade feed\nconst aiTrade={time:new Date().toLocaleTimeString('en-US',{hour12:false,hour:'2-digit',minute:'2-digit'}),trader:decision.traderName,commodity:decision.commodityName.substring(0,5).toUpperCase(),action:decision.action,quantity:decision.quantity,value:decision.quantity*decision.price,strategy:decision.strategy,emotionalState:decision.emotionalState};executedTrades.push(aiTrade);// Debug: Log AI trade execution\nconsole.log(\"AI Trade: \".concat(decision.traderName,\" \").concat(decision.action,\" \").concat(decision.quantity,\" \").concat(decision.commodityName,\" at \\u20B9\").concat(decision.price,\". Supply changed from \").concat(commodity.supply,\" to \").concat(decision.action==='BUY'?commodity.supply-decision.quantity:commodity.supply+decision.quantity));}}});// Update AI traders\nsetAiTraders(updatedTraders.map(trader=>updateTraderPerformance(trader)));// Update AI trade feed\nsetAiTradeFeed(prev=>[...executedTrades,...prev.slice(0,19)]);// Keep last 20 trades\n// Update main trade feed with AI trades\nif(executedTrades.length>0){// Include more AI trades in the main feed for better visibility\nconst selectedTrades=executedTrades.slice(0,Math.min(executedTrades.length,8));// Show up to 8 AI trades\nconst newTradeFeed=selectedTrades.map(trade=>({time:trade.time,commodity:trade.commodity,action:trade.action,quantity:trade.quantity,value:trade.value,trader:trade.trader,// Include trader name for identification\nisAI:true// Mark as AI trade for styling\n}));setTradeFeed(prev=>[...newTradeFeed,...prev.slice(0,7)]);// Keep last 15 trades total\n}}// Execute factory building decisions\nif(allFactoryDecisions.length>0){const updatedTraders=[...aiTraders];allFactoryDecisions.forEach(decision=>{const traderIndex=updatedTraders.findIndex(t=>t.id===decision.traderId);if(traderIndex!==-1){const trader=updatedTraders[traderIndex];// Check if trader has enough capital for factory\nconst factoryCost=75000;// Basic factory cost\nif(trader.capital>=factoryCost){// Create factory for the AI trader\nconst newFactory={id:\"ai-factory-\".concat(trader.id,\"-\").concat(Date.now()),name:\"\".concat(trader.name,\"'s \").concat(decision.commodityName,\" Factory\"),level:1,commodityId:decision.commodityId,commodityName:decision.commodityName,productionUnit:'Units',productionQuantity:50,// AI factories produce less\nproductionTime:20,// 20 seconds\ntimeRemaining:20,currentProduction:0,upgradeCost:150000,upgradeMultiplier:1.5,costMultiplier:1.3,lastUpdate:Date.now(),owner:trader.id,ownerName:trader.name};// Add factory to trader's factories\nupdatedTraders[traderIndex]=_objectSpread(_objectSpread({},trader),{},{factories:[...trader.factories,newFactory],capital:trader.capital-factoryCost,lastFactoryDecision:Date.now()});// Add factory to global factories list\nsetFactories(prev=>[...prev,newFactory]);// Show notification for AI factory building\nshowNotification({type:'info',title:'AI Factory Built!',message:\"\".concat(trader.name,\" built a \").concat(decision.commodityName,\" factory for \\u20B9\").concat(factoryCost.toLocaleString())});}}});// Update AI traders\nsetAiTraders(updatedTraders);}},2000);// AI traders make decisions every 2 seconds to match price updates\nreturn()=>clearInterval(interval);}},[gameState.isSimulationPaused,aiTraders,commodities,marketTrends,aiTradeFeed]);const handleTraderSelect=trader=>{console.log('Selected trader:',trader);};// AI Control Center Functions\nconst handleUpdateAITraders=updatedTraders=>{setAiTraders(updatedTraders);// Show notification\nshowNotification({type:'info',title:'AI Settings Updated!',message:\"Updated settings for \".concat(updatedTraders.length,\" AI traders\")});};// Factory Management Functions\nconst handleBuildFactory=(template,commodity)=>{const newFactory={id:\"factory-\".concat(Date.now(),\"-\").concat(Math.random().toString(36).substr(2,9)),name:\"\".concat(template.name,\" - \").concat(commodity.name),level:1,commodityId:commodity.id,commodityName:commodity.name,productionUnit:commodity.unit,productionQuantity:template.baseProduction,productionTime:template.productionTime,timeRemaining:template.productionTime,currentProduction:0,upgradeCost:Math.round(template.cost*template.costMultiplier),upgradeMultiplier:template.upgradeMultiplier,costMultiplier:template.costMultiplier,lastUpdate:Date.now(),owner:'player',ownerName:'Player'};setFactories(prev=>[...prev,newFactory]);// Deduct credits\nsetGameState(prev=>_objectSpread(_objectSpread({},prev),{},{credits:prev.credits-template.cost}));// Show success notification\nshowNotification({type:'success',title:'Factory Built!',message:\"Successfully built \".concat(newFactory.name,\" for \\u20B9\").concat(template.cost.toLocaleString())});};const handleUpgradeFactory=factoryId=>{const factory=factories.find(f=>f.id===factoryId);if(!factory||gameState.credits<factory.upgradeCost){showNotification({type:'error',title:'Cannot Upgrade',message:\"You need \\u20B9\".concat(factory===null||factory===void 0?void 0:factory.upgradeCost.toLocaleString(),\" to upgrade this factory\")});return;}setFactories(prev=>prev.map(f=>{if(f.id===factoryId){return _objectSpread(_objectSpread({},f),{},{level:f.level+1,productionQuantity:Math.round(f.productionQuantity*f.upgradeMultiplier),upgradeCost:Math.round(f.upgradeCost*f.costMultiplier)});}return f;}));// Deduct credits\nsetGameState(prev=>_objectSpread(_objectSpread({},prev),{},{credits:prev.credits-factory.upgradeCost}));// Show success notification\nshowNotification({type:'success',title:'Factory Upgraded!',message:\"Upgraded \".concat(factory.name,\" to Level \").concat(factory.level+1,\" for \\u20B9\").concat(factory.upgradeCost.toLocaleString())});};// Simulate price fluctuations based on supply only\nuseEffect(()=>{if(!gameState.isSimulationPaused){const interval=setInterval(()=>{setCommodities(prev=>prev.map(commodity=>{// Calculate price based on supply with target price of 200 at supply of 30000\n// Use inverse relationship: price = basePrice * (targetSupply / currentSupply)\nconst targetSupply=30000;// Supply level where we want price to be around 200\nconst targetPrice=200;// Target price at target supply\nconst basePrice=targetPrice*(targetSupply/commodity.supply);// Add much more variation for volatile market\nconst variation=(Math.random()-0.5)*0.6;// ±30% variation (was ±10%)\nconst newLastPrice=Math.max(1,Math.round(basePrice*(1+variation)));// Add dramatic momentum based on supply changes\nconst supplyChange=commodity.supply-(commodity.supply+Math.floor((Math.random()-0.5)*200));// Larger supply swings\nconst momentumFactor=supplyChange/1000*0.4;// Much larger momentum effect (was 0.1)\n// Add price trend momentum (cascading effects)\nlet trendMomentum=0;if(commodity.priceHistory.length>=3){const recentPrices=commodity.priceHistory.slice(-3);const priceDirection=recentPrices[2].price-recentPrices[0].price;const trendStrength=Math.abs(priceDirection)/recentPrices[0].price;trendMomentum=(priceDirection>0?1:-1)*trendStrength*0.8;// Up to 80% trend continuation\n}// Add extreme volatility events (5% chance of dramatic price movement)\nlet volatilityMultiplier=1;if(Math.random()<0.05){// 5% chance of extreme event\nconst isSpike=Math.random()<0.5;volatilityMultiplier=isSpike?2.5:0.4;// 2.5x spike or 0.4x crash\n}// Add supply-based volatility - more dramatic when supply is low\nconst supplyRatio=commodity.supply/30000;// Current supply vs starting supply\nif(supplyRatio<0.3){// Supply below 30% of starting\nconst scarcityMultiplier=1+(0.3-supplyRatio)*2;// Up to 1.6x multiplier\nvolatilityMultiplier*=scarcityMultiplier;}else if(supplyRatio>2){// Supply above 200% of starting\nconst abundanceMultiplier=1-(supplyRatio-2)*0.3;// Down to 0.7x multiplier\nvolatilityMultiplier*=abundanceMultiplier;}// Final price with momentum, trend momentum, volatility events, and maximum cap\nconst finalPrice=Math.max(1,Math.min(10000,Math.round(newLastPrice*(1+momentumFactor+trendMomentum)*volatilityMultiplier)));// Update buy/sell prices with spread\nconst spread=Math.floor(Math.random()*3)+1;const newBuyPrice=Math.max(1,finalPrice-spread);const newSellPrice=finalPrice+spread;// Update price history - keep last 50 data points for longer history\nconst currentTime=new Date().toLocaleTimeString('en-US',{hour12:false,hour:'2-digit',minute:'2-digit'});const newPriceHistory=[...commodity.priceHistory,{time:currentTime,price:finalPrice}];// Keep only the last 50 data points to prevent memory issues\nif(newPriceHistory.length>50){newPriceHistory.splice(0,newPriceHistory.length-50);}return _objectSpread(_objectSpread({},commodity),{},{lastPrice:finalPrice,buyPrice:newBuyPrice,sellPrice:newSellPrice,priceHistory:newPriceHistory});}));},2000);// Game cycles every 2 seconds\nreturn()=>clearInterval(interval);}},[gameState.isSimulationPaused]);// Factory Production Timer\nuseEffect(()=>{if(!gameState.isSimulationPaused&&factories.length>0){const interval=setInterval(()=>{setFactories(prev=>prev.map(factory=>{const now=Date.now();const timeDiff=Math.floor((now-factory.lastUpdate)/1000);// Convert to seconds\nif(factory.timeRemaining>0){const newTimeRemaining=Math.max(0,factory.timeRemaining-timeDiff);if(newTimeRemaining===0&&factory.timeRemaining>0){// Production cycle completed\nif(factory.owner&&factory.owner!=='player'){// AI-owned factory - add to AI trader's holdings\nsetAiTraders(prevTraders=>prevTraders.map(trader=>{if(trader.id===factory.owner){return _objectSpread(_objectSpread({},trader),{},{portfolio:_objectSpread(_objectSpread({},trader.portfolio),{},{[factory.commodityId]:(trader.portfolio[factory.commodityId]||0)+factory.productionQuantity})});}return trader;}));// Update commodity supply (AI production adds to market supply)\nsetCommodities(prevCommodities=>prevCommodities.map(commodity=>{if(commodity.id===factory.commodityId){return _objectSpread(_objectSpread({},commodity),{},{supply:commodity.supply+factory.productionQuantity});}return commodity;}));// Show notification for AI production\nshowNotification({type:'info',title:'AI Production Complete!',message:\"\".concat(factory.ownerName,\"'s factory produced \").concat(factory.productionQuantity,\" \").concat(factory.commodityName)});}else{// Player-owned factory - add to player holdings\nsetCommodities(prevCommodities=>prevCommodities.map(commodity=>{if(commodity.id===factory.commodityId){return _objectSpread(_objectSpread({},commodity),{},{holdings:commodity.holdings+factory.productionQuantity});}return commodity;}));// Show notification for player production\nshowNotification({type:'success',title:'Production Complete!',message:\"\".concat(factory.name,\" produced \").concat(factory.productionQuantity,\" \").concat(factory.commodityName,\" - automatically added to holdings!\")});}// Reset factory for next cycle\nreturn _objectSpread(_objectSpread({},factory),{},{timeRemaining:factory.productionTime,currentProduction:0,lastUpdate:now});}else{// Still producing\nreturn _objectSpread(_objectSpread({},factory),{},{timeRemaining:newTimeRemaining,lastUpdate:now});}}return factory;}));},2000);// Update every 2 seconds\nreturn()=>clearInterval(interval);}},[gameState.isSimulationPaused,factories.length]);// Show login screen if no user is logged in\nif(!currentUser){return/*#__PURE__*/_jsx(Login,{onLogin:handleLogin});}return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(Header,{gameState:gameState,onToggleSimulation:toggleSimulation,currentUser:currentUser,onLogout:handleLogout}),/*#__PURE__*/_jsxs(\"div\",{className:\"main-content\",children:[/*#__PURE__*/_jsx(TradingGrid,{commodities:commodities,onQuantityChange:handleQuantityChange,onBuy:handleBuy,onSell:handleSell,factories:factories}),/*#__PURE__*/_jsxs(\"div\",{className:\"sidebar-container\",children:[/*#__PURE__*/_jsx(Sidebar,{aiPortfolio:aiPortfolio,marketTrends:marketTrends,tradeFeed:tradeFeed,aiTradeFeed:aiTradeFeed}),/*#__PURE__*/_jsxs(\"div\",{className:\"ai-controls\",children:[/*#__PURE__*/_jsxs(\"button\",{className:\"ai-control-btn \".concat(showAITraders?'active':''),onClick:()=>setShowAITraders(!showAITraders),children:[\"\\uD83E\\uDD16 AI Traders (\",aiTraders.length,\")\"]}),/*#__PURE__*/_jsx(\"button\",{className:\"ai-control-btn \".concat(showMarketSentiment?'active':''),onClick:()=>setShowMarketSentiment(!showMarketSentiment),children:\"\\uD83D\\uDCCA Market Sentiment\"}),/*#__PURE__*/_jsxs(\"button\",{className:\"ai-control-btn \".concat(showFactoryManager?'active':''),onClick:()=>setShowFactoryManager(!showFactoryManager),children:[\"\\uD83C\\uDFED Factories (\",factories.length,\")\"]}),/*#__PURE__*/_jsx(\"button\",{className:\"ai-control-btn \".concat(showAIControlCenter?'active':''),onClick:()=>setShowAIControlCenter(!showAIControlCenter),children:\"\\u2699\\uFE0F AI Controls\"})]}),showAITraders&&/*#__PURE__*/_jsx(\"div\",{className:\"ai-panel-overlay\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"ai-panel-container\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"ai-panel-close-btn\",onClick:()=>setShowAITraders(false),children:\"\\xD7\"}),/*#__PURE__*/_jsx(AITraderPanel,{aiTraders:aiTraders,onTraderSelect:handleTraderSelect})]})}),showMarketSentiment&&/*#__PURE__*/_jsx(\"div\",{className:\"ai-panel-overlay\",children:/*#__PURE__*/_jsx(MarketSentiment,{aiTraders:aiTraders,commodities:commodities,onClose:()=>setShowMarketSentiment(false)})}),showFactoryManager&&/*#__PURE__*/_jsx(FactoryManager,{factories:factories,commodities:commodities,credits:gameState.credits,onBuildFactory:handleBuildFactory,onUpgradeFactory:handleUpgradeFactory,onClose:()=>setShowFactoryManager(false)}),showAIControlCenter&&/*#__PURE__*/_jsx(AIControlCenter,{aiTraders:aiTraders,onUpdateTraders:handleUpdateAITraders,onClose:()=>setShowAIControlCenter(false)})]})]}),/*#__PURE__*/_jsx(NotificationContainer,{notifications:notifications,onRemoveNotification:removeNotification})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","Header","TradingGrid","Sidebar","NotificationContainer","AITraderPanel","MarketSentiment","FactoryManager","AIControlCenter","Login","generateAITraders","generateTradingDecision","generateFactoryDecision","executeTrade","updateTraderPerformance","jsx","_jsx","jsxs","_jsxs","App","currentUser","setCurrentUser","gameState","setGameState","credits","profit","pnl","totalMargin","isSimulationPaused","commodities","setCommodities","id","name","icon","lastPrice","supply","buyPrice","sellPrice","buyQuantity","sellQuantity","unit","quantity","holdings","costBasis","priceHistory","time","price","aiPortfolio","setAiPortfolio","marketTrends","setMarketTrends","trend","color","tradeFeed","setTradeFeed","commodity","action","value","trader","isAI","notifications","setNotifications","aiTraders","setAiTraders","aiTradeFeed","setAiTradeFeed","showAITraders","setShowAITraders","showMarketSentiment","setShowMarketSentiment","showFactoryManager","setShowFactoryManager","showAIControlCenter","setShowAIControlCenter","factories","setFactories","handleQuantityChange","commodityId","newQuantity","prev","map","_objectSpread","Math","max","handleBuy","find","c","cost","newTrade","Date","toLocaleTimeString","hour12","hour","minute","substring","toUpperCase","slice","showNotification","type","title","message","concat","toLocaleString","handleSell","arguments","length","undefined","quantityToSell","revenue","handleLogin","user","handleLogout","existingUsers","JSON","parse","localStorage","getItem","updatedUsers","username","setItem","stringify","toggleSimulation","notificationData","newNotification","now","random","removeNotification","notificationId","filter","n","calculatePortfolioPnL","commoditiesList","totalPnL","totalPortfolioValue","forEach","currentValue","costValue","commodityPnL","interval","setInterval","allTradingDecisions","allFactoryDecisions","tradingDecisions","push","factoryDecisions","executedTrades","updatedTraders","decision","traderIndex","findIndex","t","traderId","commodityName","canExecute","traderHoldings","portfolio","aiTrade","traderName","strategy","emotionalState","console","log","selectedTrades","min","newTradeFeed","trade","factoryCost","capital","newFactory","level","productionUnit","productionQuantity","productionTime","timeRemaining","currentProduction","upgradeCost","upgradeMultiplier","costMultiplier","lastUpdate","owner","ownerName","lastFactoryDecision","clearInterval","handleTraderSelect","handleUpdateAITraders","handleBuildFactory","template","toString","substr","baseProduction","round","handleUpgradeFactory","factoryId","factory","f","targetSupply","targetPrice","basePrice","variation","newLastPrice","supplyChange","floor","momentumFactor","trendMomentum","recentPrices","priceDirection","trendStrength","abs","volatilityMultiplier","isSpike","supplyRatio","scarcityMultiplier","abundanceMultiplier","finalPrice","spread","newBuyPrice","newSellPrice","currentTime","newPriceHistory","splice","timeDiff","newTimeRemaining","prevTraders","prevCommodities","onLogin","className","children","onToggleSimulation","onLogout","onQuantityChange","onBuy","onSell","onClick","onTraderSelect","onClose","onBuildFactory","onUpgradeFactory","onUpdateTraders","onRemoveNotification"],"sources":["F:/Windsurf/Native/GTC 3/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport TradingGrid from './components/TradingGrid';\nimport Sidebar from './components/Sidebar';\nimport NotificationContainer from './components/NotificationContainer';\nimport AITraderPanel from './components/AITraderPanel';\nimport MarketSentiment from './components/MarketSentiment';\nimport FactoryManager from './components/FactoryManager';\nimport AIControlCenter from './components/AIControlCenter';\nimport Login from './components/Login';\nimport { \n  generateAITraders, \n  generateTradingDecision, \n  generateFactoryDecision,\n  executeTrade, \n  updateTraderPerformance \n} from './aiTraders';\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [gameState, setGameState] = useState({\n    credits: 100000,\n    profit: 0,\n    pnl: 0,\n    totalMargin: 0,\n    isSimulationPaused: false\n  });\n\n  const [commodities, setCommodities] = useState([\n    {\n      id: 'quantum-crystals',\n      name: 'Quantum Crystals',\n      icon: '💎',\n      lastPrice: 29,\n      supply: 30000,\n      buyPrice: 28,\n      sellPrice: 30,\n      buyQuantity: 1068,\n      sellQuantity: 1042,\n      unit: 'Tons',\n      quantity: 1,\n      holdings: 0,\n      costBasis: 0, // Track average purchase price\n      priceHistory: [\n        { time: '00:00', price: 25 }, { time: '02:00', price: 26 }, { time: '04:00', price: 27 }, \n        { time: '06:00', price: 25 }, { time: '08:00', price: 26 }, { time: '10:00', price: 28 },\n        { time: '12:00', price: 28 }, { time: '14:00', price: 29 }, { time: '16:00', price: 30 }, \n        { time: '18:00', price: 31 }, { time: '20:00', price: 29 }, { time: '22:00', price: 30 }\n      ]\n    },\n    {\n      id: 'dark-matter',\n      name: 'Dark Matter',\n      icon: '⚫',\n      lastPrice: 929,\n      supply: 30000,\n      buyPrice: 910,\n      sellPrice: 948,\n      buyQuantity: 800,\n      sellQuantity: 1200,\n      unit: 'Units',\n      quantity: 1,\n      holdings: 0,\n      costBasis: 0,\n      priceHistory: [\n        { time: '00:00', price: 850 }, { time: '02:00', price: 860 }, { time: '04:00', price: 880 }, \n        { time: '06:00', price: 870 }, { time: '08:00', price: 920 }, { time: '10:00', price: 935 },\n        { time: '12:00', price: 950 }, { time: '14:00', price: 945 }, { time: '16:00', price: 940 }, \n        { time: '18:00', price: 935 }, { time: '20:00', price: 929 }, { time: '22:00', price: 925 }\n      ]\n    },\n    {\n      id: 'neural-processors',\n      name: 'Neural Processors',\n      icon: '🧠',\n      lastPrice: 304,\n      supply: 30000,\n      buyPrice: 298,\n      sellPrice: 310,\n      buyQuantity: 1500,\n      sellQuantity: 1000,\n      unit: 'Units',\n      quantity: 1,\n      holdings: 0,\n      costBasis: 0,\n      priceHistory: [\n        { time: '00:00', price: 280 }, { time: '02:00', price: 285 }, { time: '04:00', price: 290 }, \n        { time: '06:00', price: 288 }, { time: '08:00', price: 300 }, { time: '10:00', price: 305 },\n        { time: '12:00', price: 310 }, { time: '14:00', price: 308 }, { time: '16:00', price: 305 }, \n        { time: '18:00', price: 302 }, { time: '20:00', price: 304 }, { time: '22:00', price: 306 }\n      ]\n    },\n    {\n      id: 'antimatter-cores',\n      name: 'Antimatter Cores',\n      icon: '⚛️',\n      lastPrice: 1347,\n      supply: 30000,\n      buyPrice: 1320,\n      sellPrice: 1374,\n      buyQuantity: 500,\n      sellQuantity: 800,\n      unit: 'Units',\n      quantity: 1,\n      holdings: 0,\n      costBasis: 0,\n      priceHistory: [\n        { time: '00:00', price: 1300 }, { time: '02:00', price: 1310 }, { time: '04:00', price: 1320 }, \n        { time: '06:00', price: 1315 }, { time: '08:00', price: 1350 }, { time: '10:00', price: 1365 },\n        { time: '12:00', price: 1380 }, { time: '14:00', price: 1375 }, { time: '16:00', price: 1360 }, \n        { time: '18:00', price: 1355 }, { time: '20:00', price: 1347 }, { time: '22:00', price: 1350 }\n      ]\n    },\n    {\n      id: 'plasma-cells',\n      name: 'Plasma Cells',\n      icon: '⚡',\n      lastPrice: 77,\n      supply: 30000,\n      buyPrice: 75,\n      sellPrice: 79,\n      buyQuantity: 2000,\n      sellQuantity: 1500,\n      unit: 'Units',\n      quantity: 1,\n      holdings: 0,\n      costBasis: 0,\n      priceHistory: [\n        { time: '00:00', price: 70 }, { time: '02:00', price: 71 }, { time: '04:00', price: 72 }, \n        { time: '06:00', price: 71 }, { time: '08:00', price: 75 }, { time: '10:00', price: 76 },\n        { time: '12:00', price: 78 }, { time: '14:00', price: 77 }, { time: '16:00', price: 76 }, \n        { time: '18:00', price: 75 }, { time: '20:00', price: 77 }, { time: '22:00', price: 78 }\n      ]\n    },\n    {\n      id: 'fusion-reactors',\n      name: 'Fusion Reactors',\n      icon: '🔋',\n      lastPrice: 5235,\n      supply: 30000,\n      buyPrice: 5130,\n      sellPrice: 5340,\n      buyQuantity: 100,\n      sellQuantity: 300,\n      unit: 'Units',\n      quantity: 1,\n      holdings: 0,\n      costBasis: 0,\n      priceHistory: [\n        { time: '00:00', price: 5000 }, { time: '02:00', price: 5050 }, { time: '04:00', price: 5100 }, \n        { time: '06:00', price: 5080 }, { time: '08:00', price: 5200 }, { time: '10:00', price: 5250 },\n        { time: '12:00', price: 5300 }, { time: '14:00', price: 5280 }, { time: '16:00', price: 5250 }, \n        { time: '18:00', price: 5240 }, { time: '20:00', price: 5235 }, { time: '22:00', price: 5240 }\n      ]\n    }\n  ]);\n\n  const [aiPortfolio, setAiPortfolio] = useState({\n    'Quantum Crystals': 12345,\n    'Dark Matter': 8901,\n    'Neural Processors': 15678,\n    'Plasma Cells': 4567\n  });\n\n  const [marketTrends, setMarketTrends] = useState([\n    { name: 'Quantum Crystals', trend: 'Bullish', color: '#00ff88' },\n    { name: 'Dark Matter', trend: 'Bearish', color: '#ff4444' },\n    { name: 'Neural Processors', trend: 'Bullish', color: '#00ff88' }\n  ]);\n\n  const [tradeFeed, setTradeFeed] = useState([\n    { time: '19:11', commodity: 'FREAC', action: 'SELL', quantity: 11, value: 56903, trader: 'AlphaBot1', isAI: true },\n    { time: '19:10', commodity: 'ACORE', action: 'BUY', quantity: 47, value: 61147, trader: 'You', isAI: false },\n    { time: '19:09', commodity: 'QCRYS', action: 'SELL', quantity: 73, value: 2190, trader: 'CyberTrader2', isAI: true },\n    { time: '19:08', commodity: 'DMATT', action: 'BUY', quantity: 25, value: 23225, trader: 'You', isAI: false },\n    { time: '19:07', commodity: 'NPROC', action: 'SELL', quantity: 15, value: 4560, trader: 'QuantumAI3', isAI: true }\n  ]);\n\n  const [notifications, setNotifications] = useState([]);\n  \n  // AI Trading System\n  const [aiTraders, setAiTraders] = useState([]);\n  const [aiTradeFeed, setAiTradeFeed] = useState([]);\n  const [showAITraders, setShowAITraders] = useState(false);\n  const [showMarketSentiment, setShowMarketSentiment] = useState(false);\n  const [showFactoryManager, setShowFactoryManager] = useState(false);\n  const [showAIControlCenter, setShowAIControlCenter] = useState(false);\n  const [factories, setFactories] = useState([]);\n\n  const handleQuantityChange = (commodityId, newQuantity) => {\n    setCommodities(prev => prev.map(commodity => \n      commodity.id === commodityId \n        ? { ...commodity, quantity: Math.max(1, newQuantity) }\n        : commodity\n    ));\n  };\n\n  const handleBuy = (commodityId) => {\n    const commodity = commodities.find(c => c.id === commodityId);\n    const cost = commodity.buyPrice * commodity.quantity;\n    \n    if (gameState.credits >= cost && commodity.supply >= commodity.quantity) {\n      setGameState(prev => ({\n        ...prev,\n        credits: prev.credits - cost,\n        totalMargin: prev.totalMargin + cost\n      }));\n      \n      // Update holdings, supply, and cost basis\n      setCommodities(prev => prev.map(c => \n        c.id === commodityId \n          ? { \n              ...c, \n              holdings: c.holdings + c.quantity,\n              supply: Math.max(0, c.supply - c.quantity),\n              costBasis: c.holdings === 0 ? c.buyPrice : \n                ((c.costBasis * c.holdings) + (c.buyPrice * c.quantity)) / (c.holdings + c.quantity)\n            }\n          : c\n      ));\n      \n      // Add to trade feed\n      const newTrade = {\n        time: new Date().toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' }),\n        commodity: commodity.name.substring(0, 5).toUpperCase(),\n        action: 'BUY',\n        quantity: commodity.quantity,\n        value: cost,\n        trader: 'You',\n        isAI: false\n      };\n      \n      setTradeFeed(prev => [newTrade, ...prev.slice(0, 14)]); // Keep last 15 trades total\n      \n      // Show success notification\n      showNotification({\n        type: 'buy',\n        title: 'Trade Successful!',\n        message: `Bought ${commodity.quantity} ${commodity.name} for ₹${cost.toLocaleString()}`\n      });\n    } else if (commodity.supply < commodity.quantity) {\n      // Show error notification for insufficient supply\n      showNotification({\n        type: 'error',\n        title: 'Insufficient Supply',\n        message: `Only ${commodity.supply} ${commodity.name} available, but trying to buy ${commodity.quantity}`\n      });\n    } else {\n      // Show error notification for insufficient credits\n      showNotification({\n        type: 'error',\n        title: 'Insufficient Credits',\n        message: `You need ₹${cost.toLocaleString()} but only have ₹${gameState.credits.toLocaleString()}`\n      });\n    }\n  };\n\n  const handleSell = (commodityId, sellQuantity = null) => {\n    const commodity = commodities.find(c => c.id === commodityId);\n    const quantityToSell = sellQuantity !== null ? sellQuantity : commodity.quantity;\n    const revenue = commodity.sellPrice * quantityToSell;\n    \n    // Check if user has enough holdings to sell\n    if (commodity.holdings >= quantityToSell) {\n    setGameState(prev => ({\n      ...prev,\n      credits: prev.credits + revenue,\n        profit: prev.profit + (revenue - commodity.costBasis * quantityToSell)\n      }));\n      \n      // Update holdings, supply, and cost basis\n      setCommodities(prev => prev.map(c => \n        c.id === commodityId \n          ? { \n              ...c, \n              holdings: c.holdings - quantityToSell,\n              supply: c.supply + quantityToSell,\n              costBasis: c.holdings - quantityToSell === 0 ? 0 : c.costBasis // Reset cost basis if all sold\n            }\n          : c\n      ));\n    \n    // Add to trade feed\n    const newTrade = {\n      time: new Date().toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' }),\n      commodity: commodity.name.substring(0, 5).toUpperCase(),\n      action: 'SELL',\n        quantity: quantityToSell,\n        value: revenue,\n        trader: 'You',\n        isAI: false\n      };\n      \n      setTradeFeed(prev => [newTrade, ...prev.slice(0, 14)]); // Keep last 15 trades total\n    \n    // Show success notification\n    showNotification({\n      type: 'sell',\n      title: 'Trade Successful!',\n        message: `Sold ${quantityToSell} ${commodity.name} for ₹${revenue.toLocaleString()}`\n      });\n    } else {\n      // Show error notification for insufficient holdings\n      showNotification({\n        type: 'error',\n        title: 'Insufficient Holdings',\n        message: `You only have ${commodity.holdings} ${commodity.name} but trying to sell ${quantityToSell}`\n      });\n    }\n  };\n\n  const handleLogin = (user) => {\n    setCurrentUser(user);\n    // Load user's game state if it exists\n    if (user.gameState) {\n      setGameState(prev => ({\n        ...prev,\n        ...user.gameState\n      }));\n    }\n  };\n\n  const handleLogout = () => {\n    // Save current game state to user data\n    if (currentUser) {\n      const existingUsers = JSON.parse(localStorage.getItem('gtc_users') || '[]');\n      const updatedUsers = existingUsers.map(user => {\n        if (user.username === currentUser.username) {\n          return {\n            ...user,\n            gameState: {\n              credits: gameState.credits,\n              profit: gameState.profit,\n              pnl: gameState.pnl,\n              totalMargin: gameState.totalMargin\n            }\n          };\n        }\n        return user;\n      });\n      localStorage.setItem('gtc_users', JSON.stringify(updatedUsers));\n    }\n    \n    setCurrentUser(null);\n    setGameState({\n      credits: 100000,\n      profit: 0,\n      pnl: 0,\n      totalMargin: 0,\n      isSimulationPaused: false\n    });\n  };\n\n  const toggleSimulation = () => {\n    setGameState(prev => ({\n      ...prev,\n      isSimulationPaused: !prev.isSimulationPaused\n    }));\n  };\n\n  const showNotification = (notificationData) => {\n    const newNotification = {\n      id: Date.now() + Math.random(),\n      ...notificationData\n    };\n    \n    setNotifications(prev => [...prev, newNotification]);\n  };\n\n  const removeNotification = (notificationId) => {\n    setNotifications(prev => prev.filter(n => n.id !== notificationId));\n  };\n\n  // Calculate live portfolio P&L\n  const calculatePortfolioPnL = (commoditiesList) => {\n    let totalPnL = 0;\n    let totalPortfolioValue = 0;\n    \n    commoditiesList.forEach(commodity => {\n      if (commodity.holdings > 0) {\n        const currentValue = commodity.holdings * commodity.lastPrice;\n        const costValue = commodity.holdings * commodity.costBasis;\n        const commodityPnL = currentValue - costValue;\n        \n        totalPnL += commodityPnL;\n        totalPortfolioValue += currentValue;\n      }\n    });\n    \n    return { totalPnL, totalPortfolioValue };\n  };\n\n  // Initialize AI traders\n  useEffect(() => {\n    if (aiTraders.length === 0) {\n      setAiTraders(generateAITraders());\n    }\n  }, [aiTraders.length]);\n\n  // Update live P&L whenever commodities change\n  useEffect(() => {\n    const { totalPnL, totalPortfolioValue } = calculatePortfolioPnL(commodities);\n    setGameState(prev => ({\n      ...prev,\n      pnl: totalPnL,\n      totalMargin: totalPortfolioValue\n    }));\n  }, [commodities]);\n\n  // AI Trading simulation - synchronized with price updates\n  useEffect(() => {\n    if (!gameState.isSimulationPaused && aiTraders.length > 0) {\n      const interval = setInterval(() => {\n        // Generate trading decisions for all AI traders\n        const allTradingDecisions = [];\n        const allFactoryDecisions = [];\n        \n        aiTraders.forEach(trader => {\n          // Generate trading decisions\n          const tradingDecisions = generateTradingDecision(trader, commodities, { commodities, marketTrends }, aiTradeFeed);\n          allTradingDecisions.push(...tradingDecisions);\n          \n          // Generate factory building decisions (less frequent)\n          const factoryDecisions = generateFactoryDecision(trader, commodities, { commodities, marketTrends }, aiTradeFeed);\n          allFactoryDecisions.push(...factoryDecisions);\n        });\n        \n        // Execute trades\n        if (allTradingDecisions.length > 0) {\n          const executedTrades = [];\n          const updatedTraders = [...aiTraders];\n          \n          allTradingDecisions.forEach(decision => {\n            const traderIndex = updatedTraders.findIndex(t => t.id === decision.traderId);\n            if (traderIndex !== -1) {\n              // Find the commodity being traded (use ID for more reliable matching)\n              const commodity = commodities.find(c => c.id === decision.commodityId || c.name === decision.commodityName);\n              \n              // Check if trade is valid (sufficient supply for buy, or sufficient holdings for sell)\n              let canExecute = false;\n              if (decision.action === 'BUY') {\n                canExecute = commodity && commodity.supply >= decision.quantity;\n              } else if (decision.action === 'SELL') {\n                // Check if AI trader has sufficient holdings to sell\n                const trader = updatedTraders[traderIndex];\n                const traderHoldings = trader.portfolio[commodity.id] || 0;\n                canExecute = traderHoldings >= decision.quantity;\n              }\n              \n              if (canExecute) {\n                // Execute the trade\n                updatedTraders[traderIndex] = executeTrade(updatedTraders[traderIndex], decision, commodities);\n                \n                // Update commodity supply\n                setCommodities(prev => prev.map(c => {\n                  if (c.id === decision.commodityId || c.name === decision.commodityName) {\n                    if (decision.action === 'BUY') {\n                      return { ...c, supply: Math.max(0, c.supply - decision.quantity) };\n                    } else if (decision.action === 'SELL') {\n                      return { ...c, supply: c.supply + decision.quantity };\n                    }\n                  }\n                  return c;\n                }));\n                \n                // Add to AI trade feed\n                const aiTrade = {\n                  time: new Date().toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' }),\n                  trader: decision.traderName,\n                  commodity: decision.commodityName.substring(0, 5).toUpperCase(),\n                  action: decision.action,\n                  quantity: decision.quantity,\n                  value: decision.quantity * decision.price,\n                  strategy: decision.strategy,\n                  emotionalState: decision.emotionalState\n                };\n                \n                executedTrades.push(aiTrade);\n                \n                // Debug: Log AI trade execution\n                console.log(`AI Trade: ${decision.traderName} ${decision.action} ${decision.quantity} ${decision.commodityName} at ₹${decision.price}. Supply changed from ${commodity.supply} to ${decision.action === 'BUY' ? commodity.supply - decision.quantity : commodity.supply + decision.quantity}`);\n              }\n            }\n          });\n          \n          // Update AI traders\n          setAiTraders(updatedTraders.map(trader => updateTraderPerformance(trader)));\n          \n          // Update AI trade feed\n          setAiTradeFeed(prev => [...executedTrades, ...prev.slice(0, 19)]); // Keep last 20 trades\n          \n          // Update main trade feed with AI trades\n          if (executedTrades.length > 0) {\n            // Include more AI trades in the main feed for better visibility\n            const selectedTrades = executedTrades.slice(0, Math.min(executedTrades.length, 8)); // Show up to 8 AI trades\n            const newTradeFeed = selectedTrades.map(trade => ({\n              time: trade.time,\n              commodity: trade.commodity,\n              action: trade.action,\n              quantity: trade.quantity,\n              value: trade.value,\n              trader: trade.trader, // Include trader name for identification\n              isAI: true // Mark as AI trade for styling\n            }));\n            \n            setTradeFeed(prev => [...newTradeFeed, ...prev.slice(0, 7)]); // Keep last 15 trades total\n          }\n        }\n        \n        // Execute factory building decisions\n        if (allFactoryDecisions.length > 0) {\n          const updatedTraders = [...aiTraders];\n          \n          allFactoryDecisions.forEach(decision => {\n            const traderIndex = updatedTraders.findIndex(t => t.id === decision.traderId);\n            if (traderIndex !== -1) {\n              const trader = updatedTraders[traderIndex];\n              \n              // Check if trader has enough capital for factory\n              const factoryCost = 75000; // Basic factory cost\n              if (trader.capital >= factoryCost) {\n                // Create factory for the AI trader\n                const newFactory = {\n                  id: `ai-factory-${trader.id}-${Date.now()}`,\n                  name: `${trader.name}'s ${decision.commodityName} Factory`,\n                  level: 1,\n                  commodityId: decision.commodityId,\n                  commodityName: decision.commodityName,\n                  productionUnit: 'Units',\n                                     productionQuantity: 50, // AI factories produce less\n                   productionTime: 20, // 20 seconds\n                   timeRemaining: 20,\n                  currentProduction: 0,\n                  upgradeCost: 150000,\n                  upgradeMultiplier: 1.5,\n                  costMultiplier: 1.3,\n                  lastUpdate: Date.now(),\n                  owner: trader.id,\n                  ownerName: trader.name\n                };\n                \n                // Add factory to trader's factories\n                updatedTraders[traderIndex] = {\n                  ...trader,\n                  factories: [...trader.factories, newFactory],\n                  capital: trader.capital - factoryCost,\n                  lastFactoryDecision: Date.now()\n                };\n                \n                // Add factory to global factories list\n                setFactories(prev => [...prev, newFactory]);\n                \n                // Show notification for AI factory building\n                showNotification({\n                  type: 'info',\n                  title: 'AI Factory Built!',\n                  message: `${trader.name} built a ${decision.commodityName} factory for ₹${factoryCost.toLocaleString()}`\n                });\n              }\n            }\n          });\n          \n          // Update AI traders\n          setAiTraders(updatedTraders);\n        }\n      }, 2000); // AI traders make decisions every 2 seconds to match price updates\n\n      return () => clearInterval(interval);\n    }\n  }, [gameState.isSimulationPaused, aiTraders, commodities, marketTrends, aiTradeFeed]);\n\n  const handleTraderSelect = (trader) => {\n    console.log('Selected trader:', trader);\n  };\n\n  // AI Control Center Functions\n  const handleUpdateAITraders = (updatedTraders) => {\n    setAiTraders(updatedTraders);\n    \n    // Show notification\n    showNotification({\n      type: 'info',\n      title: 'AI Settings Updated!',\n      message: `Updated settings for ${updatedTraders.length} AI traders`\n    });\n  };\n\n  // Factory Management Functions\n  const handleBuildFactory = (template, commodity) => {\n    const newFactory = {\n      id: `factory-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      name: `${template.name} - ${commodity.name}`,\n      level: 1,\n      commodityId: commodity.id,\n      commodityName: commodity.name,\n      productionUnit: commodity.unit,\n      productionQuantity: template.baseProduction,\n      productionTime: template.productionTime,\n      timeRemaining: template.productionTime,\n      currentProduction: 0,\n      upgradeCost: Math.round(template.cost * template.costMultiplier),\n      upgradeMultiplier: template.upgradeMultiplier,\n      costMultiplier: template.costMultiplier,\n      lastUpdate: Date.now(),\n      owner: 'player',\n      ownerName: 'Player'\n    };\n\n    setFactories(prev => [...prev, newFactory]);\n    \n    // Deduct credits\n    setGameState(prev => ({\n      ...prev,\n      credits: prev.credits - template.cost\n    }));\n\n    // Show success notification\n    showNotification({\n      type: 'success',\n      title: 'Factory Built!',\n      message: `Successfully built ${newFactory.name} for ₹${template.cost.toLocaleString()}`\n    });\n  };\n\n  const handleUpgradeFactory = (factoryId) => {\n    const factory = factories.find(f => f.id === factoryId);\n    if (!factory || gameState.credits < factory.upgradeCost) {\n      showNotification({\n        type: 'error',\n        title: 'Cannot Upgrade',\n        message: `You need ₹${factory?.upgradeCost.toLocaleString()} to upgrade this factory`\n      });\n      return;\n    }\n\n    setFactories(prev => prev.map(f => {\n      if (f.id === factoryId) {\n        return {\n          ...f,\n          level: f.level + 1,\n          productionQuantity: Math.round(f.productionQuantity * f.upgradeMultiplier),\n          upgradeCost: Math.round(f.upgradeCost * f.costMultiplier)\n        };\n      }\n      return f;\n    }));\n\n    // Deduct credits\n    setGameState(prev => ({\n      ...prev,\n      credits: prev.credits - factory.upgradeCost\n    }));\n\n    // Show success notification\n    showNotification({\n      type: 'success',\n      title: 'Factory Upgraded!',\n      message: `Upgraded ${factory.name} to Level ${factory.level + 1} for ₹${factory.upgradeCost.toLocaleString()}`\n    });\n  };\n\n\n\n  // Simulate price fluctuations based on supply only\n  useEffect(() => {\n    if (!gameState.isSimulationPaused) {\n      const interval = setInterval(() => {\n        setCommodities(prev => prev.map(commodity => {\n          // Calculate price based on supply with target price of 200 at supply of 30000\n          // Use inverse relationship: price = basePrice * (targetSupply / currentSupply)\n          const targetSupply = 30000; // Supply level where we want price to be around 200\n          const targetPrice = 200; // Target price at target supply\n          const basePrice = targetPrice * (targetSupply / commodity.supply);\n          \n          // Add much more variation for volatile market\n          const variation = (Math.random() - 0.5) * 0.6; // ±30% variation (was ±10%)\n          const newLastPrice = Math.max(1, Math.round(basePrice * (1 + variation)));\n          \n          // Add dramatic momentum based on supply changes\n          const supplyChange = commodity.supply - (commodity.supply + Math.floor((Math.random() - 0.5) * 200)); // Larger supply swings\n          const momentumFactor = supplyChange / 1000 * 0.4; // Much larger momentum effect (was 0.1)\n          \n          // Add price trend momentum (cascading effects)\n          let trendMomentum = 0;\n          if (commodity.priceHistory.length >= 3) {\n            const recentPrices = commodity.priceHistory.slice(-3);\n            const priceDirection = recentPrices[2].price - recentPrices[0].price;\n            const trendStrength = Math.abs(priceDirection) / recentPrices[0].price;\n            trendMomentum = (priceDirection > 0 ? 1 : -1) * trendStrength * 0.8; // Up to 80% trend continuation\n          }\n          \n          // Add extreme volatility events (5% chance of dramatic price movement)\n          let volatilityMultiplier = 1;\n          if (Math.random() < 0.05) { // 5% chance of extreme event\n            const isSpike = Math.random() < 0.5;\n            volatilityMultiplier = isSpike ? 2.5 : 0.4; // 2.5x spike or 0.4x crash\n          }\n          \n          // Add supply-based volatility - more dramatic when supply is low\n          const supplyRatio = commodity.supply / 30000; // Current supply vs starting supply\n          if (supplyRatio < 0.3) { // Supply below 30% of starting\n            const scarcityMultiplier = 1 + (0.3 - supplyRatio) * 2; // Up to 1.6x multiplier\n            volatilityMultiplier *= scarcityMultiplier;\n          } else if (supplyRatio > 2) { // Supply above 200% of starting\n            const abundanceMultiplier = 1 - (supplyRatio - 2) * 0.3; // Down to 0.7x multiplier\n            volatilityMultiplier *= abundanceMultiplier;\n          }\n          \n          // Final price with momentum, trend momentum, volatility events, and maximum cap\n          const finalPrice = Math.max(1, Math.min(10000, Math.round(newLastPrice * (1 + momentumFactor + trendMomentum) * volatilityMultiplier)));\n          \n          // Update buy/sell prices with spread\n          const spread = Math.floor(Math.random() * 3) + 1;\n          const newBuyPrice = Math.max(1, finalPrice - spread);\n          const newSellPrice = finalPrice + spread;\n          \n          // Update price history - keep last 50 data points for longer history\n          const currentTime = new Date().toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' });\n          const newPriceHistory = [...commodity.priceHistory, { time: currentTime, price: finalPrice }];\n          // Keep only the last 50 data points to prevent memory issues\n          if (newPriceHistory.length > 50) {\n            newPriceHistory.splice(0, newPriceHistory.length - 50);\n          }\n          \n          return {\n            ...commodity,\n            lastPrice: finalPrice,\n            buyPrice: newBuyPrice,\n            sellPrice: newSellPrice,\n            priceHistory: newPriceHistory\n          };\n        }));\n      }, 2000); // Game cycles every 2 seconds\n\n      return () => clearInterval(interval);\n    }\n  }, [gameState.isSimulationPaused]);\n\n  // Factory Production Timer\n  useEffect(() => {\n    if (!gameState.isSimulationPaused && factories.length > 0) {\n      const interval = setInterval(() => {\n        setFactories(prev => prev.map(factory => {\n          const now = Date.now();\n          const timeDiff = Math.floor((now - factory.lastUpdate) / 1000); // Convert to seconds\n          \n          if (factory.timeRemaining > 0) {\n            const newTimeRemaining = Math.max(0, factory.timeRemaining - timeDiff);\n            \n                         if (newTimeRemaining === 0 && factory.timeRemaining > 0) {\n               // Production cycle completed\n               if (factory.owner && factory.owner !== 'player') {\n                 // AI-owned factory - add to AI trader's holdings\n                 setAiTraders(prevTraders => prevTraders.map(trader => {\n                   if (trader.id === factory.owner) {\n                     return {\n                       ...trader,\n                       portfolio: {\n                         ...trader.portfolio,\n                         [factory.commodityId]: (trader.portfolio[factory.commodityId] || 0) + factory.productionQuantity\n                       }\n                     };\n                   }\n                   return trader;\n                 }));\n                 \n                 // Update commodity supply (AI production adds to market supply)\n                 setCommodities(prevCommodities => prevCommodities.map(commodity => {\n                   if (commodity.id === factory.commodityId) {\n                     return {\n                       ...commodity,\n                       supply: commodity.supply + factory.productionQuantity\n                     };\n                   }\n                   return commodity;\n                 }));\n                 \n                 // Show notification for AI production\n                 showNotification({\n                   type: 'info',\n                   title: 'AI Production Complete!',\n                   message: `${factory.ownerName}'s factory produced ${factory.productionQuantity} ${factory.commodityName}`\n                 });\n               } else {\n                 // Player-owned factory - add to player holdings\n                 setCommodities(prevCommodities => prevCommodities.map(commodity => {\n                   if (commodity.id === factory.commodityId) {\n                     return {\n                       ...commodity,\n                       holdings: commodity.holdings + factory.productionQuantity\n                     };\n                   }\n                   return commodity;\n                 }));\n                 \n                 // Show notification for player production\n                 showNotification({\n                   type: 'success',\n                   title: 'Production Complete!',\n                   message: `${factory.name} produced ${factory.productionQuantity} ${factory.commodityName} - automatically added to holdings!`\n                 });\n               }\n              \n              // Reset factory for next cycle\n              return {\n                ...factory,\n                timeRemaining: factory.productionTime,\n                currentProduction: 0,\n                lastUpdate: now\n              };\n            } else {\n              // Still producing\n              return {\n                ...factory,\n                timeRemaining: newTimeRemaining,\n                lastUpdate: now\n              };\n            }\n          }\n          \n          return factory;\n        }));\n      }, 2000); // Update every 2 seconds\n\n      return () => clearInterval(interval);\n    }\n  }, [gameState.isSimulationPaused, factories.length]);\n\n  // Show login screen if no user is logged in\n  if (!currentUser) {\n    return <Login onLogin={handleLogin} />;\n  }\n\n  return (\n    <div className=\"App\">\n      <Header \n        gameState={gameState} \n        onToggleSimulation={toggleSimulation}\n        currentUser={currentUser}\n        onLogout={handleLogout}\n      />\n      <div className=\"main-content\">\n        <TradingGrid \n          commodities={commodities}\n          onQuantityChange={handleQuantityChange}\n          onBuy={handleBuy}\n          onSell={handleSell}\n          factories={factories}\n        />\n        <div className=\"sidebar-container\">\n        <Sidebar \n          aiPortfolio={aiPortfolio}\n          marketTrends={marketTrends}\n          tradeFeed={tradeFeed}\n            aiTradeFeed={aiTradeFeed}\n          />\n          \n          {/* AI Trading Controls */}\n          <div className=\"ai-controls\">\n            <button \n              className={`ai-control-btn ${showAITraders ? 'active' : ''}`}\n              onClick={() => setShowAITraders(!showAITraders)}\n            >\n              🤖 AI Traders ({aiTraders.length})\n            </button>\n            <button \n              className={`ai-control-btn ${showMarketSentiment ? 'active' : ''}`}\n              onClick={() => setShowMarketSentiment(!showMarketSentiment)}\n            >\n              📊 Market Sentiment\n            </button>\n            <button \n              className={`ai-control-btn ${showFactoryManager ? 'active' : ''}`}\n              onClick={() => setShowFactoryManager(!showFactoryManager)}\n            >\n              🏭 Factories ({factories.length})\n            </button>\n            <button \n              className={`ai-control-btn ${showAIControlCenter ? 'active' : ''}`}\n              onClick={() => setShowAIControlCenter(!showAIControlCenter)}\n            >\n              ⚙️ AI Controls\n            </button>\n          </div>\n          \n          {/* AI Trader Panel */}\n          {showAITraders && (\n            <div className=\"ai-panel-overlay\">\n              <div className=\"ai-panel-container\">\n                <button \n                  className=\"ai-panel-close-btn\"\n                  onClick={() => setShowAITraders(false)}\n                >\n                  ×\n                </button>\n                <AITraderPanel \n                  aiTraders={aiTraders}\n                  onTraderSelect={handleTraderSelect}\n                />\n              </div>\n            </div>\n          )}\n          \n          {/* Market Sentiment Panel */}\n          {showMarketSentiment && (\n            <div className=\"ai-panel-overlay\">\n              <MarketSentiment \n                aiTraders={aiTraders}\n                commodities={commodities}\n                onClose={() => setShowMarketSentiment(false)}\n              />\n            </div>\n          )}\n          \n          {/* Factory Manager Panel */}\n          {showFactoryManager && (\n            <FactoryManager\n              factories={factories}\n              commodities={commodities}\n              credits={gameState.credits}\n              onBuildFactory={handleBuildFactory}\n              onUpgradeFactory={handleUpgradeFactory}\n              onClose={() => setShowFactoryManager(false)}\n            />\n          )}\n          \n          {/* AI Control Center */}\n          {showAIControlCenter && (\n            <AIControlCenter\n              aiTraders={aiTraders}\n              onUpdateTraders={handleUpdateAITraders}\n              onClose={() => setShowAIControlCenter(false)}\n            />\n          )}\n        </div>\n      </div>\n      <NotificationContainer \n        notifications={notifications}\n        onRemoveNotification={removeNotification}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"6GAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,WAAW,CAClB,MAAO,CAAAC,MAAM,KAAM,qBAAqB,CACxC,MAAO,CAAAC,WAAW,KAAM,0BAA0B,CAClD,MAAO,CAAAC,OAAO,KAAM,sBAAsB,CAC1C,MAAO,CAAAC,qBAAqB,KAAM,oCAAoC,CACtE,MAAO,CAAAC,aAAa,KAAM,4BAA4B,CACtD,MAAO,CAAAC,eAAe,KAAM,8BAA8B,CAC1D,MAAO,CAAAC,cAAc,KAAM,6BAA6B,CACxD,MAAO,CAAAC,eAAe,KAAM,8BAA8B,CAC1D,MAAO,CAAAC,KAAK,KAAM,oBAAoB,CACtC,OACEC,iBAAiB,CACjBC,uBAAuB,CACvBC,uBAAuB,CACvBC,YAAY,CACZC,uBAAuB,KAClB,aAAa,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAErB,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGtB,QAAQ,CAAC,IAAI,CAAC,CACpD,KAAM,CAACuB,SAAS,CAAEC,YAAY,CAAC,CAAGxB,QAAQ,CAAC,CACzCyB,OAAO,CAAE,MAAM,CACfC,MAAM,CAAE,CAAC,CACTC,GAAG,CAAE,CAAC,CACNC,WAAW,CAAE,CAAC,CACdC,kBAAkB,CAAE,KACtB,CAAC,CAAC,CAEF,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAG/B,QAAQ,CAAC,CAC7C,CACEgC,EAAE,CAAE,kBAAkB,CACtBC,IAAI,CAAE,kBAAkB,CACxBC,IAAI,CAAE,IAAI,CACVC,SAAS,CAAE,EAAE,CACbC,MAAM,CAAE,KAAK,CACbC,QAAQ,CAAE,EAAE,CACZC,SAAS,CAAE,EAAE,CACbC,WAAW,CAAE,IAAI,CACjBC,YAAY,CAAE,IAAI,CAClBC,IAAI,CAAE,MAAM,CACZC,QAAQ,CAAE,CAAC,CACXC,QAAQ,CAAE,CAAC,CACXC,SAAS,CAAE,CAAC,CAAE;AACdC,YAAY,CAAE,CACZ,CAAEC,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CACxF,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CACxF,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CACxF,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CAE5F,CAAC,CACD,CACEf,EAAE,CAAE,aAAa,CACjBC,IAAI,CAAE,aAAa,CACnBC,IAAI,CAAE,GAAG,CACTC,SAAS,CAAE,GAAG,CACdC,MAAM,CAAE,KAAK,CACbC,QAAQ,CAAE,GAAG,CACbC,SAAS,CAAE,GAAG,CACdC,WAAW,CAAE,GAAG,CAChBC,YAAY,CAAE,IAAI,CAClBC,IAAI,CAAE,OAAO,CACbC,QAAQ,CAAE,CAAC,CACXC,QAAQ,CAAE,CAAC,CACXC,SAAS,CAAE,CAAC,CACZC,YAAY,CAAE,CACZ,CAAEC,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAC3F,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAC3F,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAC3F,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAE/F,CAAC,CACD,CACEf,EAAE,CAAE,mBAAmB,CACvBC,IAAI,CAAE,mBAAmB,CACzBC,IAAI,CAAE,IAAI,CACVC,SAAS,CAAE,GAAG,CACdC,MAAM,CAAE,KAAK,CACbC,QAAQ,CAAE,GAAG,CACbC,SAAS,CAAE,GAAG,CACdC,WAAW,CAAE,IAAI,CACjBC,YAAY,CAAE,IAAI,CAClBC,IAAI,CAAE,OAAO,CACbC,QAAQ,CAAE,CAAC,CACXC,QAAQ,CAAE,CAAC,CACXC,SAAS,CAAE,CAAC,CACZC,YAAY,CAAE,CACZ,CAAEC,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAC3F,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAC3F,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAC3F,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,GAAI,CAAC,CAE/F,CAAC,CACD,CACEf,EAAE,CAAE,kBAAkB,CACtBC,IAAI,CAAE,kBAAkB,CACxBC,IAAI,CAAE,IAAI,CACVC,SAAS,CAAE,IAAI,CACfC,MAAM,CAAE,KAAK,CACbC,QAAQ,CAAE,IAAI,CACdC,SAAS,CAAE,IAAI,CACfC,WAAW,CAAE,GAAG,CAChBC,YAAY,CAAE,GAAG,CACjBC,IAAI,CAAE,OAAO,CACbC,QAAQ,CAAE,CAAC,CACXC,QAAQ,CAAE,CAAC,CACXC,SAAS,CAAE,CAAC,CACZC,YAAY,CAAE,CACZ,CAAEC,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAC9F,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAC9F,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAC9F,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAElG,CAAC,CACD,CACEf,EAAE,CAAE,cAAc,CAClBC,IAAI,CAAE,cAAc,CACpBC,IAAI,CAAE,GAAG,CACTC,SAAS,CAAE,EAAE,CACbC,MAAM,CAAE,KAAK,CACbC,QAAQ,CAAE,EAAE,CACZC,SAAS,CAAE,EAAE,CACbC,WAAW,CAAE,IAAI,CACjBC,YAAY,CAAE,IAAI,CAClBC,IAAI,CAAE,OAAO,CACbC,QAAQ,CAAE,CAAC,CACXC,QAAQ,CAAE,CAAC,CACXC,SAAS,CAAE,CAAC,CACZC,YAAY,CAAE,CACZ,CAAEC,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CACxF,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CACxF,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CACxF,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,EAAG,CAAC,CAE5F,CAAC,CACD,CACEf,EAAE,CAAE,iBAAiB,CACrBC,IAAI,CAAE,iBAAiB,CACvBC,IAAI,CAAE,IAAI,CACVC,SAAS,CAAE,IAAI,CACfC,MAAM,CAAE,KAAK,CACbC,QAAQ,CAAE,IAAI,CACdC,SAAS,CAAE,IAAI,CACfC,WAAW,CAAE,GAAG,CAChBC,YAAY,CAAE,GAAG,CACjBC,IAAI,CAAE,OAAO,CACbC,QAAQ,CAAE,CAAC,CACXC,QAAQ,CAAE,CAAC,CACXC,SAAS,CAAE,CAAC,CACZC,YAAY,CAAE,CACZ,CAAEC,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAC9F,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAC9F,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAC9F,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAE,CAAED,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,IAAK,CAAC,CAElG,CAAC,CACF,CAAC,CAEF,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGjD,QAAQ,CAAC,CAC7C,kBAAkB,CAAE,KAAK,CACzB,aAAa,CAAE,IAAI,CACnB,mBAAmB,CAAE,KAAK,CAC1B,cAAc,CAAE,IAClB,CAAC,CAAC,CAEF,KAAM,CAACkD,YAAY,CAAEC,eAAe,CAAC,CAAGnD,QAAQ,CAAC,CAC/C,CAAEiC,IAAI,CAAE,kBAAkB,CAAEmB,KAAK,CAAE,SAAS,CAAEC,KAAK,CAAE,SAAU,CAAC,CAChE,CAAEpB,IAAI,CAAE,aAAa,CAAEmB,KAAK,CAAE,SAAS,CAAEC,KAAK,CAAE,SAAU,CAAC,CAC3D,CAAEpB,IAAI,CAAE,mBAAmB,CAAEmB,KAAK,CAAE,SAAS,CAAEC,KAAK,CAAE,SAAU,CAAC,CAClE,CAAC,CAEF,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGvD,QAAQ,CAAC,CACzC,CAAE8C,IAAI,CAAE,OAAO,CAAEU,SAAS,CAAE,OAAO,CAAEC,MAAM,CAAE,MAAM,CAAEf,QAAQ,CAAE,EAAE,CAAEgB,KAAK,CAAE,KAAK,CAAEC,MAAM,CAAE,WAAW,CAAEC,IAAI,CAAE,IAAK,CAAC,CAClH,CAAEd,IAAI,CAAE,OAAO,CAAEU,SAAS,CAAE,OAAO,CAAEC,MAAM,CAAE,KAAK,CAAEf,QAAQ,CAAE,EAAE,CAAEgB,KAAK,CAAE,KAAK,CAAEC,MAAM,CAAE,KAAK,CAAEC,IAAI,CAAE,KAAM,CAAC,CAC5G,CAAEd,IAAI,CAAE,OAAO,CAAEU,SAAS,CAAE,OAAO,CAAEC,MAAM,CAAE,MAAM,CAAEf,QAAQ,CAAE,EAAE,CAAEgB,KAAK,CAAE,IAAI,CAAEC,MAAM,CAAE,cAAc,CAAEC,IAAI,CAAE,IAAK,CAAC,CACpH,CAAEd,IAAI,CAAE,OAAO,CAAEU,SAAS,CAAE,OAAO,CAAEC,MAAM,CAAE,KAAK,CAAEf,QAAQ,CAAE,EAAE,CAAEgB,KAAK,CAAE,KAAK,CAAEC,MAAM,CAAE,KAAK,CAAEC,IAAI,CAAE,KAAM,CAAC,CAC5G,CAAEd,IAAI,CAAE,OAAO,CAAEU,SAAS,CAAE,OAAO,CAAEC,MAAM,CAAE,MAAM,CAAEf,QAAQ,CAAE,EAAE,CAAEgB,KAAK,CAAE,IAAI,CAAEC,MAAM,CAAE,YAAY,CAAEC,IAAI,CAAE,IAAK,CAAC,CACnH,CAAC,CAEF,KAAM,CAACC,aAAa,CAAEC,gBAAgB,CAAC,CAAG9D,QAAQ,CAAC,EAAE,CAAC,CAEtD;AACA,KAAM,CAAC+D,SAAS,CAAEC,YAAY,CAAC,CAAGhE,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAACiE,WAAW,CAAEC,cAAc,CAAC,CAAGlE,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACmE,aAAa,CAAEC,gBAAgB,CAAC,CAAGpE,QAAQ,CAAC,KAAK,CAAC,CACzD,KAAM,CAACqE,mBAAmB,CAAEC,sBAAsB,CAAC,CAAGtE,QAAQ,CAAC,KAAK,CAAC,CACrE,KAAM,CAACuE,kBAAkB,CAAEC,qBAAqB,CAAC,CAAGxE,QAAQ,CAAC,KAAK,CAAC,CACnE,KAAM,CAACyE,mBAAmB,CAAEC,sBAAsB,CAAC,CAAG1E,QAAQ,CAAC,KAAK,CAAC,CACrE,KAAM,CAAC2E,SAAS,CAAEC,YAAY,CAAC,CAAG5E,QAAQ,CAAC,EAAE,CAAC,CAE9C,KAAM,CAAA6E,oBAAoB,CAAGA,CAACC,WAAW,CAAEC,WAAW,GAAK,CACzDhD,cAAc,CAACiD,IAAI,EAAIA,IAAI,CAACC,GAAG,CAACzB,SAAS,EACvCA,SAAS,CAACxB,EAAE,GAAK8C,WAAW,CAAAI,aAAA,CAAAA,aAAA,IACnB1B,SAAS,MAAEd,QAAQ,CAAEyC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEL,WAAW,CAAC,GAClDvB,SACN,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAA6B,SAAS,CAAIP,WAAW,EAAK,CACjC,KAAM,CAAAtB,SAAS,CAAG1B,WAAW,CAACwD,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACvD,EAAE,GAAK8C,WAAW,CAAC,CAC7D,KAAM,CAAAU,IAAI,CAAGhC,SAAS,CAACnB,QAAQ,CAAGmB,SAAS,CAACd,QAAQ,CAEpD,GAAInB,SAAS,CAACE,OAAO,EAAI+D,IAAI,EAAIhC,SAAS,CAACpB,MAAM,EAAIoB,SAAS,CAACd,QAAQ,CAAE,CACvElB,YAAY,CAACwD,IAAI,EAAAE,aAAA,CAAAA,aAAA,IACZF,IAAI,MACPvD,OAAO,CAAEuD,IAAI,CAACvD,OAAO,CAAG+D,IAAI,CAC5B5D,WAAW,CAAEoD,IAAI,CAACpD,WAAW,CAAG4D,IAAI,EACpC,CAAC,CAEH;AACAzD,cAAc,CAACiD,IAAI,EAAIA,IAAI,CAACC,GAAG,CAACM,CAAC,EAC/BA,CAAC,CAACvD,EAAE,GAAK8C,WAAW,CAAAI,aAAA,CAAAA,aAAA,IAEXK,CAAC,MACJ5C,QAAQ,CAAE4C,CAAC,CAAC5C,QAAQ,CAAG4C,CAAC,CAAC7C,QAAQ,CACjCN,MAAM,CAAE+C,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEG,CAAC,CAACnD,MAAM,CAAGmD,CAAC,CAAC7C,QAAQ,CAAC,CAC1CE,SAAS,CAAE2C,CAAC,CAAC5C,QAAQ,GAAK,CAAC,CAAG4C,CAAC,CAAClD,QAAQ,CACtC,CAAEkD,CAAC,CAAC3C,SAAS,CAAG2C,CAAC,CAAC5C,QAAQ,CAAK4C,CAAC,CAAClD,QAAQ,CAAGkD,CAAC,CAAC7C,QAAS,GAAK6C,CAAC,CAAC5C,QAAQ,CAAG4C,CAAC,CAAC7C,QAAQ,CAAC,GAExF6C,CACN,CAAC,CAAC,CAEF;AACA,KAAM,CAAAE,QAAQ,CAAG,CACf3C,IAAI,CAAE,GAAI,CAAA4C,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,OAAO,CAAE,CAAEC,MAAM,CAAE,KAAK,CAAEC,IAAI,CAAE,SAAS,CAAEC,MAAM,CAAE,SAAU,CAAC,CAAC,CACnGtC,SAAS,CAAEA,SAAS,CAACvB,IAAI,CAAC8D,SAAS,CAAC,CAAC,CAAE,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACvDvC,MAAM,CAAE,KAAK,CACbf,QAAQ,CAAEc,SAAS,CAACd,QAAQ,CAC5BgB,KAAK,CAAE8B,IAAI,CACX7B,MAAM,CAAE,KAAK,CACbC,IAAI,CAAE,KACR,CAAC,CAEDL,YAAY,CAACyB,IAAI,EAAI,CAACS,QAAQ,CAAE,GAAGT,IAAI,CAACiB,KAAK,CAAC,CAAC,CAAE,EAAE,CAAC,CAAC,CAAC,CAAE;AAExD;AACAC,gBAAgB,CAAC,CACfC,IAAI,CAAE,KAAK,CACXC,KAAK,CAAE,mBAAmB,CAC1BC,OAAO,WAAAC,MAAA,CAAY9C,SAAS,CAACd,QAAQ,MAAA4D,MAAA,CAAI9C,SAAS,CAACvB,IAAI,gBAAAqE,MAAA,CAASd,IAAI,CAACe,cAAc,CAAC,CAAC,CACvF,CAAC,CAAC,CACJ,CAAC,IAAM,IAAI/C,SAAS,CAACpB,MAAM,CAAGoB,SAAS,CAACd,QAAQ,CAAE,CAChD;AACAwD,gBAAgB,CAAC,CACfC,IAAI,CAAE,OAAO,CACbC,KAAK,CAAE,qBAAqB,CAC5BC,OAAO,SAAAC,MAAA,CAAU9C,SAAS,CAACpB,MAAM,MAAAkE,MAAA,CAAI9C,SAAS,CAACvB,IAAI,mCAAAqE,MAAA,CAAiC9C,SAAS,CAACd,QAAQ,CACxG,CAAC,CAAC,CACJ,CAAC,IAAM,CACL;AACAwD,gBAAgB,CAAC,CACfC,IAAI,CAAE,OAAO,CACbC,KAAK,CAAE,sBAAsB,CAC7BC,OAAO,mBAAAC,MAAA,CAAed,IAAI,CAACe,cAAc,CAAC,CAAC,0BAAAD,MAAA,CAAmB/E,SAAS,CAACE,OAAO,CAAC8E,cAAc,CAAC,CAAC,CAClG,CAAC,CAAC,CACJ,CACF,CAAC,CAED,KAAM,CAAAC,UAAU,CAAG,QAAAA,CAAC1B,WAAW,CAA0B,IAAxB,CAAAtC,YAAY,CAAAiE,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CAClD,KAAM,CAAAjD,SAAS,CAAG1B,WAAW,CAACwD,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACvD,EAAE,GAAK8C,WAAW,CAAC,CAC7D,KAAM,CAAA8B,cAAc,CAAGpE,YAAY,GAAK,IAAI,CAAGA,YAAY,CAAGgB,SAAS,CAACd,QAAQ,CAChF,KAAM,CAAAmE,OAAO,CAAGrD,SAAS,CAAClB,SAAS,CAAGsE,cAAc,CAEpD;AACA,GAAIpD,SAAS,CAACb,QAAQ,EAAIiE,cAAc,CAAE,CAC1CpF,YAAY,CAACwD,IAAI,EAAAE,aAAA,CAAAA,aAAA,IACZF,IAAI,MACPvD,OAAO,CAAEuD,IAAI,CAACvD,OAAO,CAAGoF,OAAO,CAC7BnF,MAAM,CAAEsD,IAAI,CAACtD,MAAM,EAAImF,OAAO,CAAGrD,SAAS,CAACZ,SAAS,CAAGgE,cAAc,CAAC,EACtE,CAAC,CAEH;AACA7E,cAAc,CAACiD,IAAI,EAAIA,IAAI,CAACC,GAAG,CAACM,CAAC,EAC/BA,CAAC,CAACvD,EAAE,GAAK8C,WAAW,CAAAI,aAAA,CAAAA,aAAA,IAEXK,CAAC,MACJ5C,QAAQ,CAAE4C,CAAC,CAAC5C,QAAQ,CAAGiE,cAAc,CACrCxE,MAAM,CAAEmD,CAAC,CAACnD,MAAM,CAAGwE,cAAc,CACjChE,SAAS,CAAE2C,CAAC,CAAC5C,QAAQ,CAAGiE,cAAc,GAAK,CAAC,CAAG,CAAC,CAAGrB,CAAC,CAAC3C,SAAU;AAAA,GAEjE2C,CACN,CAAC,CAAC,CAEJ;AACA,KAAM,CAAAE,QAAQ,CAAG,CACf3C,IAAI,CAAE,GAAI,CAAA4C,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,OAAO,CAAE,CAAEC,MAAM,CAAE,KAAK,CAAEC,IAAI,CAAE,SAAS,CAAEC,MAAM,CAAE,SAAU,CAAC,CAAC,CACnGtC,SAAS,CAAEA,SAAS,CAACvB,IAAI,CAAC8D,SAAS,CAAC,CAAC,CAAE,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACvDvC,MAAM,CAAE,MAAM,CACZf,QAAQ,CAAEkE,cAAc,CACxBlD,KAAK,CAAEmD,OAAO,CACdlD,MAAM,CAAE,KAAK,CACbC,IAAI,CAAE,KACR,CAAC,CAEDL,YAAY,CAACyB,IAAI,EAAI,CAACS,QAAQ,CAAE,GAAGT,IAAI,CAACiB,KAAK,CAAC,CAAC,CAAE,EAAE,CAAC,CAAC,CAAC,CAAE;AAE1D;AACAC,gBAAgB,CAAC,CACfC,IAAI,CAAE,MAAM,CACZC,KAAK,CAAE,mBAAmB,CACxBC,OAAO,SAAAC,MAAA,CAAUM,cAAc,MAAAN,MAAA,CAAI9C,SAAS,CAACvB,IAAI,gBAAAqE,MAAA,CAASO,OAAO,CAACN,cAAc,CAAC,CAAC,CACpF,CAAC,CAAC,CACJ,CAAC,IAAM,CACL;AACAL,gBAAgB,CAAC,CACfC,IAAI,CAAE,OAAO,CACbC,KAAK,CAAE,uBAAuB,CAC9BC,OAAO,kBAAAC,MAAA,CAAmB9C,SAAS,CAACb,QAAQ,MAAA2D,MAAA,CAAI9C,SAAS,CAACvB,IAAI,yBAAAqE,MAAA,CAAuBM,cAAc,CACrG,CAAC,CAAC,CACJ,CACF,CAAC,CAED,KAAM,CAAAE,WAAW,CAAIC,IAAI,EAAK,CAC5BzF,cAAc,CAACyF,IAAI,CAAC,CACpB;AACA,GAAIA,IAAI,CAACxF,SAAS,CAAE,CAClBC,YAAY,CAACwD,IAAI,EAAAE,aAAA,CAAAA,aAAA,IACZF,IAAI,EACJ+B,IAAI,CAACxF,SAAS,CACjB,CAAC,CACL,CACF,CAAC,CAED,KAAM,CAAAyF,YAAY,CAAGA,CAAA,GAAM,CACzB;AACA,GAAI3F,WAAW,CAAE,CACf,KAAM,CAAA4F,aAAa,CAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,EAAI,IAAI,CAAC,CAC3E,KAAM,CAAAC,YAAY,CAAGL,aAAa,CAAChC,GAAG,CAAC8B,IAAI,EAAI,CAC7C,GAAIA,IAAI,CAACQ,QAAQ,GAAKlG,WAAW,CAACkG,QAAQ,CAAE,CAC1C,OAAArC,aAAA,CAAAA,aAAA,IACK6B,IAAI,MACPxF,SAAS,CAAE,CACTE,OAAO,CAAEF,SAAS,CAACE,OAAO,CAC1BC,MAAM,CAAEH,SAAS,CAACG,MAAM,CACxBC,GAAG,CAAEJ,SAAS,CAACI,GAAG,CAClBC,WAAW,CAAEL,SAAS,CAACK,WACzB,CAAC,GAEL,CACA,MAAO,CAAAmF,IAAI,CACb,CAAC,CAAC,CACFK,YAAY,CAACI,OAAO,CAAC,WAAW,CAAEN,IAAI,CAACO,SAAS,CAACH,YAAY,CAAC,CAAC,CACjE,CAEAhG,cAAc,CAAC,IAAI,CAAC,CACpBE,YAAY,CAAC,CACXC,OAAO,CAAE,MAAM,CACfC,MAAM,CAAE,CAAC,CACTC,GAAG,CAAE,CAAC,CACNC,WAAW,CAAE,CAAC,CACdC,kBAAkB,CAAE,KACtB,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAA6F,gBAAgB,CAAGA,CAAA,GAAM,CAC7BlG,YAAY,CAACwD,IAAI,EAAAE,aAAA,CAAAA,aAAA,IACZF,IAAI,MACPnD,kBAAkB,CAAE,CAACmD,IAAI,CAACnD,kBAAkB,EAC5C,CAAC,CACL,CAAC,CAED,KAAM,CAAAqE,gBAAgB,CAAIyB,gBAAgB,EAAK,CAC7C,KAAM,CAAAC,eAAe,CAAA1C,aAAA,EACnBlD,EAAE,CAAE0D,IAAI,CAACmC,GAAG,CAAC,CAAC,CAAG1C,IAAI,CAAC2C,MAAM,CAAC,CAAC,EAC3BH,gBAAgB,CACpB,CAED7D,gBAAgB,CAACkB,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAE4C,eAAe,CAAC,CAAC,CACtD,CAAC,CAED,KAAM,CAAAG,kBAAkB,CAAIC,cAAc,EAAK,CAC7ClE,gBAAgB,CAACkB,IAAI,EAAIA,IAAI,CAACiD,MAAM,CAACC,CAAC,EAAIA,CAAC,CAAClG,EAAE,GAAKgG,cAAc,CAAC,CAAC,CACrE,CAAC,CAED;AACA,KAAM,CAAAG,qBAAqB,CAAIC,eAAe,EAAK,CACjD,GAAI,CAAAC,QAAQ,CAAG,CAAC,CAChB,GAAI,CAAAC,mBAAmB,CAAG,CAAC,CAE3BF,eAAe,CAACG,OAAO,CAAC/E,SAAS,EAAI,CACnC,GAAIA,SAAS,CAACb,QAAQ,CAAG,CAAC,CAAE,CAC1B,KAAM,CAAA6F,YAAY,CAAGhF,SAAS,CAACb,QAAQ,CAAGa,SAAS,CAACrB,SAAS,CAC7D,KAAM,CAAAsG,SAAS,CAAGjF,SAAS,CAACb,QAAQ,CAAGa,SAAS,CAACZ,SAAS,CAC1D,KAAM,CAAA8F,YAAY,CAAGF,YAAY,CAAGC,SAAS,CAE7CJ,QAAQ,EAAIK,YAAY,CACxBJ,mBAAmB,EAAIE,YAAY,CACrC,CACF,CAAC,CAAC,CAEF,MAAO,CAAEH,QAAQ,CAAEC,mBAAoB,CAAC,CAC1C,CAAC,CAED;AACArI,SAAS,CAAC,IAAM,CACd,GAAI8D,SAAS,CAAC2C,MAAM,GAAK,CAAC,CAAE,CAC1B1C,YAAY,CAACrD,iBAAiB,CAAC,CAAC,CAAC,CACnC,CACF,CAAC,CAAE,CAACoD,SAAS,CAAC2C,MAAM,CAAC,CAAC,CAEtB;AACAzG,SAAS,CAAC,IAAM,CACd,KAAM,CAAEoI,QAAQ,CAAEC,mBAAoB,CAAC,CAAGH,qBAAqB,CAACrG,WAAW,CAAC,CAC5EN,YAAY,CAACwD,IAAI,EAAAE,aAAA,CAAAA,aAAA,IACZF,IAAI,MACPrD,GAAG,CAAE0G,QAAQ,CACbzG,WAAW,CAAE0G,mBAAmB,EAChC,CAAC,CACL,CAAC,CAAE,CAACxG,WAAW,CAAC,CAAC,CAEjB;AACA7B,SAAS,CAAC,IAAM,CACd,GAAI,CAACsB,SAAS,CAACM,kBAAkB,EAAIkC,SAAS,CAAC2C,MAAM,CAAG,CAAC,CAAE,CACzD,KAAM,CAAAiC,QAAQ,CAAGC,WAAW,CAAC,IAAM,CACjC;AACA,KAAM,CAAAC,mBAAmB,CAAG,EAAE,CAC9B,KAAM,CAAAC,mBAAmB,CAAG,EAAE,CAE9B/E,SAAS,CAACwE,OAAO,CAAC5E,MAAM,EAAI,CAC1B;AACA,KAAM,CAAAoF,gBAAgB,CAAGnI,uBAAuB,CAAC+C,MAAM,CAAE7B,WAAW,CAAE,CAAEA,WAAW,CAAEoB,YAAa,CAAC,CAAEe,WAAW,CAAC,CACjH4E,mBAAmB,CAACG,IAAI,CAAC,GAAGD,gBAAgB,CAAC,CAE7C;AACA,KAAM,CAAAE,gBAAgB,CAAGpI,uBAAuB,CAAC8C,MAAM,CAAE7B,WAAW,CAAE,CAAEA,WAAW,CAAEoB,YAAa,CAAC,CAAEe,WAAW,CAAC,CACjH6E,mBAAmB,CAACE,IAAI,CAAC,GAAGC,gBAAgB,CAAC,CAC/C,CAAC,CAAC,CAEF;AACA,GAAIJ,mBAAmB,CAACnC,MAAM,CAAG,CAAC,CAAE,CAClC,KAAM,CAAAwC,cAAc,CAAG,EAAE,CACzB,KAAM,CAAAC,cAAc,CAAG,CAAC,GAAGpF,SAAS,CAAC,CAErC8E,mBAAmB,CAACN,OAAO,CAACa,QAAQ,EAAI,CACtC,KAAM,CAAAC,WAAW,CAAGF,cAAc,CAACG,SAAS,CAACC,CAAC,EAAIA,CAAC,CAACvH,EAAE,GAAKoH,QAAQ,CAACI,QAAQ,CAAC,CAC7E,GAAIH,WAAW,GAAK,CAAC,CAAC,CAAE,CACtB;AACA,KAAM,CAAA7F,SAAS,CAAG1B,WAAW,CAACwD,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACvD,EAAE,GAAKoH,QAAQ,CAACtE,WAAW,EAAIS,CAAC,CAACtD,IAAI,GAAKmH,QAAQ,CAACK,aAAa,CAAC,CAE3G;AACA,GAAI,CAAAC,UAAU,CAAG,KAAK,CACtB,GAAIN,QAAQ,CAAC3F,MAAM,GAAK,KAAK,CAAE,CAC7BiG,UAAU,CAAGlG,SAAS,EAAIA,SAAS,CAACpB,MAAM,EAAIgH,QAAQ,CAAC1G,QAAQ,CACjE,CAAC,IAAM,IAAI0G,QAAQ,CAAC3F,MAAM,GAAK,MAAM,CAAE,CACrC;AACA,KAAM,CAAAE,MAAM,CAAGwF,cAAc,CAACE,WAAW,CAAC,CAC1C,KAAM,CAAAM,cAAc,CAAGhG,MAAM,CAACiG,SAAS,CAACpG,SAAS,CAACxB,EAAE,CAAC,EAAI,CAAC,CAC1D0H,UAAU,CAAGC,cAAc,EAAIP,QAAQ,CAAC1G,QAAQ,CAClD,CAEA,GAAIgH,UAAU,CAAE,CACd;AACAP,cAAc,CAACE,WAAW,CAAC,CAAGvI,YAAY,CAACqI,cAAc,CAACE,WAAW,CAAC,CAAED,QAAQ,CAAEtH,WAAW,CAAC,CAE9F;AACAC,cAAc,CAACiD,IAAI,EAAIA,IAAI,CAACC,GAAG,CAACM,CAAC,EAAI,CACnC,GAAIA,CAAC,CAACvD,EAAE,GAAKoH,QAAQ,CAACtE,WAAW,EAAIS,CAAC,CAACtD,IAAI,GAAKmH,QAAQ,CAACK,aAAa,CAAE,CACtE,GAAIL,QAAQ,CAAC3F,MAAM,GAAK,KAAK,CAAE,CAC7B,OAAAyB,aAAA,CAAAA,aAAA,IAAYK,CAAC,MAAEnD,MAAM,CAAE+C,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEG,CAAC,CAACnD,MAAM,CAAGgH,QAAQ,CAAC1G,QAAQ,CAAC,GAClE,CAAC,IAAM,IAAI0G,QAAQ,CAAC3F,MAAM,GAAK,MAAM,CAAE,CACrC,OAAAyB,aAAA,CAAAA,aAAA,IAAYK,CAAC,MAAEnD,MAAM,CAAEmD,CAAC,CAACnD,MAAM,CAAGgH,QAAQ,CAAC1G,QAAQ,GACrD,CACF,CACA,MAAO,CAAA6C,CAAC,CACV,CAAC,CAAC,CAAC,CAEH;AACA,KAAM,CAAAsE,OAAO,CAAG,CACd/G,IAAI,CAAE,GAAI,CAAA4C,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,OAAO,CAAE,CAAEC,MAAM,CAAE,KAAK,CAAEC,IAAI,CAAE,SAAS,CAAEC,MAAM,CAAE,SAAU,CAAC,CAAC,CACnGnC,MAAM,CAAEyF,QAAQ,CAACU,UAAU,CAC3BtG,SAAS,CAAE4F,QAAQ,CAACK,aAAa,CAAC1D,SAAS,CAAC,CAAC,CAAE,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAC/DvC,MAAM,CAAE2F,QAAQ,CAAC3F,MAAM,CACvBf,QAAQ,CAAE0G,QAAQ,CAAC1G,QAAQ,CAC3BgB,KAAK,CAAE0F,QAAQ,CAAC1G,QAAQ,CAAG0G,QAAQ,CAACrG,KAAK,CACzCgH,QAAQ,CAAEX,QAAQ,CAACW,QAAQ,CAC3BC,cAAc,CAAEZ,QAAQ,CAACY,cAC3B,CAAC,CAEDd,cAAc,CAACF,IAAI,CAACa,OAAO,CAAC,CAE5B;AACAI,OAAO,CAACC,GAAG,cAAA5D,MAAA,CAAc8C,QAAQ,CAACU,UAAU,MAAAxD,MAAA,CAAI8C,QAAQ,CAAC3F,MAAM,MAAA6C,MAAA,CAAI8C,QAAQ,CAAC1G,QAAQ,MAAA4D,MAAA,CAAI8C,QAAQ,CAACK,aAAa,eAAAnD,MAAA,CAAQ8C,QAAQ,CAACrG,KAAK,2BAAAuD,MAAA,CAAyB9C,SAAS,CAACpB,MAAM,SAAAkE,MAAA,CAAO8C,QAAQ,CAAC3F,MAAM,GAAK,KAAK,CAAGD,SAAS,CAACpB,MAAM,CAAGgH,QAAQ,CAAC1G,QAAQ,CAAGc,SAAS,CAACpB,MAAM,CAAGgH,QAAQ,CAAC1G,QAAQ,CAAE,CAAC,CAChS,CACF,CACF,CAAC,CAAC,CAEF;AACAsB,YAAY,CAACmF,cAAc,CAAClE,GAAG,CAACtB,MAAM,EAAI5C,uBAAuB,CAAC4C,MAAM,CAAC,CAAC,CAAC,CAE3E;AACAO,cAAc,CAACc,IAAI,EAAI,CAAC,GAAGkE,cAAc,CAAE,GAAGlE,IAAI,CAACiB,KAAK,CAAC,CAAC,CAAE,EAAE,CAAC,CAAC,CAAC,CAAE;AAEnE;AACA,GAAIiD,cAAc,CAACxC,MAAM,CAAG,CAAC,CAAE,CAC7B;AACA,KAAM,CAAAyD,cAAc,CAAGjB,cAAc,CAACjD,KAAK,CAAC,CAAC,CAAEd,IAAI,CAACiF,GAAG,CAAClB,cAAc,CAACxC,MAAM,CAAE,CAAC,CAAC,CAAC,CAAE;AACpF,KAAM,CAAA2D,YAAY,CAAGF,cAAc,CAAClF,GAAG,CAACqF,KAAK,GAAK,CAChDxH,IAAI,CAAEwH,KAAK,CAACxH,IAAI,CAChBU,SAAS,CAAE8G,KAAK,CAAC9G,SAAS,CAC1BC,MAAM,CAAE6G,KAAK,CAAC7G,MAAM,CACpBf,QAAQ,CAAE4H,KAAK,CAAC5H,QAAQ,CACxBgB,KAAK,CAAE4G,KAAK,CAAC5G,KAAK,CAClBC,MAAM,CAAE2G,KAAK,CAAC3G,MAAM,CAAE;AACtBC,IAAI,CAAE,IAAK;AACb,CAAC,CAAC,CAAC,CAEHL,YAAY,CAACyB,IAAI,EAAI,CAAC,GAAGqF,YAAY,CAAE,GAAGrF,IAAI,CAACiB,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAAC,CAAE;AAChE,CACF,CAEA;AACA,GAAI6C,mBAAmB,CAACpC,MAAM,CAAG,CAAC,CAAE,CAClC,KAAM,CAAAyC,cAAc,CAAG,CAAC,GAAGpF,SAAS,CAAC,CAErC+E,mBAAmB,CAACP,OAAO,CAACa,QAAQ,EAAI,CACtC,KAAM,CAAAC,WAAW,CAAGF,cAAc,CAACG,SAAS,CAACC,CAAC,EAAIA,CAAC,CAACvH,EAAE,GAAKoH,QAAQ,CAACI,QAAQ,CAAC,CAC7E,GAAIH,WAAW,GAAK,CAAC,CAAC,CAAE,CACtB,KAAM,CAAA1F,MAAM,CAAGwF,cAAc,CAACE,WAAW,CAAC,CAE1C;AACA,KAAM,CAAAkB,WAAW,CAAG,KAAK,CAAE;AAC3B,GAAI5G,MAAM,CAAC6G,OAAO,EAAID,WAAW,CAAE,CACjC;AACA,KAAM,CAAAE,UAAU,CAAG,CACjBzI,EAAE,eAAAsE,MAAA,CAAgB3C,MAAM,CAAC3B,EAAE,MAAAsE,MAAA,CAAIZ,IAAI,CAACmC,GAAG,CAAC,CAAC,CAAE,CAC3C5F,IAAI,IAAAqE,MAAA,CAAK3C,MAAM,CAAC1B,IAAI,QAAAqE,MAAA,CAAM8C,QAAQ,CAACK,aAAa,YAAU,CAC1DiB,KAAK,CAAE,CAAC,CACR5F,WAAW,CAAEsE,QAAQ,CAACtE,WAAW,CACjC2E,aAAa,CAAEL,QAAQ,CAACK,aAAa,CACrCkB,cAAc,CAAE,OAAO,CACJC,kBAAkB,CAAE,EAAE,CAAE;AAC1CC,cAAc,CAAE,EAAE,CAAE;AACpBC,aAAa,CAAE,EAAE,CAClBC,iBAAiB,CAAE,CAAC,CACpBC,WAAW,CAAE,MAAM,CACnBC,iBAAiB,CAAE,GAAG,CACtBC,cAAc,CAAE,GAAG,CACnBC,UAAU,CAAEzF,IAAI,CAACmC,GAAG,CAAC,CAAC,CACtBuD,KAAK,CAAEzH,MAAM,CAAC3B,EAAE,CAChBqJ,SAAS,CAAE1H,MAAM,CAAC1B,IACpB,CAAC,CAED;AACAkH,cAAc,CAACE,WAAW,CAAC,CAAAnE,aAAA,CAAAA,aAAA,IACtBvB,MAAM,MACTgB,SAAS,CAAE,CAAC,GAAGhB,MAAM,CAACgB,SAAS,CAAE8F,UAAU,CAAC,CAC5CD,OAAO,CAAE7G,MAAM,CAAC6G,OAAO,CAAGD,WAAW,CACrCe,mBAAmB,CAAE5F,IAAI,CAACmC,GAAG,CAAC,CAAC,EAChC,CAED;AACAjD,YAAY,CAACI,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAEyF,UAAU,CAAC,CAAC,CAE3C;AACAvE,gBAAgB,CAAC,CACfC,IAAI,CAAE,MAAM,CACZC,KAAK,CAAE,mBAAmB,CAC1BC,OAAO,IAAAC,MAAA,CAAK3C,MAAM,CAAC1B,IAAI,cAAAqE,MAAA,CAAY8C,QAAQ,CAACK,aAAa,wBAAAnD,MAAA,CAAiBiE,WAAW,CAAChE,cAAc,CAAC,CAAC,CACxG,CAAC,CAAC,CACJ,CACF,CACF,CAAC,CAAC,CAEF;AACAvC,YAAY,CAACmF,cAAc,CAAC,CAC9B,CACF,CAAC,CAAE,IAAI,CAAC,CAAE;AAEV,MAAO,IAAMoC,aAAa,CAAC5C,QAAQ,CAAC,CACtC,CACF,CAAC,CAAE,CAACpH,SAAS,CAACM,kBAAkB,CAAEkC,SAAS,CAAEjC,WAAW,CAAEoB,YAAY,CAAEe,WAAW,CAAC,CAAC,CAErF,KAAM,CAAAuH,kBAAkB,CAAI7H,MAAM,EAAK,CACrCsG,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAEvG,MAAM,CAAC,CACzC,CAAC,CAED;AACA,KAAM,CAAA8H,qBAAqB,CAAItC,cAAc,EAAK,CAChDnF,YAAY,CAACmF,cAAc,CAAC,CAE5B;AACAjD,gBAAgB,CAAC,CACfC,IAAI,CAAE,MAAM,CACZC,KAAK,CAAE,sBAAsB,CAC7BC,OAAO,yBAAAC,MAAA,CAA0B6C,cAAc,CAACzC,MAAM,eACxD,CAAC,CAAC,CACJ,CAAC,CAED;AACA,KAAM,CAAAgF,kBAAkB,CAAGA,CAACC,QAAQ,CAAEnI,SAAS,GAAK,CAClD,KAAM,CAAAiH,UAAU,CAAG,CACjBzI,EAAE,YAAAsE,MAAA,CAAaZ,IAAI,CAACmC,GAAG,CAAC,CAAC,MAAAvB,MAAA,CAAInB,IAAI,CAAC2C,MAAM,CAAC,CAAC,CAAC8D,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,CACtE5J,IAAI,IAAAqE,MAAA,CAAKqF,QAAQ,CAAC1J,IAAI,QAAAqE,MAAA,CAAM9C,SAAS,CAACvB,IAAI,CAAE,CAC5CyI,KAAK,CAAE,CAAC,CACR5F,WAAW,CAAEtB,SAAS,CAACxB,EAAE,CACzByH,aAAa,CAAEjG,SAAS,CAACvB,IAAI,CAC7B0I,cAAc,CAAEnH,SAAS,CAACf,IAAI,CAC9BmI,kBAAkB,CAAEe,QAAQ,CAACG,cAAc,CAC3CjB,cAAc,CAAEc,QAAQ,CAACd,cAAc,CACvCC,aAAa,CAAEa,QAAQ,CAACd,cAAc,CACtCE,iBAAiB,CAAE,CAAC,CACpBC,WAAW,CAAE7F,IAAI,CAAC4G,KAAK,CAACJ,QAAQ,CAACnG,IAAI,CAAGmG,QAAQ,CAACT,cAAc,CAAC,CAChED,iBAAiB,CAAEU,QAAQ,CAACV,iBAAiB,CAC7CC,cAAc,CAAES,QAAQ,CAACT,cAAc,CACvCC,UAAU,CAAEzF,IAAI,CAACmC,GAAG,CAAC,CAAC,CACtBuD,KAAK,CAAE,QAAQ,CACfC,SAAS,CAAE,QACb,CAAC,CAEDzG,YAAY,CAACI,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAEyF,UAAU,CAAC,CAAC,CAE3C;AACAjJ,YAAY,CAACwD,IAAI,EAAAE,aAAA,CAAAA,aAAA,IACZF,IAAI,MACPvD,OAAO,CAAEuD,IAAI,CAACvD,OAAO,CAAGkK,QAAQ,CAACnG,IAAI,EACrC,CAAC,CAEH;AACAU,gBAAgB,CAAC,CACfC,IAAI,CAAE,SAAS,CACfC,KAAK,CAAE,gBAAgB,CACvBC,OAAO,uBAAAC,MAAA,CAAwBmE,UAAU,CAACxI,IAAI,gBAAAqE,MAAA,CAASqF,QAAQ,CAACnG,IAAI,CAACe,cAAc,CAAC,CAAC,CACvF,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAAyF,oBAAoB,CAAIC,SAAS,EAAK,CAC1C,KAAM,CAAAC,OAAO,CAAGvH,SAAS,CAACW,IAAI,CAAC6G,CAAC,EAAIA,CAAC,CAACnK,EAAE,GAAKiK,SAAS,CAAC,CACvD,GAAI,CAACC,OAAO,EAAI3K,SAAS,CAACE,OAAO,CAAGyK,OAAO,CAAClB,WAAW,CAAE,CACvD9E,gBAAgB,CAAC,CACfC,IAAI,CAAE,OAAO,CACbC,KAAK,CAAE,gBAAgB,CACvBC,OAAO,mBAAAC,MAAA,CAAe4F,OAAO,SAAPA,OAAO,iBAAPA,OAAO,CAAElB,WAAW,CAACzE,cAAc,CAAC,CAAC,4BAC7D,CAAC,CAAC,CACF,OACF,CAEA3B,YAAY,CAACI,IAAI,EAAIA,IAAI,CAACC,GAAG,CAACkH,CAAC,EAAI,CACjC,GAAIA,CAAC,CAACnK,EAAE,GAAKiK,SAAS,CAAE,CACtB,OAAA/G,aAAA,CAAAA,aAAA,IACKiH,CAAC,MACJzB,KAAK,CAAEyB,CAAC,CAACzB,KAAK,CAAG,CAAC,CAClBE,kBAAkB,CAAEzF,IAAI,CAAC4G,KAAK,CAACI,CAAC,CAACvB,kBAAkB,CAAGuB,CAAC,CAAClB,iBAAiB,CAAC,CAC1ED,WAAW,CAAE7F,IAAI,CAAC4G,KAAK,CAACI,CAAC,CAACnB,WAAW,CAAGmB,CAAC,CAACjB,cAAc,CAAC,GAE7D,CACA,MAAO,CAAAiB,CAAC,CACV,CAAC,CAAC,CAAC,CAEH;AACA3K,YAAY,CAACwD,IAAI,EAAAE,aAAA,CAAAA,aAAA,IACZF,IAAI,MACPvD,OAAO,CAAEuD,IAAI,CAACvD,OAAO,CAAGyK,OAAO,CAAClB,WAAW,EAC3C,CAAC,CAEH;AACA9E,gBAAgB,CAAC,CACfC,IAAI,CAAE,SAAS,CACfC,KAAK,CAAE,mBAAmB,CAC1BC,OAAO,aAAAC,MAAA,CAAc4F,OAAO,CAACjK,IAAI,eAAAqE,MAAA,CAAa4F,OAAO,CAACxB,KAAK,CAAG,CAAC,gBAAApE,MAAA,CAAS4F,OAAO,CAAClB,WAAW,CAACzE,cAAc,CAAC,CAAC,CAC9G,CAAC,CAAC,CACJ,CAAC,CAID;AACAtG,SAAS,CAAC,IAAM,CACd,GAAI,CAACsB,SAAS,CAACM,kBAAkB,CAAE,CACjC,KAAM,CAAA8G,QAAQ,CAAGC,WAAW,CAAC,IAAM,CACjC7G,cAAc,CAACiD,IAAI,EAAIA,IAAI,CAACC,GAAG,CAACzB,SAAS,EAAI,CAC3C;AACA;AACA,KAAM,CAAA4I,YAAY,CAAG,KAAK,CAAE;AAC5B,KAAM,CAAAC,WAAW,CAAG,GAAG,CAAE;AACzB,KAAM,CAAAC,SAAS,CAAGD,WAAW,EAAID,YAAY,CAAG5I,SAAS,CAACpB,MAAM,CAAC,CAEjE;AACA,KAAM,CAAAmK,SAAS,CAAG,CAACpH,IAAI,CAAC2C,MAAM,CAAC,CAAC,CAAG,GAAG,EAAI,GAAG,CAAE;AAC/C,KAAM,CAAA0E,YAAY,CAAGrH,IAAI,CAACC,GAAG,CAAC,CAAC,CAAED,IAAI,CAAC4G,KAAK,CAACO,SAAS,EAAI,CAAC,CAAGC,SAAS,CAAC,CAAC,CAAC,CAEzE;AACA,KAAM,CAAAE,YAAY,CAAGjJ,SAAS,CAACpB,MAAM,EAAIoB,SAAS,CAACpB,MAAM,CAAG+C,IAAI,CAACuH,KAAK,CAAC,CAACvH,IAAI,CAAC2C,MAAM,CAAC,CAAC,CAAG,GAAG,EAAI,GAAG,CAAC,CAAC,CAAE;AACtG,KAAM,CAAA6E,cAAc,CAAGF,YAAY,CAAG,IAAI,CAAG,GAAG,CAAE;AAElD;AACA,GAAI,CAAAG,aAAa,CAAG,CAAC,CACrB,GAAIpJ,SAAS,CAACX,YAAY,CAAC6D,MAAM,EAAI,CAAC,CAAE,CACtC,KAAM,CAAAmG,YAAY,CAAGrJ,SAAS,CAACX,YAAY,CAACoD,KAAK,CAAC,CAAC,CAAC,CAAC,CACrD,KAAM,CAAA6G,cAAc,CAAGD,YAAY,CAAC,CAAC,CAAC,CAAC9J,KAAK,CAAG8J,YAAY,CAAC,CAAC,CAAC,CAAC9J,KAAK,CACpE,KAAM,CAAAgK,aAAa,CAAG5H,IAAI,CAAC6H,GAAG,CAACF,cAAc,CAAC,CAAGD,YAAY,CAAC,CAAC,CAAC,CAAC9J,KAAK,CACtE6J,aAAa,CAAG,CAACE,cAAc,CAAG,CAAC,CAAG,CAAC,CAAG,CAAC,CAAC,EAAIC,aAAa,CAAG,GAAG,CAAE;AACvE,CAEA;AACA,GAAI,CAAAE,oBAAoB,CAAG,CAAC,CAC5B,GAAI9H,IAAI,CAAC2C,MAAM,CAAC,CAAC,CAAG,IAAI,CAAE,CAAE;AAC1B,KAAM,CAAAoF,OAAO,CAAG/H,IAAI,CAAC2C,MAAM,CAAC,CAAC,CAAG,GAAG,CACnCmF,oBAAoB,CAAGC,OAAO,CAAG,GAAG,CAAG,GAAG,CAAE;AAC9C,CAEA;AACA,KAAM,CAAAC,WAAW,CAAG3J,SAAS,CAACpB,MAAM,CAAG,KAAK,CAAE;AAC9C,GAAI+K,WAAW,CAAG,GAAG,CAAE,CAAE;AACvB,KAAM,CAAAC,kBAAkB,CAAG,CAAC,CAAG,CAAC,GAAG,CAAGD,WAAW,EAAI,CAAC,CAAE;AACxDF,oBAAoB,EAAIG,kBAAkB,CAC5C,CAAC,IAAM,IAAID,WAAW,CAAG,CAAC,CAAE,CAAE;AAC5B,KAAM,CAAAE,mBAAmB,CAAG,CAAC,CAAG,CAACF,WAAW,CAAG,CAAC,EAAI,GAAG,CAAE;AACzDF,oBAAoB,EAAII,mBAAmB,CAC7C,CAEA;AACA,KAAM,CAAAC,UAAU,CAAGnI,IAAI,CAACC,GAAG,CAAC,CAAC,CAAED,IAAI,CAACiF,GAAG,CAAC,KAAK,CAAEjF,IAAI,CAAC4G,KAAK,CAACS,YAAY,EAAI,CAAC,CAAGG,cAAc,CAAGC,aAAa,CAAC,CAAGK,oBAAoB,CAAC,CAAC,CAAC,CAEvI;AACA,KAAM,CAAAM,MAAM,CAAGpI,IAAI,CAACuH,KAAK,CAACvH,IAAI,CAAC2C,MAAM,CAAC,CAAC,CAAG,CAAC,CAAC,CAAG,CAAC,CAChD,KAAM,CAAA0F,WAAW,CAAGrI,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEkI,UAAU,CAAGC,MAAM,CAAC,CACpD,KAAM,CAAAE,YAAY,CAAGH,UAAU,CAAGC,MAAM,CAExC;AACA,KAAM,CAAAG,WAAW,CAAG,GAAI,CAAAhI,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,OAAO,CAAE,CAAEC,MAAM,CAAE,KAAK,CAAEC,IAAI,CAAE,SAAS,CAAEC,MAAM,CAAE,SAAU,CAAC,CAAC,CACjH,KAAM,CAAA6H,eAAe,CAAG,CAAC,GAAGnK,SAAS,CAACX,YAAY,CAAE,CAAEC,IAAI,CAAE4K,WAAW,CAAE3K,KAAK,CAAEuK,UAAW,CAAC,CAAC,CAC7F;AACA,GAAIK,eAAe,CAACjH,MAAM,CAAG,EAAE,CAAE,CAC/BiH,eAAe,CAACC,MAAM,CAAC,CAAC,CAAED,eAAe,CAACjH,MAAM,CAAG,EAAE,CAAC,CACxD,CAEA,OAAAxB,aAAA,CAAAA,aAAA,IACK1B,SAAS,MACZrB,SAAS,CAAEmL,UAAU,CACrBjL,QAAQ,CAAEmL,WAAW,CACrBlL,SAAS,CAAEmL,YAAY,CACvB5K,YAAY,CAAE8K,eAAe,GAEjC,CAAC,CAAC,CAAC,CACL,CAAC,CAAE,IAAI,CAAC,CAAE;AAEV,MAAO,IAAMpC,aAAa,CAAC5C,QAAQ,CAAC,CACtC,CACF,CAAC,CAAE,CAACpH,SAAS,CAACM,kBAAkB,CAAC,CAAC,CAElC;AACA5B,SAAS,CAAC,IAAM,CACd,GAAI,CAACsB,SAAS,CAACM,kBAAkB,EAAI8C,SAAS,CAAC+B,MAAM,CAAG,CAAC,CAAE,CACzD,KAAM,CAAAiC,QAAQ,CAAGC,WAAW,CAAC,IAAM,CACjChE,YAAY,CAACI,IAAI,EAAIA,IAAI,CAACC,GAAG,CAACiH,OAAO,EAAI,CACvC,KAAM,CAAArE,GAAG,CAAGnC,IAAI,CAACmC,GAAG,CAAC,CAAC,CACtB,KAAM,CAAAgG,QAAQ,CAAG1I,IAAI,CAACuH,KAAK,CAAC,CAAC7E,GAAG,CAAGqE,OAAO,CAACf,UAAU,EAAI,IAAI,CAAC,CAAE;AAEhE,GAAIe,OAAO,CAACpB,aAAa,CAAG,CAAC,CAAE,CAC7B,KAAM,CAAAgD,gBAAgB,CAAG3I,IAAI,CAACC,GAAG,CAAC,CAAC,CAAE8G,OAAO,CAACpB,aAAa,CAAG+C,QAAQ,CAAC,CAEzD,GAAIC,gBAAgB,GAAK,CAAC,EAAI5B,OAAO,CAACpB,aAAa,CAAG,CAAC,CAAE,CACnE;AACA,GAAIoB,OAAO,CAACd,KAAK,EAAIc,OAAO,CAACd,KAAK,GAAK,QAAQ,CAAE,CAC/C;AACApH,YAAY,CAAC+J,WAAW,EAAIA,WAAW,CAAC9I,GAAG,CAACtB,MAAM,EAAI,CACpD,GAAIA,MAAM,CAAC3B,EAAE,GAAKkK,OAAO,CAACd,KAAK,CAAE,CAC/B,OAAAlG,aAAA,CAAAA,aAAA,IACKvB,MAAM,MACTiG,SAAS,CAAA1E,aAAA,CAAAA,aAAA,IACJvB,MAAM,CAACiG,SAAS,MACnB,CAACsC,OAAO,CAACpH,WAAW,EAAG,CAACnB,MAAM,CAACiG,SAAS,CAACsC,OAAO,CAACpH,WAAW,CAAC,EAAI,CAAC,EAAIoH,OAAO,CAACtB,kBAAkB,EACjG,GAEL,CACA,MAAO,CAAAjH,MAAM,CACf,CAAC,CAAC,CAAC,CAEH;AACA5B,cAAc,CAACiM,eAAe,EAAIA,eAAe,CAAC/I,GAAG,CAACzB,SAAS,EAAI,CACjE,GAAIA,SAAS,CAACxB,EAAE,GAAKkK,OAAO,CAACpH,WAAW,CAAE,CACxC,OAAAI,aAAA,CAAAA,aAAA,IACK1B,SAAS,MACZpB,MAAM,CAAEoB,SAAS,CAACpB,MAAM,CAAG8J,OAAO,CAACtB,kBAAkB,GAEzD,CACA,MAAO,CAAApH,SAAS,CAClB,CAAC,CAAC,CAAC,CAEH;AACA0C,gBAAgB,CAAC,CACfC,IAAI,CAAE,MAAM,CACZC,KAAK,CAAE,yBAAyB,CAChCC,OAAO,IAAAC,MAAA,CAAK4F,OAAO,CAACb,SAAS,yBAAA/E,MAAA,CAAuB4F,OAAO,CAACtB,kBAAkB,MAAAtE,MAAA,CAAI4F,OAAO,CAACzC,aAAa,CACzG,CAAC,CAAC,CACJ,CAAC,IAAM,CACL;AACA1H,cAAc,CAACiM,eAAe,EAAIA,eAAe,CAAC/I,GAAG,CAACzB,SAAS,EAAI,CACjE,GAAIA,SAAS,CAACxB,EAAE,GAAKkK,OAAO,CAACpH,WAAW,CAAE,CACxC,OAAAI,aAAA,CAAAA,aAAA,IACK1B,SAAS,MACZb,QAAQ,CAAEa,SAAS,CAACb,QAAQ,CAAGuJ,OAAO,CAACtB,kBAAkB,GAE7D,CACA,MAAO,CAAApH,SAAS,CAClB,CAAC,CAAC,CAAC,CAEH;AACA0C,gBAAgB,CAAC,CACfC,IAAI,CAAE,SAAS,CACfC,KAAK,CAAE,sBAAsB,CAC7BC,OAAO,IAAAC,MAAA,CAAK4F,OAAO,CAACjK,IAAI,eAAAqE,MAAA,CAAa4F,OAAO,CAACtB,kBAAkB,MAAAtE,MAAA,CAAI4F,OAAO,CAACzC,aAAa,uCAC1F,CAAC,CAAC,CACJ,CAED;AACA,OAAAvE,aAAA,CAAAA,aAAA,IACKgH,OAAO,MACVpB,aAAa,CAAEoB,OAAO,CAACrB,cAAc,CACrCE,iBAAiB,CAAE,CAAC,CACpBI,UAAU,CAAEtD,GAAG,GAEnB,CAAC,IAAM,CACL;AACA,OAAA3C,aAAA,CAAAA,aAAA,IACKgH,OAAO,MACVpB,aAAa,CAAEgD,gBAAgB,CAC/B3C,UAAU,CAAEtD,GAAG,GAEnB,CACF,CAEA,MAAO,CAAAqE,OAAO,CAChB,CAAC,CAAC,CAAC,CACL,CAAC,CAAE,IAAI,CAAC,CAAE;AAEV,MAAO,IAAMX,aAAa,CAAC5C,QAAQ,CAAC,CACtC,CACF,CAAC,CAAE,CAACpH,SAAS,CAACM,kBAAkB,CAAE8C,SAAS,CAAC+B,MAAM,CAAC,CAAC,CAEpD;AACA,GAAI,CAACrF,WAAW,CAAE,CAChB,mBAAOJ,IAAA,CAACP,KAAK,EAACuN,OAAO,CAAEnH,WAAY,CAAE,CAAC,CACxC,CAEA,mBACE3F,KAAA,QAAK+M,SAAS,CAAC,KAAK,CAAAC,QAAA,eAClBlN,IAAA,CAACf,MAAM,EACLqB,SAAS,CAAEA,SAAU,CACrB6M,kBAAkB,CAAE1G,gBAAiB,CACrCrG,WAAW,CAAEA,WAAY,CACzBgN,QAAQ,CAAErH,YAAa,CACxB,CAAC,cACF7F,KAAA,QAAK+M,SAAS,CAAC,cAAc,CAAAC,QAAA,eAC3BlN,IAAA,CAACd,WAAW,EACV2B,WAAW,CAAEA,WAAY,CACzBwM,gBAAgB,CAAEzJ,oBAAqB,CACvC0J,KAAK,CAAElJ,SAAU,CACjBmJ,MAAM,CAAEhI,UAAW,CACnB7B,SAAS,CAAEA,SAAU,CACtB,CAAC,cACFxD,KAAA,QAAK+M,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eAClClN,IAAA,CAACb,OAAO,EACN4C,WAAW,CAAEA,WAAY,CACzBE,YAAY,CAAEA,YAAa,CAC3BI,SAAS,CAAEA,SAAU,CACnBW,WAAW,CAAEA,WAAY,CAC1B,CAAC,cAGF9C,KAAA,QAAK+M,SAAS,CAAC,aAAa,CAAAC,QAAA,eAC1BhN,KAAA,WACE+M,SAAS,mBAAA5H,MAAA,CAAoBnC,aAAa,CAAG,QAAQ,CAAG,EAAE,CAAG,CAC7DsK,OAAO,CAAEA,CAAA,GAAMrK,gBAAgB,CAAC,CAACD,aAAa,CAAE,CAAAgK,QAAA,EACjD,2BACgB,CAACpK,SAAS,CAAC2C,MAAM,CAAC,GACnC,EAAQ,CAAC,cACTzF,IAAA,WACEiN,SAAS,mBAAA5H,MAAA,CAAoBjC,mBAAmB,CAAG,QAAQ,CAAG,EAAE,CAAG,CACnEoK,OAAO,CAAEA,CAAA,GAAMnK,sBAAsB,CAAC,CAACD,mBAAmB,CAAE,CAAA8J,QAAA,CAC7D,+BAED,CAAQ,CAAC,cACThN,KAAA,WACE+M,SAAS,mBAAA5H,MAAA,CAAoB/B,kBAAkB,CAAG,QAAQ,CAAG,EAAE,CAAG,CAClEkK,OAAO,CAAEA,CAAA,GAAMjK,qBAAqB,CAAC,CAACD,kBAAkB,CAAE,CAAA4J,QAAA,EAC3D,0BACe,CAACxJ,SAAS,CAAC+B,MAAM,CAAC,GAClC,EAAQ,CAAC,cACTzF,IAAA,WACEiN,SAAS,mBAAA5H,MAAA,CAAoB7B,mBAAmB,CAAG,QAAQ,CAAG,EAAE,CAAG,CACnEgK,OAAO,CAAEA,CAAA,GAAM/J,sBAAsB,CAAC,CAACD,mBAAmB,CAAE,CAAA0J,QAAA,CAC7D,0BAED,CAAQ,CAAC,EACN,CAAC,CAGLhK,aAAa,eACZlD,IAAA,QAAKiN,SAAS,CAAC,kBAAkB,CAAAC,QAAA,cAC/BhN,KAAA,QAAK+M,SAAS,CAAC,oBAAoB,CAAAC,QAAA,eACjClN,IAAA,WACEiN,SAAS,CAAC,oBAAoB,CAC9BO,OAAO,CAAEA,CAAA,GAAMrK,gBAAgB,CAAC,KAAK,CAAE,CAAA+J,QAAA,CACxC,MAED,CAAQ,CAAC,cACTlN,IAAA,CAACX,aAAa,EACZyD,SAAS,CAAEA,SAAU,CACrB2K,cAAc,CAAElD,kBAAmB,CACpC,CAAC,EACC,CAAC,CACH,CACN,CAGAnH,mBAAmB,eAClBpD,IAAA,QAAKiN,SAAS,CAAC,kBAAkB,CAAAC,QAAA,cAC/BlN,IAAA,CAACV,eAAe,EACdwD,SAAS,CAAEA,SAAU,CACrBjC,WAAW,CAAEA,WAAY,CACzB6M,OAAO,CAAEA,CAAA,GAAMrK,sBAAsB,CAAC,KAAK,CAAE,CAC9C,CAAC,CACC,CACN,CAGAC,kBAAkB,eACjBtD,IAAA,CAACT,cAAc,EACbmE,SAAS,CAAEA,SAAU,CACrB7C,WAAW,CAAEA,WAAY,CACzBL,OAAO,CAAEF,SAAS,CAACE,OAAQ,CAC3BmN,cAAc,CAAElD,kBAAmB,CACnCmD,gBAAgB,CAAE7C,oBAAqB,CACvC2C,OAAO,CAAEA,CAAA,GAAMnK,qBAAqB,CAAC,KAAK,CAAE,CAC7C,CACF,CAGAC,mBAAmB,eAClBxD,IAAA,CAACR,eAAe,EACdsD,SAAS,CAAEA,SAAU,CACrB+K,eAAe,CAAErD,qBAAsB,CACvCkD,OAAO,CAAEA,CAAA,GAAMjK,sBAAsB,CAAC,KAAK,CAAE,CAC9C,CACF,EACE,CAAC,EACH,CAAC,cACNzD,IAAA,CAACZ,qBAAqB,EACpBwD,aAAa,CAAEA,aAAc,CAC7BkL,oBAAoB,CAAEhH,kBAAmB,CAC1C,CAAC,EACC,CAAC,CAEV,CAEA,cAAe,CAAA3G,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
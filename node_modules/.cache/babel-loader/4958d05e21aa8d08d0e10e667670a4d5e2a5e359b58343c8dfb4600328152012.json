{"ast":null,"code":"// AI Trading System with 200 traders\n// Each trader has different strategies and emotional responses\n\n// Trading Strategy Types\nexport const STRATEGY_TYPES = {\n  MOMENTUM: 'momentum',\n  MEAN_REVERSION: 'mean_reversion',\n  ARBITRAGE: 'arbitrage',\n  SCALPING: 'scalping',\n  SWING: 'swing',\n  VALUE: 'value',\n  GROWTH: 'growth',\n  CONTRARIAN: 'contrarian',\n  TREND_FOLLOWING: 'trend_following',\n  BREAKOUT: 'breakout',\n  SUPPLY_DEMAND: 'supply_demand'\n};\n\n// Emotional States\nexport const EMOTIONAL_STATES = {\n  CALM: 'calm',\n  EXCITED: 'excited',\n  FEARFUL: 'fearful',\n  GREEDY: 'greedy',\n  PANIC: 'panic',\n  FOMO: 'fomo'\n};\n\n// Risk Tolerance Levels\nexport const RISK_LEVELS = {\n  CONSERVATIVE: 0.2,\n  MODERATE: 0.5,\n  AGGRESSIVE: 0.8,\n  EXTREME: 1.0\n};\n\n// Generate 200 unique AI traders\nexport const generateAITraders = () => {\n  const traders = [];\n  const names = ['AlphaBot', 'QuantumTrader', 'NeuralNet', 'CyberTrader', 'DataMiner', 'AlgoMaster', 'SmartBot', 'TradeAI', 'MarketMind', 'ProfitBot', 'CryptoKing', 'StockMaster', 'TrendHunter', 'MomentumBot', 'ArbitrageAI', 'ScalpBot', 'SwingTrader', 'ValueBot', 'GrowthAI', 'ContrarianBot', 'BreakoutAI', 'SignalMaster', 'PatternBot', 'VolatilityAI', 'LiquidityBot', 'SpreadHunter', 'GapTrader', 'NewsBot', 'SentimentAI', 'VolumeBot', 'PriceAction', 'TechnicalAI', 'FundamentalBot', 'MacroTrader', 'MicroBot', 'SectorAI', 'IndexBot', 'CommodityAI', 'CurrencyBot', 'BondTrader', 'DerivativeAI', 'OptionBot', 'FutureTrader', 'SwapAI', 'HedgeBot', 'PortfolioAI', 'RiskBot', 'BalanceTrader', 'DiversifyAI', 'ConcentrateBot', 'LeverageAI', 'MarginBot', 'ShortTrader', 'LongAI', 'BullBot', 'BearAI', 'NeutralTrader', 'BiasBot', 'EmotionAI', 'LogicBot', 'InstinctAI', 'AnalysisBot', 'ResearchAI', 'BacktestBot', 'ForwardAI', 'PredictBot', 'ForecastAI', 'ProjectBot', 'EstimateAI', 'CalculateBot', 'ComputeAI', 'ProcessBot', 'ExecuteAI', 'ImplementBot', 'DeployAI', 'LaunchBot', 'StartAI', 'InitBot', 'BeginAI', 'CommenceBot', 'TriggerAI', 'ActivateBot', 'EnableAI', 'PowerBot', 'EnergyAI', 'ForceBot', 'DriveAI', 'PushBot', 'PullAI', 'DrawBot', 'AttractAI', 'RepelBot', 'RejectAI', 'AcceptBot', 'ApproveAI', 'DenyBot', 'BlockAI', 'AllowBot', 'PermitAI', 'RestrictBot', 'LimitAI', 'BoundBot', 'CapAI', 'FloorBot', 'CeilingAI', 'BaseBot', 'PeakAI', 'ValleyBot', 'SummitAI', 'DepthBot', 'HeightAI', 'WidthBot', 'LengthAI', 'SizeBot', 'ScaleAI', 'ScopeBot', 'RangeAI', 'SpanBot', 'ExtentAI', 'ReachBot', 'GraspAI', 'HoldBot', 'GripAI', 'ClutchBot', 'SeizeAI', 'CaptureBot', 'SnatchAI', 'GrabBot', 'TakeAI', 'GiveBot', 'OfferAI', 'BidBot', 'AskAI', 'QuoteBot', 'PriceAI', 'CostBot', 'ValueAI', 'WorthBot', 'MeritAI', 'DeserveBot', 'EarnAI', 'GainBot', 'ProfitAI', 'LossBot', 'WinAI', 'LoseBot', 'BeatAI', 'DefeatBot', 'ConquerAI', 'SurrenderBot', 'YieldAI', 'ResistBot', 'FightAI', 'PeaceBot', 'WarAI', 'BattleBot', 'CombatAI', 'StruggleBot', 'StriveAI', 'AchieveBot', 'SucceedAI', 'FailBot', 'SucceedAI', 'FailBot', 'WinAI', 'LoseBot', 'RiseAI', 'FallBot', 'ClimbAI', 'DescendBot', 'AscendAI', 'DropBot', 'JumpAI', 'LeapBot', 'BoundAI', 'SpringBot', 'BounceAI', 'ReboundBot', 'RecoverAI', 'HealBot', 'MendAI', 'FixBot', 'RepairAI', 'BreakBot', 'DamageAI', 'HarmBot', 'HurtAI', 'InjureBot', 'WoundAI', 'CutBot', 'SliceAI', 'ChopBot', 'SplitAI', 'DivideBot', 'MultiplyAI', 'AddBot', 'SumAI', 'TotalBot', 'CountAI', 'NumberBot', 'DigitAI', 'FigureBot', 'CalculateAI', 'ComputeBot', 'ProcessAI', 'HandleBot', 'ManageAI', 'ControlBot', 'DirectAI', 'GuideBot', 'LeadAI', 'FollowBot', 'TrackAI', 'TraceBot', 'FindAI', 'SearchBot', 'SeekAI', 'LookBot', 'WatchAI', 'ObserveBot', 'MonitorAI', 'CheckBot', 'VerifyAI', 'ConfirmBot', 'ValidateAI', 'TestBot', 'TrialAI', 'ExperimentBot'];\n  for (let i = 0; i < 200; i++) {\n    const trader = {\n      id: i + 1,\n      name: names[i % names.length] + (Math.floor(i / names.length) + 1),\n      strategy: Object.values(STRATEGY_TYPES)[i % Object.values(STRATEGY_TYPES).length],\n      riskTolerance: Object.values(RISK_LEVELS)[i % Object.values(RISK_LEVELS).length],\n      emotionalState: EMOTIONAL_STATES.CALM,\n      emotionalIntensity: Math.random(),\n      // 0-1 scale\n      fomoSusceptibility: Math.random(),\n      // How easily they get FOMO\n      panicSusceptibility: Math.random(),\n      // How easily they panic\n      momentumSensitivity: Math.random(),\n      // How much they follow momentum\n      confidence: 0.5,\n      // Current confidence level\n      capital: 50000 + Math.random() * 150000,\n      // Starting capital\n      portfolio: {},\n      tradeHistory: [],\n      lastTradeTime: Date.now(),\n      successRate: 0.5,\n      profitLoss: 0,\n      activePositions: {},\n      maxPositions: 3 + Math.floor(Math.random() * 5),\n      // 3-7 positions\n      preferredCommodities: [],\n      // Will be set based on strategy\n      marketSentiment: 0,\n      // -1 to 1 (bearish to bullish)\n      volatilityTolerance: Math.random(),\n      liquidityPreference: Math.random(),\n      newsSensitivity: Math.random(),\n      technicalAnalysisWeight: Math.random(),\n      fundamentalAnalysisWeight: Math.random(),\n      emotionalDecisionWeight: Math.random(),\n      rationalDecisionWeight: 1 - Math.random() * 0.3,\n      // 0.7-1.0\n      herdInstinct: Math.random(),\n      contrarianTendency: Math.random(),\n      patience: Math.random(),\n      aggressiveness: Math.random(),\n      stopLossThreshold: 0.05 + Math.random() * 0.15,\n      // 5-20%\n      takeProfitThreshold: 0.1 + Math.random() * 0.2,\n      // 10-30%\n      maxDrawdown: 0.1 + Math.random() * 0.2,\n      // 10-30%\n      rebalancingFrequency: 1 + Math.floor(Math.random() * 7),\n      // 1-7 days\n      diversificationTarget: 0.3 + Math.random() * 0.4,\n      // 30-70% in top position\n      leveragePreference: Math.random() * 0.5,\n      // 0-50% leverage\n      shortingPreference: Math.random(),\n      dayTradingPreference: Math.random(),\n      swingTradingPreference: Math.random(),\n      positionSizingMethod: ['fixed', 'kelly', 'volatility', 'equal'][Math.floor(Math.random() * 4)],\n      marketHours: {\n        start: 6 + Math.floor(Math.random() * 6),\n        // 6 AM - 12 PM\n        end: 12 + Math.floor(Math.random() * 12) // 12 PM - 12 AM\n      },\n      timezone: Math.floor(Math.random() * 24),\n      lastUpdate: Date.now(),\n      isActive: true,\n      performanceMetrics: {\n        totalTrades: 0,\n        winningTrades: 0,\n        losingTrades: 0,\n        averageWin: 0,\n        averageLoss: 0,\n        largestWin: 0,\n        largestLoss: 0,\n        consecutiveWins: 0,\n        consecutiveLosses: 0,\n        sharpeRatio: 0,\n        maxDrawdown: 0,\n        winRate: 0,\n        profitFactor: 0\n      }\n    };\n\n    // Set preferred commodities based on strategy\n    trader.preferredCommodities = getPreferredCommodities(trader.strategy);\n    traders.push(trader);\n  }\n  return traders;\n};\n\n// Get preferred commodities based on trading strategy\nconst getPreferredCommodities = strategy => {\n  const commodityPreferences = {\n    [STRATEGY_TYPES.MOMENTUM]: ['quantum-crystals', 'dark-matter', 'plasma-cells'],\n    [STRATEGY_TYPES.MEAN_REVERSION]: ['neural-processors', 'antimatter-cores'],\n    [STRATEGY_TYPES.ARBITRAGE]: ['quantum-crystals', 'dark-matter', 'neural-processors'],\n    [STRATEGY_TYPES.SCALPING]: ['plasma-cells', 'quantum-crystals'],\n    [STRATEGY_TYPES.SWING]: ['antimatter-cores', 'fusion-reactors'],\n    [STRATEGY_TYPES.VALUE]: ['neural-processors', 'fusion-reactors'],\n    [STRATEGY_TYPES.GROWTH]: ['quantum-crystals', 'dark-matter'],\n    [STRATEGY_TYPES.CONTRARIAN]: ['antimatter-cores', 'plasma-cells'],\n    [STRATEGY_TYPES.TREND_FOLLOWING]: ['quantum-crystals', 'dark-matter', 'neural-processors'],\n    [STRATEGY_TYPES.BREAKOUT]: ['plasma-cells', 'fusion-reactors']\n  };\n  return commodityPreferences[strategy] || ['quantum-crystals', 'dark-matter'];\n};\n\n// Update trader emotional state based on market conditions\nexport const updateTraderEmotions = (trader, marketData, recentTrades) => {\n  const {\n    commodities,\n    marketTrends\n  } = marketData;\n\n  // Calculate market volatility\n  const volatility = calculateMarketVolatility(commodities);\n\n  // Calculate momentum\n  const momentum = calculateMarketMomentum(commodities);\n\n  // Calculate FOMO trigger\n  const fomoTrigger = calculateFOMOTrigger(recentTrades, trader);\n\n  // Calculate panic trigger\n  const panicTrigger = calculatePanicTrigger(volatility, trader.portfolio, commodities);\n\n  // Update emotional state\n  let newEmotionalState = trader.emotionalState;\n  let newEmotionalIntensity = trader.emotionalIntensity;\n\n  // FOMO Logic\n  if (fomoTrigger > trader.fomoSusceptibility * 0.8) {\n    newEmotionalState = EMOTIONAL_STATES.FOMO;\n    newEmotionalIntensity = Math.min(1, fomoTrigger);\n  }\n  // Panic Logic\n  else if (panicTrigger > trader.panicSusceptibility * 0.7) {\n    newEmotionalState = EMOTIONAL_STATES.PANIC;\n    newEmotionalIntensity = Math.min(1, panicTrigger);\n  }\n  // Greed Logic\n  else if (momentum > 0.6 && trader.profitLoss > 0) {\n    newEmotionalState = EMOTIONAL_STATES.GREEDY;\n    newEmotionalIntensity = Math.min(1, momentum * 0.8);\n  }\n  // Fear Logic\n  else if (volatility > 0.7 || trader.profitLoss < -trader.capital * 0.1) {\n    newEmotionalState = EMOTIONAL_STATES.FEARFUL;\n    newEmotionalIntensity = Math.min(1, volatility * 0.9);\n  }\n  // Excitement Logic\n  else if (momentum > 0.4 && trader.profitLoss > trader.capital * 0.05) {\n    newEmotionalState = EMOTIONAL_STATES.EXCITED;\n    newEmotionalIntensity = Math.min(1, momentum * 0.6);\n  }\n  // Calm Logic\n  else {\n    newEmotionalState = EMOTIONAL_STATES.CALM;\n    newEmotionalIntensity = Math.max(0, newEmotionalIntensity - 0.1);\n  }\n  return {\n    ...trader,\n    emotionalState: newEmotionalState,\n    emotionalIntensity: newEmotionalIntensity\n  };\n};\n\n// Calculate market volatility\nconst calculateMarketVolatility = commodities => {\n  const priceChanges = commodities.map(commodity => {\n    const history = commodity.priceHistory;\n    if (history.length < 2) return 0;\n    const changes = [];\n    for (let i = 1; i < history.length; i++) {\n      const change = Math.abs(history[i].price - history[i - 1].price) / history[i - 1].price;\n      changes.push(change);\n    }\n    return changes.reduce((sum, change) => sum + change, 0) / changes.length;\n  });\n  return priceChanges.reduce((sum, volatility) => sum + volatility, 0) / priceChanges.length;\n};\n\n// Calculate market momentum\nconst calculateMarketMomentum = commodities => {\n  const momentums = commodities.map(commodity => {\n    const history = commodity.priceHistory;\n    if (history.length < 3) return 0;\n    const recent = history.slice(-3);\n    const older = history.slice(-6, -3);\n    if (older.length === 0) return 0;\n    const recentAvg = recent.reduce((sum, h) => sum + h.price, 0) / recent.length;\n    const olderAvg = older.reduce((sum, h) => sum + h.price, 0) / older.length;\n    return (recentAvg - olderAvg) / olderAvg;\n  });\n  return momentums.reduce((sum, momentum) => sum + momentum, 0) / momentums.length;\n};\n\n// Calculate FOMO trigger\nconst calculateFOMOTrigger = (recentTrades, trader) => {\n  if (recentTrades.length === 0) return 0;\n  const buyVolume = recentTrades.filter(trade => trade.action === 'BUY').reduce((sum, trade) => sum + trade.quantity, 0);\n  const sellVolume = recentTrades.filter(trade => trade.action === 'SELL').reduce((sum, trade) => sum + trade.quantity, 0);\n  const totalVolume = buyVolume + sellVolume;\n  if (totalVolume === 0) return 0;\n  const buyRatio = buyVolume / totalVolume;\n  const volumeIntensity = Math.min(1, totalVolume / 1000); // Normalize volume\n\n  return buyRatio * volumeIntensity * trader.fomoSusceptibility;\n};\n\n// Calculate panic trigger\nconst calculatePanicTrigger = (volatility, portfolio, commodities) => {\n  let portfolioValue = 0;\n  let portfolioCost = 0;\n  Object.entries(portfolio).forEach(([commodityId, quantity]) => {\n    const commodity = commodities.find(c => c.id === commodityId);\n    if (commodity) {\n      portfolioValue += commodity.lastPrice * quantity;\n      portfolioCost += commodity.buyPrice * quantity;\n    }\n  });\n  const unrealizedPnL = (portfolioValue - portfolioCost) / portfolioCost;\n  const volatilityImpact = volatility * 0.5;\n  const lossImpact = unrealizedPnL < -0.1 ? Math.abs(unrealizedPnL) * 0.3 : 0;\n  return Math.min(1, volatilityImpact + lossImpact);\n};\n\n// Generate trading decision for a trader\nexport const generateTradingDecision = (trader, commodities, marketData, recentTrades) => {\n  const decisions = [];\n\n  // Skip if trader is not active or outside trading hours\n  if (!trader.isActive) return decisions;\n  const currentHour = new Date().getHours();\n  if (currentHour < trader.marketHours.start || currentHour > trader.marketHours.end) {\n    return decisions;\n  }\n\n  // Update emotional state\n  const updatedTrader = updateTraderEmotions(trader, marketData, recentTrades);\n\n  // Generate decisions for each preferred commodity\n  updatedTrader.preferredCommodities.forEach(commodityId => {\n    const commodity = commodities.find(c => c.id === commodityId);\n    if (!commodity) return;\n    const decision = calculateTradeDecision(updatedTrader, commodity, marketData, recentTrades);\n    if (decision) {\n      decisions.push(decision);\n    }\n  });\n  return decisions;\n};\n\n// Calculate individual trade decision\nconst calculateTradeDecision = (trader, commodity, marketData, recentTrades) => {\n  const {\n    strategy,\n    emotionalState,\n    emotionalIntensity,\n    riskTolerance,\n    confidence,\n    capital,\n    portfolio,\n    activePositions,\n    maxPositions\n  } = trader;\n\n  // Check position limits\n  if (Object.keys(activePositions).length >= maxPositions && !activePositions[commodity.id]) {\n    return null;\n  }\n\n  // Calculate base signal from strategy\n  let signal = calculateStrategySignal(trader, commodity, marketData);\n\n  // Apply emotional adjustments\n  signal = applyEmotionalAdjustments(signal, trader, commodity, recentTrades);\n\n  // Calculate position size\n  const positionSize = calculatePositionSize(trader, commodity, signal);\n\n  // Determine action\n  let action = null;\n  let quantity = 0;\n  if (signal > 0.6 && positionSize > 0) {\n    action = 'BUY';\n    quantity = Math.floor(positionSize);\n  } else if (signal < 0.4 && activePositions[commodity.id]) {\n    action = 'SELL';\n    quantity = activePositions[commodity.id];\n  }\n  if (action && quantity > 0) {\n    return {\n      traderId: trader.id,\n      traderName: trader.name,\n      commodityId: commodity.id,\n      commodityName: commodity.name,\n      action,\n      quantity,\n      price: action === 'BUY' ? commodity.buyPrice : commodity.sellPrice,\n      signal,\n      emotionalState,\n      emotionalIntensity,\n      strategy,\n      timestamp: Date.now()\n    };\n  }\n  return null;\n};\n\n// Calculate strategy-based signal\nconst calculateStrategySignal = (trader, commodity, marketData) => {\n  const {\n    strategy\n  } = trader;\n  const {\n    priceHistory,\n    lastPrice,\n    buyPrice,\n    sellPrice\n  } = commodity;\n  switch (strategy) {\n    case STRATEGY_TYPES.MOMENTUM:\n      return calculateMomentumSignal(priceHistory);\n    case STRATEGY_TYPES.MEAN_REVERSION:\n      return calculateMeanReversionSignal(priceHistory);\n    case STRATEGY_TYPES.ARBITRAGE:\n      return calculateArbitrageSignal(buyPrice, sellPrice);\n    case STRATEGY_TYPES.SCALPING:\n      return calculateScalpingSignal(priceHistory);\n    case STRATEGY_TYPES.SWING:\n      return calculateSwingSignal(priceHistory);\n    case STRATEGY_TYPES.VALUE:\n      return calculateValueSignal(commodity);\n    case STRATEGY_TYPES.GROWTH:\n      return calculateGrowthSignal(priceHistory);\n    case STRATEGY_TYPES.CONTRARIAN:\n      return calculateContrarianSignal(priceHistory);\n    case STRATEGY_TYPES.TREND_FOLLOWING:\n      return calculateTrendFollowingSignal(priceHistory);\n    case STRATEGY_TYPES.BREAKOUT:\n      return calculateBreakoutSignal(priceHistory);\n    case STRATEGY_TYPES.SUPPLY_DEMAND:\n      return calculateSupplyDemandSignal(commodity);\n    default:\n      return 0.5;\n  }\n};\n\n// Strategy-specific signal calculations\nconst calculateMomentumSignal = priceHistory => {\n  if (priceHistory.length < 3) return 0.5;\n  const recent = priceHistory.slice(-3);\n  const older = priceHistory.slice(-6, -3);\n  if (older.length === 0) return 0.5;\n  const recentAvg = recent.reduce((sum, h) => sum + h.price, 0) / recent.length;\n  const olderAvg = older.reduce((sum, h) => sum + h.price, 0) / older.length;\n  const momentum = (recentAvg - olderAvg) / olderAvg;\n  return Math.max(0, Math.min(1, 0.5 + momentum * 2));\n};\nconst calculateMeanReversionSignal = priceHistory => {\n  if (priceHistory.length < 6) return 0.5;\n  const prices = priceHistory.map(h => h.price);\n  const mean = prices.reduce((sum, price) => sum + price, 0) / prices.length;\n  const currentPrice = prices[prices.length - 1];\n  const deviation = (currentPrice - mean) / mean;\n  return Math.max(0, Math.min(1, 0.5 - deviation * 2));\n};\nconst calculateArbitrageSignal = (buyPrice, sellPrice) => {\n  const spread = (sellPrice - buyPrice) / buyPrice;\n  return Math.max(0, Math.min(1, spread * 10));\n};\nconst calculateScalpingSignal = priceHistory => {\n  if (priceHistory.length < 2) return 0.5;\n  const recent = priceHistory.slice(-2);\n  const change = (recent[1].price - recent[0].price) / recent[0].price;\n  return Math.max(0, Math.min(1, 0.5 + change * 5));\n};\nconst calculateSwingSignal = priceHistory => {\n  if (priceHistory.length < 5) return 0.5;\n  const prices = priceHistory.map(h => h.price);\n  const trend = (prices[prices.length - 1] - prices[0]) / prices[0];\n  return Math.max(0, Math.min(1, 0.5 + trend * 2));\n};\nconst calculateValueSignal = commodity => {\n  const supplyDemandRatio = commodity.supply / commodity.demand;\n  return Math.max(0, Math.min(1, 1 - supplyDemandRatio / 10));\n};\nconst calculateGrowthSignal = priceHistory => {\n  if (priceHistory.length < 4) return 0.5;\n  const growth = priceHistory.slice(-4).map((h, i, arr) => {\n    if (i === 0) return 0;\n    return (h.price - arr[i - 1].price) / arr[i - 1].price;\n  }).slice(1);\n  const avgGrowth = growth.reduce((sum, g) => sum + g, 0) / growth.length;\n  return Math.max(0, Math.min(1, 0.5 + avgGrowth * 3));\n};\nconst calculateContrarianSignal = priceHistory => {\n  if (priceHistory.length < 3) return 0.5;\n  const recent = priceHistory.slice(-3);\n  const trend = (recent[2].price - recent[0].price) / recent[0].price;\n  return Math.max(0, Math.min(1, 0.5 - trend * 2));\n};\nconst calculateTrendFollowingSignal = priceHistory => {\n  if (priceHistory.length < 4) return 0.5;\n  const prices = priceHistory.map(h => h.price);\n  const trend = (prices[prices.length - 1] - prices[0]) / prices[0];\n  return Math.max(0, Math.min(1, 0.5 + trend * 1.5));\n};\nconst calculateBreakoutSignal = priceHistory => {\n  if (priceHistory.length < 6) return 0.5;\n  const prices = priceHistory.map(h => h.price);\n  const high = Math.max(...prices.slice(0, -1));\n  const current = prices[prices.length - 1];\n  if (current > high) {\n    return Math.min(1, 0.7 + (current - high) / high);\n  }\n  return 0.3;\n};\n\n// Apply emotional adjustments to signal\nconst applyEmotionalAdjustments = (signal, trader, commodity, recentTrades) => {\n  const {\n    emotionalState,\n    emotionalIntensity,\n    fomoSusceptibility,\n    panicSusceptibility\n  } = trader;\n  let adjustedSignal = signal;\n  switch (emotionalState) {\n    case EMOTIONAL_STATES.FOMO:\n      // FOMO makes traders more likely to buy\n      adjustedSignal += emotionalIntensity * 0.3;\n      break;\n    case EMOTIONAL_STATES.PANIC:\n      // Panic makes traders more likely to sell\n      adjustedSignal -= emotionalIntensity * 0.4;\n      break;\n    case EMOTIONAL_STATES.GREEDY:\n      // Greed makes traders more aggressive\n      adjustedSignal += emotionalIntensity * 0.2;\n      break;\n    case EMOTIONAL_STATES.FEARFUL:\n      // Fear makes traders more conservative\n      adjustedSignal -= emotionalIntensity * 0.3;\n      break;\n    case EMOTIONAL_STATES.EXCITED:\n      // Excitement increases confidence\n      adjustedSignal += emotionalIntensity * 0.1;\n      break;\n  }\n\n  // Apply FOMO from recent trades\n  const fomoAdjustment = calculateFOMOAdjustment(recentTrades, commodity, fomoSusceptibility);\n  adjustedSignal += fomoAdjustment;\n\n  // Apply panic from volatility\n  const panicAdjustment = calculatePanicAdjustment(commodity, panicSusceptibility);\n  adjustedSignal += panicAdjustment;\n  return Math.max(0, Math.min(1, adjustedSignal));\n};\n\n// Calculate FOMO adjustment from recent trades\nconst calculateFOMOAdjustment = (recentTrades, commodity, fomoSusceptibility) => {\n  const commodityTrades = recentTrades.filter(trade => trade.commodity.toLowerCase().includes(commodity.name.toLowerCase().substring(0, 3)));\n  if (commodityTrades.length === 0) return 0;\n  const buyVolume = commodityTrades.filter(trade => trade.action === 'BUY').reduce((sum, trade) => sum + trade.quantity, 0);\n  const sellVolume = commodityTrades.filter(trade => trade.action === 'SELL').reduce((sum, trade) => sum + trade.quantity, 0);\n  const totalVolume = buyVolume + sellVolume;\n  if (totalVolume === 0) return 0;\n  const buyRatio = buyVolume / totalVolume;\n  return (buyRatio - 0.5) * fomoSusceptibility * 0.2;\n};\n\n// Calculate panic adjustment from volatility\nconst calculatePanicAdjustment = (commodity, panicSusceptibility) => {\n  const priceHistory = commodity.priceHistory;\n  if (priceHistory.length < 2) return 0;\n  const recentChanges = [];\n  for (let i = 1; i < priceHistory.length; i++) {\n    const change = Math.abs(priceHistory[i].price - priceHistory[i - 1].price) / priceHistory[i - 1].price;\n    recentChanges.push(change);\n  }\n  const volatility = recentChanges.reduce((sum, change) => sum + change, 0) / recentChanges.length;\n  return -volatility * panicSusceptibility * 0.3;\n};\n\n// Calculate position size\nconst calculatePositionSize = (trader, commodity, signal) => {\n  const {\n    capital,\n    riskTolerance,\n    emotionalIntensity,\n    emotionalState\n  } = trader;\n\n  // Base position size based on signal strength\n  let baseSize = Math.abs(signal - 0.5) * 2; // 0-1 scale\n\n  // Adjust for risk tolerance\n  baseSize *= riskTolerance;\n\n  // Adjust for emotional state\n  switch (emotionalState) {\n    case EMOTIONAL_STATES.FOMO:\n    case EMOTIONAL_STATES.GREEDY:\n      baseSize *= 1 + emotionalIntensity * 0.5;\n      break;\n    case EMOTIONAL_STATES.PANIC:\n    case EMOTIONAL_STATES.FEARFUL:\n      baseSize *= 1 - emotionalIntensity * 0.7;\n      break;\n  }\n\n  // Calculate actual quantity\n  const maxQuantity = Math.floor(capital * 0.1 / commodity.lastPrice); // Max 10% of capital\n  const quantity = Math.floor(baseSize * maxQuantity);\n  return Math.max(1, Math.min(quantity, 100)); // Between 1 and 100\n};\n\n// Execute trade and update trader state\nexport const executeTrade = (trader, decision, commodities) => {\n  const commodity = commodities.find(c => c.id === decision.commodityId);\n  if (!commodity) return trader;\n  const tradeValue = decision.quantity * decision.price;\n  const updatedTrader = {\n    ...trader\n  };\n  if (decision.action === 'BUY') {\n    // Update capital\n    updatedTrader.capital -= tradeValue;\n\n    // Update portfolio\n    updatedTrader.portfolio[commodity.id] = (updatedTrader.portfolio[commodity.id] || 0) + decision.quantity;\n\n    // Update active positions\n    updatedTrader.activePositions[commodity.id] = decision.quantity;\n  } else if (decision.action === 'SELL') {\n    // Update capital\n    updatedTrader.capital += tradeValue;\n\n    // Update portfolio\n    updatedTrader.portfolio[commodity.id] = Math.max(0, (updatedTrader.portfolio[commodity.id] || 0) - decision.quantity);\n\n    // Remove from active positions if sold all\n    if (updatedTrader.portfolio[commodity.id] === 0) {\n      delete updatedTrader.activePositions[commodity.id];\n    } else {\n      updatedTrader.activePositions[commodity.id] = updatedTrader.portfolio[commodity.id];\n    }\n  }\n\n  // Update trade history\n  updatedTrader.tradeHistory.push({\n    ...decision,\n    timestamp: Date.now(),\n    commodityPrice: commodity.lastPrice\n  });\n\n  // Keep only last 100 trades\n  if (updatedTrader.tradeHistory.length > 100) {\n    updatedTrader.tradeHistory = updatedTrader.tradeHistory.slice(-100);\n  }\n\n  // Update last trade time\n  updatedTrader.lastTradeTime = Date.now();\n  return updatedTrader;\n};\n\n// Update trader performance metrics\nexport const updateTraderPerformance = trader => {\n  const {\n    tradeHistory,\n    capital\n  } = trader;\n  if (tradeHistory.length === 0) return trader;\n  const updatedTrader = {\n    ...trader\n  };\n  const metrics = updatedTrader.performanceMetrics;\n\n  // Calculate basic metrics\n  metrics.totalTrades = tradeHistory.length;\n\n  // Calculate P&L\n  let totalPnL = 0;\n  let winningTrades = 0;\n  let losingTrades = 0;\n  let totalWins = 0;\n  let totalLosses = 0;\n  tradeHistory.forEach(trade => {\n    if (trade.action === 'SELL') {\n      const buyTrade = tradeHistory.find(t => t.action === 'BUY' && t.commodityId === trade.commodityId && t.timestamp < trade.timestamp);\n      if (buyTrade) {\n        const pnl = (trade.price - buyTrade.price) * trade.quantity;\n        totalPnL += pnl;\n        if (pnl > 0) {\n          winningTrades++;\n          totalWins += pnl;\n        } else {\n          losingTrades++;\n          totalLosses += Math.abs(pnl);\n        }\n      }\n    }\n  });\n  metrics.winningTrades = winningTrades;\n  metrics.losingTrades = losingTrades;\n  metrics.averageWin = winningTrades > 0 ? totalWins / winningTrades : 0;\n  metrics.averageLoss = losingTrades > 0 ? totalLosses / losingTrades : 0;\n  metrics.winRate = metrics.totalTrades > 0 ? winningTrades / metrics.totalTrades : 0;\n  metrics.profitFactor = totalLosses > 0 ? totalWins / totalLosses : 0;\n  updatedTrader.profitLoss = totalPnL;\n  updatedTrader.successRate = metrics.winRate;\n  return updatedTrader;\n};","map":{"version":3,"names":["STRATEGY_TYPES","MOMENTUM","MEAN_REVERSION","ARBITRAGE","SCALPING","SWING","VALUE","GROWTH","CONTRARIAN","TREND_FOLLOWING","BREAKOUT","SUPPLY_DEMAND","EMOTIONAL_STATES","CALM","EXCITED","FEARFUL","GREEDY","PANIC","FOMO","RISK_LEVELS","CONSERVATIVE","MODERATE","AGGRESSIVE","EXTREME","generateAITraders","traders","names","i","trader","id","name","length","Math","floor","strategy","Object","values","riskTolerance","emotionalState","emotionalIntensity","random","fomoSusceptibility","panicSusceptibility","momentumSensitivity","confidence","capital","portfolio","tradeHistory","lastTradeTime","Date","now","successRate","profitLoss","activePositions","maxPositions","preferredCommodities","marketSentiment","volatilityTolerance","liquidityPreference","newsSensitivity","technicalAnalysisWeight","fundamentalAnalysisWeight","emotionalDecisionWeight","rationalDecisionWeight","herdInstinct","contrarianTendency","patience","aggressiveness","stopLossThreshold","takeProfitThreshold","maxDrawdown","rebalancingFrequency","diversificationTarget","leveragePreference","shortingPreference","dayTradingPreference","swingTradingPreference","positionSizingMethod","marketHours","start","end","timezone","lastUpdate","isActive","performanceMetrics","totalTrades","winningTrades","losingTrades","averageWin","averageLoss","largestWin","largestLoss","consecutiveWins","consecutiveLosses","sharpeRatio","winRate","profitFactor","getPreferredCommodities","push","commodityPreferences","updateTraderEmotions","marketData","recentTrades","commodities","marketTrends","volatility","calculateMarketVolatility","momentum","calculateMarketMomentum","fomoTrigger","calculateFOMOTrigger","panicTrigger","calculatePanicTrigger","newEmotionalState","newEmotionalIntensity","min","max","priceChanges","map","commodity","history","priceHistory","changes","change","abs","price","reduce","sum","momentums","recent","slice","older","recentAvg","h","olderAvg","buyVolume","filter","trade","action","quantity","sellVolume","totalVolume","buyRatio","volumeIntensity","portfolioValue","portfolioCost","entries","forEach","commodityId","find","c","lastPrice","buyPrice","unrealizedPnL","volatilityImpact","lossImpact","generateTradingDecision","decisions","currentHour","getHours","updatedTrader","decision","calculateTradeDecision","keys","signal","calculateStrategySignal","applyEmotionalAdjustments","positionSize","calculatePositionSize","traderId","traderName","commodityName","sellPrice","timestamp","calculateMomentumSignal","calculateMeanReversionSignal","calculateArbitrageSignal","calculateScalpingSignal","calculateSwingSignal","calculateValueSignal","calculateGrowthSignal","calculateContrarianSignal","calculateTrendFollowingSignal","calculateBreakoutSignal","calculateSupplyDemandSignal","prices","mean","currentPrice","deviation","spread","trend","supplyDemandRatio","supply","demand","growth","arr","avgGrowth","g","high","current","adjustedSignal","fomoAdjustment","calculateFOMOAdjustment","panicAdjustment","calculatePanicAdjustment","commodityTrades","toLowerCase","includes","substring","recentChanges","baseSize","maxQuantity","executeTrade","tradeValue","commodityPrice","updateTraderPerformance","metrics","totalPnL","totalWins","totalLosses","buyTrade","t","pnl"],"sources":["F:/Windsurf/Native/GTC 3/src/aiTraders.js"],"sourcesContent":["// AI Trading System with 200 traders\r\n// Each trader has different strategies and emotional responses\r\n\r\n// Trading Strategy Types\r\nexport const STRATEGY_TYPES = {\r\n  MOMENTUM: 'momentum',\r\n  MEAN_REVERSION: 'mean_reversion',\r\n  ARBITRAGE: 'arbitrage',\r\n  SCALPING: 'scalping',\r\n  SWING: 'swing',\r\n  VALUE: 'value',\r\n  GROWTH: 'growth',\r\n  CONTRARIAN: 'contrarian',\r\n  TREND_FOLLOWING: 'trend_following',\r\n  BREAKOUT: 'breakout',\r\n  SUPPLY_DEMAND: 'supply_demand'\r\n};\r\n\r\n// Emotional States\r\nexport const EMOTIONAL_STATES = {\r\n  CALM: 'calm',\r\n  EXCITED: 'excited',\r\n  FEARFUL: 'fearful',\r\n  GREEDY: 'greedy',\r\n  PANIC: 'panic',\r\n  FOMO: 'fomo'\r\n};\r\n\r\n// Risk Tolerance Levels\r\nexport const RISK_LEVELS = {\r\n  CONSERVATIVE: 0.2,\r\n  MODERATE: 0.5,\r\n  AGGRESSIVE: 0.8,\r\n  EXTREME: 1.0\r\n};\r\n\r\n// Generate 200 unique AI traders\r\nexport const generateAITraders = () => {\r\n  const traders = [];\r\n  const names = [\r\n    'AlphaBot', 'QuantumTrader', 'NeuralNet', 'CyberTrader', 'DataMiner', 'AlgoMaster',\r\n    'SmartBot', 'TradeAI', 'MarketMind', 'ProfitBot', 'CryptoKing', 'StockMaster',\r\n    'TrendHunter', 'MomentumBot', 'ArbitrageAI', 'ScalpBot', 'SwingTrader', 'ValueBot',\r\n    'GrowthAI', 'ContrarianBot', 'BreakoutAI', 'SignalMaster', 'PatternBot', 'VolatilityAI',\r\n    'LiquidityBot', 'SpreadHunter', 'GapTrader', 'NewsBot', 'SentimentAI', 'VolumeBot',\r\n    'PriceAction', 'TechnicalAI', 'FundamentalBot', 'MacroTrader', 'MicroBot', 'SectorAI',\r\n    'IndexBot', 'CommodityAI', 'CurrencyBot', 'BondTrader', 'DerivativeAI', 'OptionBot',\r\n    'FutureTrader', 'SwapAI', 'HedgeBot', 'PortfolioAI', 'RiskBot', 'BalanceTrader',\r\n    'DiversifyAI', 'ConcentrateBot', 'LeverageAI', 'MarginBot', 'ShortTrader', 'LongAI',\r\n    'BullBot', 'BearAI', 'NeutralTrader', 'BiasBot', 'EmotionAI', 'LogicBot',\r\n    'InstinctAI', 'AnalysisBot', 'ResearchAI', 'BacktestBot', 'ForwardAI', 'PredictBot',\r\n    'ForecastAI', 'ProjectBot', 'EstimateAI', 'CalculateBot', 'ComputeAI', 'ProcessBot',\r\n    'ExecuteAI', 'ImplementBot', 'DeployAI', 'LaunchBot', 'StartAI', 'InitBot',\r\n    'BeginAI', 'CommenceBot', 'TriggerAI', 'ActivateBot', 'EnableAI', 'PowerBot',\r\n    'EnergyAI', 'ForceBot', 'DriveAI', 'PushBot', 'PullAI', 'DrawBot',\r\n    'AttractAI', 'RepelBot', 'RejectAI', 'AcceptBot', 'ApproveAI', 'DenyBot',\r\n    'BlockAI', 'AllowBot', 'PermitAI', 'RestrictBot', 'LimitAI', 'BoundBot',\r\n    'CapAI', 'FloorBot', 'CeilingAI', 'BaseBot', 'PeakAI', 'ValleyBot',\r\n    'SummitAI', 'DepthBot', 'HeightAI', 'WidthBot', 'LengthAI', 'SizeBot',\r\n    'ScaleAI', 'ScopeBot', 'RangeAI', 'SpanBot', 'ExtentAI', 'ReachBot',\r\n    'GraspAI', 'HoldBot', 'GripAI', 'ClutchBot', 'SeizeAI', 'CaptureBot',\r\n    'SnatchAI', 'GrabBot', 'TakeAI', 'GiveBot', 'OfferAI', 'BidBot',\r\n    'AskAI', 'QuoteBot', 'PriceAI', 'CostBot', 'ValueAI', 'WorthBot',\r\n    'MeritAI', 'DeserveBot', 'EarnAI', 'GainBot', 'ProfitAI', 'LossBot',\r\n    'WinAI', 'LoseBot', 'BeatAI', 'DefeatBot', 'ConquerAI', 'SurrenderBot',\r\n    'YieldAI', 'ResistBot', 'FightAI', 'PeaceBot', 'WarAI', 'BattleBot',\r\n    'CombatAI', 'StruggleBot', 'StriveAI', 'AchieveBot', 'SucceedAI', 'FailBot',\r\n    'SucceedAI', 'FailBot', 'WinAI', 'LoseBot', 'RiseAI', 'FallBot',\r\n    'ClimbAI', 'DescendBot', 'AscendAI', 'DropBot', 'JumpAI', 'LeapBot',\r\n    'BoundAI', 'SpringBot', 'BounceAI', 'ReboundBot', 'RecoverAI', 'HealBot',\r\n    'MendAI', 'FixBot', 'RepairAI', 'BreakBot', 'DamageAI', 'HarmBot',\r\n    'HurtAI', 'InjureBot', 'WoundAI', 'CutBot', 'SliceAI', 'ChopBot',\r\n    'SplitAI', 'DivideBot', 'MultiplyAI', 'AddBot', 'SumAI', 'TotalBot',\r\n    'CountAI', 'NumberBot', 'DigitAI', 'FigureBot', 'CalculateAI', 'ComputeBot',\r\n    'ProcessAI', 'HandleBot', 'ManageAI', 'ControlBot', 'DirectAI', 'GuideBot',\r\n    'LeadAI', 'FollowBot', 'TrackAI', 'TraceBot', 'FindAI', 'SearchBot',\r\n    'SeekAI', 'LookBot', 'WatchAI', 'ObserveBot', 'MonitorAI', 'CheckBot',\r\n    'VerifyAI', 'ConfirmBot', 'ValidateAI', 'TestBot', 'TrialAI', 'ExperimentBot'\r\n  ];\r\n\r\n  for (let i = 0; i < 200; i++) {\r\n    const trader = {\r\n      id: i + 1,\r\n      name: names[i % names.length] + (Math.floor(i / names.length) + 1),\r\n      strategy: Object.values(STRATEGY_TYPES)[i % Object.values(STRATEGY_TYPES).length],\r\n      riskTolerance: Object.values(RISK_LEVELS)[i % Object.values(RISK_LEVELS).length],\r\n      emotionalState: EMOTIONAL_STATES.CALM,\r\n      emotionalIntensity: Math.random(), // 0-1 scale\r\n      fomoSusceptibility: Math.random(), // How easily they get FOMO\r\n      panicSusceptibility: Math.random(), // How easily they panic\r\n      momentumSensitivity: Math.random(), // How much they follow momentum\r\n      confidence: 0.5, // Current confidence level\r\n      capital: 50000 + Math.random() * 150000, // Starting capital\r\n      portfolio: {},\r\n      tradeHistory: [],\r\n      lastTradeTime: Date.now(),\r\n      successRate: 0.5,\r\n      profitLoss: 0,\r\n      activePositions: {},\r\n      maxPositions: 3 + Math.floor(Math.random() * 5), // 3-7 positions\r\n      preferredCommodities: [], // Will be set based on strategy\r\n      marketSentiment: 0, // -1 to 1 (bearish to bullish)\r\n      volatilityTolerance: Math.random(),\r\n      liquidityPreference: Math.random(),\r\n      newsSensitivity: Math.random(),\r\n      technicalAnalysisWeight: Math.random(),\r\n      fundamentalAnalysisWeight: Math.random(),\r\n      emotionalDecisionWeight: Math.random(),\r\n      rationalDecisionWeight: 1 - Math.random() * 0.3, // 0.7-1.0\r\n      herdInstinct: Math.random(),\r\n      contrarianTendency: Math.random(),\r\n      patience: Math.random(),\r\n      aggressiveness: Math.random(),\r\n      stopLossThreshold: 0.05 + Math.random() * 0.15, // 5-20%\r\n      takeProfitThreshold: 0.1 + Math.random() * 0.2, // 10-30%\r\n      maxDrawdown: 0.1 + Math.random() * 0.2, // 10-30%\r\n      rebalancingFrequency: 1 + Math.floor(Math.random() * 7), // 1-7 days\r\n      diversificationTarget: 0.3 + Math.random() * 0.4, // 30-70% in top position\r\n      leveragePreference: Math.random() * 0.5, // 0-50% leverage\r\n      shortingPreference: Math.random(),\r\n      dayTradingPreference: Math.random(),\r\n      swingTradingPreference: Math.random(),\r\n      positionSizingMethod: ['fixed', 'kelly', 'volatility', 'equal'][Math.floor(Math.random() * 4)],\r\n      marketHours: {\r\n        start: 6 + Math.floor(Math.random() * 6), // 6 AM - 12 PM\r\n        end: 12 + Math.floor(Math.random() * 12) // 12 PM - 12 AM\r\n      },\r\n      timezone: Math.floor(Math.random() * 24),\r\n      lastUpdate: Date.now(),\r\n      isActive: true,\r\n      performanceMetrics: {\r\n        totalTrades: 0,\r\n        winningTrades: 0,\r\n        losingTrades: 0,\r\n        averageWin: 0,\r\n        averageLoss: 0,\r\n        largestWin: 0,\r\n        largestLoss: 0,\r\n        consecutiveWins: 0,\r\n        consecutiveLosses: 0,\r\n        sharpeRatio: 0,\r\n        maxDrawdown: 0,\r\n        winRate: 0,\r\n        profitFactor: 0\r\n      }\r\n    };\r\n\r\n    // Set preferred commodities based on strategy\r\n    trader.preferredCommodities = getPreferredCommodities(trader.strategy);\r\n    \r\n    traders.push(trader);\r\n  }\r\n\r\n  return traders;\r\n};\r\n\r\n// Get preferred commodities based on trading strategy\r\nconst getPreferredCommodities = (strategy) => {\r\n  const commodityPreferences = {\r\n    [STRATEGY_TYPES.MOMENTUM]: ['quantum-crystals', 'dark-matter', 'plasma-cells'],\r\n    [STRATEGY_TYPES.MEAN_REVERSION]: ['neural-processors', 'antimatter-cores'],\r\n    [STRATEGY_TYPES.ARBITRAGE]: ['quantum-crystals', 'dark-matter', 'neural-processors'],\r\n    [STRATEGY_TYPES.SCALPING]: ['plasma-cells', 'quantum-crystals'],\r\n    [STRATEGY_TYPES.SWING]: ['antimatter-cores', 'fusion-reactors'],\r\n    [STRATEGY_TYPES.VALUE]: ['neural-processors', 'fusion-reactors'],\r\n    [STRATEGY_TYPES.GROWTH]: ['quantum-crystals', 'dark-matter'],\r\n    [STRATEGY_TYPES.CONTRARIAN]: ['antimatter-cores', 'plasma-cells'],\r\n    [STRATEGY_TYPES.TREND_FOLLOWING]: ['quantum-crystals', 'dark-matter', 'neural-processors'],\r\n    [STRATEGY_TYPES.BREAKOUT]: ['plasma-cells', 'fusion-reactors']\r\n  };\r\n  \r\n  return commodityPreferences[strategy] || ['quantum-crystals', 'dark-matter'];\r\n};\r\n\r\n// Update trader emotional state based on market conditions\r\nexport const updateTraderEmotions = (trader, marketData, recentTrades) => {\r\n  const { commodities, marketTrends } = marketData;\r\n  \r\n  // Calculate market volatility\r\n  const volatility = calculateMarketVolatility(commodities);\r\n  \r\n  // Calculate momentum\r\n  const momentum = calculateMarketMomentum(commodities);\r\n  \r\n  // Calculate FOMO trigger\r\n  const fomoTrigger = calculateFOMOTrigger(recentTrades, trader);\r\n  \r\n  // Calculate panic trigger\r\n  const panicTrigger = calculatePanicTrigger(volatility, trader.portfolio, commodities);\r\n  \r\n  // Update emotional state\r\n  let newEmotionalState = trader.emotionalState;\r\n  let newEmotionalIntensity = trader.emotionalIntensity;\r\n  \r\n  // FOMO Logic\r\n  if (fomoTrigger > trader.fomoSusceptibility * 0.8) {\r\n    newEmotionalState = EMOTIONAL_STATES.FOMO;\r\n    newEmotionalIntensity = Math.min(1, fomoTrigger);\r\n  }\r\n  // Panic Logic\r\n  else if (panicTrigger > trader.panicSusceptibility * 0.7) {\r\n    newEmotionalState = EMOTIONAL_STATES.PANIC;\r\n    newEmotionalIntensity = Math.min(1, panicTrigger);\r\n  }\r\n  // Greed Logic\r\n  else if (momentum > 0.6 && trader.profitLoss > 0) {\r\n    newEmotionalState = EMOTIONAL_STATES.GREEDY;\r\n    newEmotionalIntensity = Math.min(1, momentum * 0.8);\r\n  }\r\n  // Fear Logic\r\n  else if (volatility > 0.7 || trader.profitLoss < -trader.capital * 0.1) {\r\n    newEmotionalState = EMOTIONAL_STATES.FEARFUL;\r\n    newEmotionalIntensity = Math.min(1, volatility * 0.9);\r\n  }\r\n  // Excitement Logic\r\n  else if (momentum > 0.4 && trader.profitLoss > trader.capital * 0.05) {\r\n    newEmotionalState = EMOTIONAL_STATES.EXCITED;\r\n    newEmotionalIntensity = Math.min(1, momentum * 0.6);\r\n  }\r\n  // Calm Logic\r\n  else {\r\n    newEmotionalState = EMOTIONAL_STATES.CALM;\r\n    newEmotionalIntensity = Math.max(0, newEmotionalIntensity - 0.1);\r\n  }\r\n  \r\n  return {\r\n    ...trader,\r\n    emotionalState: newEmotionalState,\r\n    emotionalIntensity: newEmotionalIntensity\r\n  };\r\n};\r\n\r\n// Calculate market volatility\r\nconst calculateMarketVolatility = (commodities) => {\r\n  const priceChanges = commodities.map(commodity => {\r\n    const history = commodity.priceHistory;\r\n    if (history.length < 2) return 0;\r\n    \r\n    const changes = [];\r\n    for (let i = 1; i < history.length; i++) {\r\n      const change = Math.abs(history[i].price - history[i-1].price) / history[i-1].price;\r\n      changes.push(change);\r\n    }\r\n    \r\n    return changes.reduce((sum, change) => sum + change, 0) / changes.length;\r\n  });\r\n  \r\n  return priceChanges.reduce((sum, volatility) => sum + volatility, 0) / priceChanges.length;\r\n};\r\n\r\n// Calculate market momentum\r\nconst calculateMarketMomentum = (commodities) => {\r\n  const momentums = commodities.map(commodity => {\r\n    const history = commodity.priceHistory;\r\n    if (history.length < 3) return 0;\r\n    \r\n    const recent = history.slice(-3);\r\n    const older = history.slice(-6, -3);\r\n    \r\n    if (older.length === 0) return 0;\r\n    \r\n    const recentAvg = recent.reduce((sum, h) => sum + h.price, 0) / recent.length;\r\n    const olderAvg = older.reduce((sum, h) => sum + h.price, 0) / older.length;\r\n    \r\n    return (recentAvg - olderAvg) / olderAvg;\r\n  });\r\n  \r\n  return momentums.reduce((sum, momentum) => sum + momentum, 0) / momentums.length;\r\n};\r\n\r\n// Calculate FOMO trigger\r\nconst calculateFOMOTrigger = (recentTrades, trader) => {\r\n  if (recentTrades.length === 0) return 0;\r\n  \r\n  const buyVolume = recentTrades\r\n    .filter(trade => trade.action === 'BUY')\r\n    .reduce((sum, trade) => sum + trade.quantity, 0);\r\n  \r\n  const sellVolume = recentTrades\r\n    .filter(trade => trade.action === 'SELL')\r\n    .reduce((sum, trade) => sum + trade.quantity, 0);\r\n  \r\n  const totalVolume = buyVolume + sellVolume;\r\n  if (totalVolume === 0) return 0;\r\n  \r\n  const buyRatio = buyVolume / totalVolume;\r\n  const volumeIntensity = Math.min(1, totalVolume / 1000); // Normalize volume\r\n  \r\n  return buyRatio * volumeIntensity * trader.fomoSusceptibility;\r\n};\r\n\r\n// Calculate panic trigger\r\nconst calculatePanicTrigger = (volatility, portfolio, commodities) => {\r\n  let portfolioValue = 0;\r\n  let portfolioCost = 0;\r\n  \r\n  Object.entries(portfolio).forEach(([commodityId, quantity]) => {\r\n    const commodity = commodities.find(c => c.id === commodityId);\r\n    if (commodity) {\r\n      portfolioValue += commodity.lastPrice * quantity;\r\n      portfolioCost += commodity.buyPrice * quantity;\r\n    }\r\n  });\r\n  \r\n  const unrealizedPnL = (portfolioValue - portfolioCost) / portfolioCost;\r\n  const volatilityImpact = volatility * 0.5;\r\n  const lossImpact = unrealizedPnL < -0.1 ? Math.abs(unrealizedPnL) * 0.3 : 0;\r\n  \r\n  return Math.min(1, volatilityImpact + lossImpact);\r\n};\r\n\r\n// Generate trading decision for a trader\r\nexport const generateTradingDecision = (trader, commodities, marketData, recentTrades) => {\r\n  const decisions = [];\r\n  \r\n  // Skip if trader is not active or outside trading hours\r\n  if (!trader.isActive) return decisions;\r\n  \r\n  const currentHour = new Date().getHours();\r\n  if (currentHour < trader.marketHours.start || currentHour > trader.marketHours.end) {\r\n    return decisions;\r\n  }\r\n  \r\n  // Update emotional state\r\n  const updatedTrader = updateTraderEmotions(trader, marketData, recentTrades);\r\n  \r\n  // Generate decisions for each preferred commodity\r\n  updatedTrader.preferredCommodities.forEach(commodityId => {\r\n    const commodity = commodities.find(c => c.id === commodityId);\r\n    if (!commodity) return;\r\n    \r\n    const decision = calculateTradeDecision(updatedTrader, commodity, marketData, recentTrades);\r\n    if (decision) {\r\n      decisions.push(decision);\r\n    }\r\n  });\r\n  \r\n  return decisions;\r\n};\r\n\r\n// Calculate individual trade decision\r\nconst calculateTradeDecision = (trader, commodity, marketData, recentTrades) => {\r\n  const {\r\n    strategy,\r\n    emotionalState,\r\n    emotionalIntensity,\r\n    riskTolerance,\r\n    confidence,\r\n    capital,\r\n    portfolio,\r\n    activePositions,\r\n    maxPositions\r\n  } = trader;\r\n  \r\n  // Check position limits\r\n  if (Object.keys(activePositions).length >= maxPositions && !activePositions[commodity.id]) {\r\n    return null;\r\n  }\r\n  \r\n  // Calculate base signal from strategy\r\n  let signal = calculateStrategySignal(trader, commodity, marketData);\r\n  \r\n  // Apply emotional adjustments\r\n  signal = applyEmotionalAdjustments(signal, trader, commodity, recentTrades);\r\n  \r\n  // Calculate position size\r\n  const positionSize = calculatePositionSize(trader, commodity, signal);\r\n  \r\n  // Determine action\r\n  let action = null;\r\n  let quantity = 0;\r\n  \r\n  if (signal > 0.6 && positionSize > 0) {\r\n    action = 'BUY';\r\n    quantity = Math.floor(positionSize);\r\n  } else if (signal < 0.4 && activePositions[commodity.id]) {\r\n    action = 'SELL';\r\n    quantity = activePositions[commodity.id];\r\n  }\r\n  \r\n  if (action && quantity > 0) {\r\n    return {\r\n      traderId: trader.id,\r\n      traderName: trader.name,\r\n      commodityId: commodity.id,\r\n      commodityName: commodity.name,\r\n      action,\r\n      quantity,\r\n      price: action === 'BUY' ? commodity.buyPrice : commodity.sellPrice,\r\n      signal,\r\n      emotionalState,\r\n      emotionalIntensity,\r\n      strategy,\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\n// Calculate strategy-based signal\r\nconst calculateStrategySignal = (trader, commodity, marketData) => {\r\n  const { strategy } = trader;\r\n  const { priceHistory, lastPrice, buyPrice, sellPrice } = commodity;\r\n  \r\n  switch (strategy) {\r\n    case STRATEGY_TYPES.MOMENTUM:\r\n      return calculateMomentumSignal(priceHistory);\r\n    \r\n    case STRATEGY_TYPES.MEAN_REVERSION:\r\n      return calculateMeanReversionSignal(priceHistory);\r\n    \r\n    case STRATEGY_TYPES.ARBITRAGE:\r\n      return calculateArbitrageSignal(buyPrice, sellPrice);\r\n    \r\n    case STRATEGY_TYPES.SCALPING:\r\n      return calculateScalpingSignal(priceHistory);\r\n    \r\n    case STRATEGY_TYPES.SWING:\r\n      return calculateSwingSignal(priceHistory);\r\n    \r\n    case STRATEGY_TYPES.VALUE:\r\n      return calculateValueSignal(commodity);\r\n    \r\n    case STRATEGY_TYPES.GROWTH:\r\n      return calculateGrowthSignal(priceHistory);\r\n    \r\n    case STRATEGY_TYPES.CONTRARIAN:\r\n      return calculateContrarianSignal(priceHistory);\r\n    \r\n    case STRATEGY_TYPES.TREND_FOLLOWING:\r\n      return calculateTrendFollowingSignal(priceHistory);\r\n    \r\n    case STRATEGY_TYPES.BREAKOUT:\r\n      return calculateBreakoutSignal(priceHistory);\r\n    \r\n    case STRATEGY_TYPES.SUPPLY_DEMAND:\r\n      return calculateSupplyDemandSignal(commodity);\r\n    \r\n    default:\r\n      return 0.5;\r\n  }\r\n};\r\n\r\n// Strategy-specific signal calculations\r\nconst calculateMomentumSignal = (priceHistory) => {\r\n  if (priceHistory.length < 3) return 0.5;\r\n  \r\n  const recent = priceHistory.slice(-3);\r\n  const older = priceHistory.slice(-6, -3);\r\n  \r\n  if (older.length === 0) return 0.5;\r\n  \r\n  const recentAvg = recent.reduce((sum, h) => sum + h.price, 0) / recent.length;\r\n  const olderAvg = older.reduce((sum, h) => sum + h.price, 0) / older.length;\r\n  \r\n  const momentum = (recentAvg - olderAvg) / olderAvg;\r\n  return Math.max(0, Math.min(1, 0.5 + momentum * 2));\r\n};\r\n\r\nconst calculateMeanReversionSignal = (priceHistory) => {\r\n  if (priceHistory.length < 6) return 0.5;\r\n  \r\n  const prices = priceHistory.map(h => h.price);\r\n  const mean = prices.reduce((sum, price) => sum + price, 0) / prices.length;\r\n  const currentPrice = prices[prices.length - 1];\r\n  \r\n  const deviation = (currentPrice - mean) / mean;\r\n  return Math.max(0, Math.min(1, 0.5 - deviation * 2));\r\n};\r\n\r\nconst calculateArbitrageSignal = (buyPrice, sellPrice) => {\r\n  const spread = (sellPrice - buyPrice) / buyPrice;\r\n  return Math.max(0, Math.min(1, spread * 10));\r\n};\r\n\r\nconst calculateScalpingSignal = (priceHistory) => {\r\n  if (priceHistory.length < 2) return 0.5;\r\n  \r\n  const recent = priceHistory.slice(-2);\r\n  const change = (recent[1].price - recent[0].price) / recent[0].price;\r\n  \r\n  return Math.max(0, Math.min(1, 0.5 + change * 5));\r\n};\r\n\r\nconst calculateSwingSignal = (priceHistory) => {\r\n  if (priceHistory.length < 5) return 0.5;\r\n  \r\n  const prices = priceHistory.map(h => h.price);\r\n  const trend = (prices[prices.length - 1] - prices[0]) / prices[0];\r\n  \r\n  return Math.max(0, Math.min(1, 0.5 + trend * 2));\r\n};\r\n\r\nconst calculateValueSignal = (commodity) => {\r\n  const supplyDemandRatio = commodity.supply / commodity.demand;\r\n  return Math.max(0, Math.min(1, 1 - supplyDemandRatio / 10));\r\n};\r\n\r\nconst calculateGrowthSignal = (priceHistory) => {\r\n  if (priceHistory.length < 4) return 0.5;\r\n  \r\n  const growth = priceHistory.slice(-4).map((h, i, arr) => {\r\n    if (i === 0) return 0;\r\n    return (h.price - arr[i-1].price) / arr[i-1].price;\r\n  }).slice(1);\r\n  \r\n  const avgGrowth = growth.reduce((sum, g) => sum + g, 0) / growth.length;\r\n  return Math.max(0, Math.min(1, 0.5 + avgGrowth * 3));\r\n};\r\n\r\nconst calculateContrarianSignal = (priceHistory) => {\r\n  if (priceHistory.length < 3) return 0.5;\r\n  \r\n  const recent = priceHistory.slice(-3);\r\n  const trend = (recent[2].price - recent[0].price) / recent[0].price;\r\n  \r\n  return Math.max(0, Math.min(1, 0.5 - trend * 2));\r\n};\r\n\r\nconst calculateTrendFollowingSignal = (priceHistory) => {\r\n  if (priceHistory.length < 4) return 0.5;\r\n  \r\n  const prices = priceHistory.map(h => h.price);\r\n  const trend = (prices[prices.length - 1] - prices[0]) / prices[0];\r\n  \r\n  return Math.max(0, Math.min(1, 0.5 + trend * 1.5));\r\n};\r\n\r\nconst calculateBreakoutSignal = (priceHistory) => {\r\n  if (priceHistory.length < 6) return 0.5;\r\n  \r\n  const prices = priceHistory.map(h => h.price);\r\n  const high = Math.max(...prices.slice(0, -1));\r\n  const current = prices[prices.length - 1];\r\n  \r\n  if (current > high) {\r\n    return Math.min(1, 0.7 + (current - high) / high);\r\n  }\r\n  \r\n  return 0.3;\r\n};\r\n\r\n// Apply emotional adjustments to signal\r\nconst applyEmotionalAdjustments = (signal, trader, commodity, recentTrades) => {\r\n  const { emotionalState, emotionalIntensity, fomoSusceptibility, panicSusceptibility } = trader;\r\n  \r\n  let adjustedSignal = signal;\r\n  \r\n  switch (emotionalState) {\r\n    case EMOTIONAL_STATES.FOMO:\r\n      // FOMO makes traders more likely to buy\r\n      adjustedSignal += emotionalIntensity * 0.3;\r\n      break;\r\n    \r\n    case EMOTIONAL_STATES.PANIC:\r\n      // Panic makes traders more likely to sell\r\n      adjustedSignal -= emotionalIntensity * 0.4;\r\n      break;\r\n    \r\n    case EMOTIONAL_STATES.GREEDY:\r\n      // Greed makes traders more aggressive\r\n      adjustedSignal += emotionalIntensity * 0.2;\r\n      break;\r\n    \r\n    case EMOTIONAL_STATES.FEARFUL:\r\n      // Fear makes traders more conservative\r\n      adjustedSignal -= emotionalIntensity * 0.3;\r\n      break;\r\n    \r\n    case EMOTIONAL_STATES.EXCITED:\r\n      // Excitement increases confidence\r\n      adjustedSignal += emotionalIntensity * 0.1;\r\n      break;\r\n  }\r\n  \r\n  // Apply FOMO from recent trades\r\n  const fomoAdjustment = calculateFOMOAdjustment(recentTrades, commodity, fomoSusceptibility);\r\n  adjustedSignal += fomoAdjustment;\r\n  \r\n  // Apply panic from volatility\r\n  const panicAdjustment = calculatePanicAdjustment(commodity, panicSusceptibility);\r\n  adjustedSignal += panicAdjustment;\r\n  \r\n  return Math.max(0, Math.min(1, adjustedSignal));\r\n};\r\n\r\n// Calculate FOMO adjustment from recent trades\r\nconst calculateFOMOAdjustment = (recentTrades, commodity, fomoSusceptibility) => {\r\n  const commodityTrades = recentTrades.filter(trade => \r\n    trade.commodity.toLowerCase().includes(commodity.name.toLowerCase().substring(0, 3))\r\n  );\r\n  \r\n  if (commodityTrades.length === 0) return 0;\r\n  \r\n  const buyVolume = commodityTrades\r\n    .filter(trade => trade.action === 'BUY')\r\n    .reduce((sum, trade) => sum + trade.quantity, 0);\r\n  \r\n  const sellVolume = commodityTrades\r\n    .filter(trade => trade.action === 'SELL')\r\n    .reduce((sum, trade) => sum + trade.quantity, 0);\r\n  \r\n  const totalVolume = buyVolume + sellVolume;\r\n  if (totalVolume === 0) return 0;\r\n  \r\n  const buyRatio = buyVolume / totalVolume;\r\n  return (buyRatio - 0.5) * fomoSusceptibility * 0.2;\r\n};\r\n\r\n// Calculate panic adjustment from volatility\r\nconst calculatePanicAdjustment = (commodity, panicSusceptibility) => {\r\n  const priceHistory = commodity.priceHistory;\r\n  if (priceHistory.length < 2) return 0;\r\n  \r\n  const recentChanges = [];\r\n  for (let i = 1; i < priceHistory.length; i++) {\r\n    const change = Math.abs(priceHistory[i].price - priceHistory[i-1].price) / priceHistory[i-1].price;\r\n    recentChanges.push(change);\r\n  }\r\n  \r\n  const volatility = recentChanges.reduce((sum, change) => sum + change, 0) / recentChanges.length;\r\n  return -volatility * panicSusceptibility * 0.3;\r\n};\r\n\r\n// Calculate position size\r\nconst calculatePositionSize = (trader, commodity, signal) => {\r\n  const { capital, riskTolerance, emotionalIntensity, emotionalState } = trader;\r\n  \r\n  // Base position size based on signal strength\r\n  let baseSize = Math.abs(signal - 0.5) * 2; // 0-1 scale\r\n  \r\n  // Adjust for risk tolerance\r\n  baseSize *= riskTolerance;\r\n  \r\n  // Adjust for emotional state\r\n  switch (emotionalState) {\r\n    case EMOTIONAL_STATES.FOMO:\r\n    case EMOTIONAL_STATES.GREEDY:\r\n      baseSize *= (1 + emotionalIntensity * 0.5);\r\n      break;\r\n    \r\n    case EMOTIONAL_STATES.PANIC:\r\n    case EMOTIONAL_STATES.FEARFUL:\r\n      baseSize *= (1 - emotionalIntensity * 0.7);\r\n      break;\r\n  }\r\n  \r\n  // Calculate actual quantity\r\n  const maxQuantity = Math.floor(capital * 0.1 / commodity.lastPrice); // Max 10% of capital\r\n  const quantity = Math.floor(baseSize * maxQuantity);\r\n  \r\n  return Math.max(1, Math.min(quantity, 100)); // Between 1 and 100\r\n};\r\n\r\n// Execute trade and update trader state\r\nexport const executeTrade = (trader, decision, commodities) => {\r\n  const commodity = commodities.find(c => c.id === decision.commodityId);\r\n  if (!commodity) return trader;\r\n  \r\n  const tradeValue = decision.quantity * decision.price;\r\n  const updatedTrader = { ...trader };\r\n  \r\n  if (decision.action === 'BUY') {\r\n    // Update capital\r\n    updatedTrader.capital -= tradeValue;\r\n    \r\n    // Update portfolio\r\n    updatedTrader.portfolio[commodity.id] = (updatedTrader.portfolio[commodity.id] || 0) + decision.quantity;\r\n    \r\n    // Update active positions\r\n    updatedTrader.activePositions[commodity.id] = decision.quantity;\r\n    \r\n  } else if (decision.action === 'SELL') {\r\n    // Update capital\r\n    updatedTrader.capital += tradeValue;\r\n    \r\n    // Update portfolio\r\n    updatedTrader.portfolio[commodity.id] = Math.max(0, (updatedTrader.portfolio[commodity.id] || 0) - decision.quantity);\r\n    \r\n    // Remove from active positions if sold all\r\n    if (updatedTrader.portfolio[commodity.id] === 0) {\r\n      delete updatedTrader.activePositions[commodity.id];\r\n    } else {\r\n      updatedTrader.activePositions[commodity.id] = updatedTrader.portfolio[commodity.id];\r\n    }\r\n  }\r\n  \r\n  // Update trade history\r\n  updatedTrader.tradeHistory.push({\r\n    ...decision,\r\n    timestamp: Date.now(),\r\n    commodityPrice: commodity.lastPrice\r\n  });\r\n  \r\n  // Keep only last 100 trades\r\n  if (updatedTrader.tradeHistory.length > 100) {\r\n    updatedTrader.tradeHistory = updatedTrader.tradeHistory.slice(-100);\r\n  }\r\n  \r\n  // Update last trade time\r\n  updatedTrader.lastTradeTime = Date.now();\r\n  \r\n  return updatedTrader;\r\n};\r\n\r\n// Update trader performance metrics\r\nexport const updateTraderPerformance = (trader) => {\r\n  const { tradeHistory, capital } = trader;\r\n  \r\n  if (tradeHistory.length === 0) return trader;\r\n  \r\n  const updatedTrader = { ...trader };\r\n  const metrics = updatedTrader.performanceMetrics;\r\n  \r\n  // Calculate basic metrics\r\n  metrics.totalTrades = tradeHistory.length;\r\n  \r\n  // Calculate P&L\r\n  let totalPnL = 0;\r\n  let winningTrades = 0;\r\n  let losingTrades = 0;\r\n  let totalWins = 0;\r\n  let totalLosses = 0;\r\n  \r\n  tradeHistory.forEach(trade => {\r\n    if (trade.action === 'SELL') {\r\n      const buyTrade = tradeHistory.find(t => \r\n        t.action === 'BUY' && \r\n        t.commodityId === trade.commodityId && \r\n        t.timestamp < trade.timestamp\r\n      );\r\n      \r\n      if (buyTrade) {\r\n        const pnl = (trade.price - buyTrade.price) * trade.quantity;\r\n        totalPnL += pnl;\r\n        \r\n        if (pnl > 0) {\r\n          winningTrades++;\r\n          totalWins += pnl;\r\n        } else {\r\n          losingTrades++;\r\n          totalLosses += Math.abs(pnl);\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n  metrics.winningTrades = winningTrades;\r\n  metrics.losingTrades = losingTrades;\r\n  metrics.averageWin = winningTrades > 0 ? totalWins / winningTrades : 0;\r\n  metrics.averageLoss = losingTrades > 0 ? totalLosses / losingTrades : 0;\r\n  metrics.winRate = metrics.totalTrades > 0 ? winningTrades / metrics.totalTrades : 0;\r\n  metrics.profitFactor = totalLosses > 0 ? totalWins / totalLosses : 0;\r\n  \r\n  updatedTrader.profitLoss = totalPnL;\r\n  updatedTrader.successRate = metrics.winRate;\r\n  \r\n  return updatedTrader;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
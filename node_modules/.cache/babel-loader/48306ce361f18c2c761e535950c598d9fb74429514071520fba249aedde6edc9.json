{"ast":null,"code":"var _jsxFileName = \"F:\\\\Windsurf\\\\Native\\\\GTC 3\\\\src\\\\contexts\\\\MultiplayerContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MultiplayerContext = /*#__PURE__*/createContext();\nexport const useMultiplayer = () => {\n  _s();\n  const context = useContext(MultiplayerContext);\n  if (!context) {\n    throw new Error('useMultiplayer must be used within a MultiplayerProvider');\n  }\n  return context;\n};\n_s(useMultiplayer, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const MultiplayerProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [onlinePlayers, setOnlinePlayers] = useState([]);\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [globalMarket, setGlobalMarket] = useState(null);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [playerData, setPlayerData] = useState(null);\n  useEffect(() => {\n    // Connect to the multiplayer server - use environment variable or fallback to localhost\n    const serverUrl = process.env.REACT_APP_MULTIPLAYER_SERVER || 'http://localhost:3001';\n    console.log('Connecting to multiplayer server:', serverUrl);\n    const newSocket = io(serverUrl, {\n      transports: ['polling', 'websocket'],\n      // Polling first for mobile compatibility\n      timeout: 30000,\n      forceNew: true,\n      upgrade: true,\n      rememberUpgrade: false,\n      autoConnect: true,\n      reconnection: true,\n      reconnectionDelay: 1000,\n      reconnectionAttempts: 10,\n      maxReconnectionAttempts: 10\n    });\n    setSocket(newSocket);\n\n    // Connection events\n    newSocket.on('connect', () => {\n      console.log('Connected to multiplayer server');\n      setIsConnected(true);\n    });\n    newSocket.on('disconnect', () => {\n      console.log('Disconnected from multiplayer server');\n      setIsConnected(false);\n    });\n    newSocket.on('connect_error', error => {\n      console.error('Connection error:', error);\n      setIsConnected(false);\n    });\n\n    // Game state events\n    newSocket.on('gameState', data => {\n      setGlobalMarket(data.globalMarket);\n      setLeaderboard(data.leaderboard);\n      setChatMessages(data.chatMessages);\n      setOnlinePlayers(data.onlinePlayers);\n    });\n    newSocket.on('marketUpdate', market => {\n      setGlobalMarket(market);\n      console.log('Received market update from server:', market.commodities.length, 'commodities');\n    });\n    newSocket.on('leaderboardUpdate', leaderboardData => {\n      setLeaderboard(leaderboardData);\n    });\n    newSocket.on('tradeExecuted', data => {\n      setGlobalMarket(data.updatedMarket);\n      // Update player data if it's the current player\n      if (data.playerUpdate && data.playerUpdate.id === newSocket.id) {\n        setPlayerData(prev => ({\n          ...prev,\n          credits: data.playerUpdate.credits,\n          portfolio: data.playerUpdate.portfolio\n        }));\n      }\n    });\n    newSocket.on('tradeError', error => {\n      console.error('Trade error:', error.message);\n      // You can add a notification system here\n    });\n\n    // Add connection status logging with mobile detection\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    newSocket.on('connect', () => {\n      console.log('✅ Connected to multiplayer server', isMobile ? '(Mobile)' : '(Desktop)');\n    });\n    newSocket.on('disconnect', reason => {\n      console.log('❌ Disconnected from multiplayer server:', reason, isMobile ? '(Mobile)' : '(Desktop)');\n    });\n    newSocket.on('connect_error', error => {\n      console.log('⚠️ Connection error:', error.message, isMobile ? '(Mobile)' : '(Desktop)');\n      console.log('Error details:', error);\n    });\n    newSocket.on('reconnect', attemptNumber => {\n      console.log('🔄 Reconnected after', attemptNumber, 'attempts');\n    });\n    newSocket.on('reconnecting', attemptNumber => {\n      console.log('🔄 Reconnecting attempt', attemptNumber);\n    });\n    newSocket.on('reconnect_error', error => {\n      console.log('❌ Reconnect error:', error.message);\n    });\n    newSocket.on('reconnect_failed', () => {\n      console.log('❌ Reconnection failed');\n    });\n\n    // Player events\n    newSocket.on('playerJoined', data => {\n      setOnlinePlayers(data.onlinePlayers);\n      // Add system message to chat\n      setChatMessages(prev => [...prev, {\n        id: Date.now(),\n        username: 'System',\n        message: `${data.username} joined the game`,\n        timestamp: new Date().toISOString(),\n        type: 'system'\n      }]);\n    });\n    newSocket.on('playerLeft', data => {\n      setOnlinePlayers(data.onlinePlayers);\n      // Add system message to chat\n      setChatMessages(prev => [...prev, {\n        id: Date.now(),\n        username: 'System',\n        message: `${data.username} left the game`,\n        timestamp: new Date().toISOString(),\n        type: 'system'\n      }]);\n    });\n\n    // Chat events\n    newSocket.on('newMessage', message => {\n      setChatMessages(prev => [...prev, message]);\n    });\n\n    // Cleanup on unmount\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n\n  // Retry connection if disconnected with mobile-friendly intervals\n  useEffect(() => {\n    if (!isConnected && socket) {\n      const retryTimeout = setTimeout(() => {\n        console.log('Retrying connection to multiplayer server...');\n        socket.connect();\n      }, 5000); // Longer delay for mobile networks\n\n      return () => clearTimeout(retryTimeout);\n    }\n  }, [isConnected, socket]);\n\n  // Add visibility change handler for mobile app switching\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'visible' && socket && !isConnected) {\n        console.log('App became visible, attempting reconnection...');\n        setTimeout(() => {\n          socket.connect();\n        }, 1000);\n      }\n    };\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () => document.removeEventListener('visibilitychange', handleVisibilityChange);\n  }, [socket, isConnected]);\n\n  // Join the game\n  const joinGame = userData => {\n    if (socket && isConnected) {\n      var _userData$gameState, _userData$gameState2, _userData$gameState3, _userData$gameState4, _userData$gameState5;\n      const playerData = {\n        username: userData.username,\n        credits: ((_userData$gameState = userData.gameState) === null || _userData$gameState === void 0 ? void 0 : _userData$gameState.credits) || 100000,\n        profit: ((_userData$gameState2 = userData.gameState) === null || _userData$gameState2 === void 0 ? void 0 : _userData$gameState2.profit) || 0,\n        pnl: ((_userData$gameState3 = userData.gameState) === null || _userData$gameState3 === void 0 ? void 0 : _userData$gameState3.pnl) || 0,\n        totalMargin: ((_userData$gameState4 = userData.gameState) === null || _userData$gameState4 === void 0 ? void 0 : _userData$gameState4.totalMargin) || 0,\n        portfolio: ((_userData$gameState5 = userData.gameState) === null || _userData$gameState5 === void 0 ? void 0 : _userData$gameState5.portfolio) || {}\n      };\n      console.log('Joining multiplayer game as:', playerData.username);\n      setPlayerData(playerData);\n      socket.emit('playerJoin', playerData);\n    } else {\n      console.log('Cannot join game - socket not connected');\n    }\n  };\n\n  // Execute a trade\n  const executeTrade = tradeData => {\n    if (socket && isConnected) {\n      socket.emit('executeTrade', tradeData);\n    }\n  };\n\n  // Send a chat message\n  const sendMessage = (message, type = 'chat') => {\n    if (socket && isConnected) {\n      socket.emit('sendMessage', {\n        message,\n        type\n      });\n    }\n  };\n\n  // Get leaderboard\n  const getLeaderboard = () => {\n    if (socket && isConnected) {\n      socket.emit('getLeaderboard');\n    }\n  };\n\n  // Send heartbeat\n  const sendHeartbeat = () => {\n    if (socket && isConnected) {\n      socket.emit('heartbeat');\n    }\n  };\n\n  // Set up heartbeat interval\n  useEffect(() => {\n    if (isConnected) {\n      const heartbeatInterval = setInterval(sendHeartbeat, 30000); // Every 30 seconds\n      return () => clearInterval(heartbeatInterval);\n    }\n  }, [isConnected]);\n  const value = {\n    socket,\n    isConnected,\n    onlinePlayers,\n    leaderboard,\n    globalMarket,\n    chatMessages,\n    playerData,\n    joinGame,\n    executeTrade,\n    sendMessage,\n    getLeaderboard\n  };\n  return /*#__PURE__*/_jsxDEV(MultiplayerContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this);\n};\n_s2(MultiplayerProvider, \"geyuOfgwqIbAr7nYWFIEpYfQ0Co=\");\n_c = MultiplayerProvider;\nvar _c;\n$RefreshReg$(_c, \"MultiplayerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","jsxDEV","_jsxDEV","MultiplayerContext","useMultiplayer","_s","context","Error","MultiplayerProvider","children","_s2","socket","setSocket","isConnected","setIsConnected","onlinePlayers","setOnlinePlayers","leaderboard","setLeaderboard","globalMarket","setGlobalMarket","chatMessages","setChatMessages","playerData","setPlayerData","serverUrl","process","env","REACT_APP_MULTIPLAYER_SERVER","console","log","newSocket","transports","timeout","forceNew","upgrade","rememberUpgrade","autoConnect","reconnection","reconnectionDelay","reconnectionAttempts","maxReconnectionAttempts","on","error","data","market","commodities","length","leaderboardData","updatedMarket","playerUpdate","id","prev","credits","portfolio","message","isMobile","test","navigator","userAgent","reason","attemptNumber","Date","now","username","timestamp","toISOString","type","close","retryTimeout","setTimeout","connect","clearTimeout","handleVisibilityChange","document","visibilityState","addEventListener","removeEventListener","joinGame","userData","_userData$gameState","_userData$gameState2","_userData$gameState3","_userData$gameState4","_userData$gameState5","gameState","profit","pnl","totalMargin","emit","executeTrade","tradeData","sendMessage","getLeaderboard","sendHeartbeat","heartbeatInterval","setInterval","clearInterval","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/Windsurf/Native/GTC 3/src/contexts/MultiplayerContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst MultiplayerContext = createContext();\r\n\r\nexport const useMultiplayer = () => {\r\n  const context = useContext(MultiplayerContext);\r\n  if (!context) {\r\n    throw new Error('useMultiplayer must be used within a MultiplayerProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const MultiplayerProvider = ({ children }) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [onlinePlayers, setOnlinePlayers] = useState([]);\r\n  const [leaderboard, setLeaderboard] = useState([]);\r\n  const [globalMarket, setGlobalMarket] = useState(null);\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [playerData, setPlayerData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Connect to the multiplayer server - use environment variable or fallback to localhost\r\n    const serverUrl = process.env.REACT_APP_MULTIPLAYER_SERVER || 'http://localhost:3001';\r\n    console.log('Connecting to multiplayer server:', serverUrl);\r\n    const newSocket = io(serverUrl, {\r\n      transports: ['polling', 'websocket'], // Polling first for mobile compatibility\r\n      timeout: 30000,\r\n      forceNew: true,\r\n      upgrade: true,\r\n      rememberUpgrade: false,\r\n      autoConnect: true,\r\n      reconnection: true,\r\n      reconnectionDelay: 1000,\r\n      reconnectionAttempts: 10,\r\n      maxReconnectionAttempts: 10\r\n    });\r\n    setSocket(newSocket);\r\n\r\n    // Connection events\r\n    newSocket.on('connect', () => {\r\n      console.log('Connected to multiplayer server');\r\n      setIsConnected(true);\r\n    });\r\n\r\n    newSocket.on('disconnect', () => {\r\n      console.log('Disconnected from multiplayer server');\r\n      setIsConnected(false);\r\n    });\r\n\r\n    newSocket.on('connect_error', (error) => {\r\n      console.error('Connection error:', error);\r\n      setIsConnected(false);\r\n    });\r\n\r\n    // Game state events\r\n    newSocket.on('gameState', (data) => {\r\n      setGlobalMarket(data.globalMarket);\r\n      setLeaderboard(data.leaderboard);\r\n      setChatMessages(data.chatMessages);\r\n      setOnlinePlayers(data.onlinePlayers);\r\n    });\r\n\r\n    newSocket.on('marketUpdate', (market) => {\r\n      setGlobalMarket(market);\r\n      console.log('Received market update from server:', market.commodities.length, 'commodities');\r\n    });\r\n\r\n    newSocket.on('leaderboardUpdate', (leaderboardData) => {\r\n      setLeaderboard(leaderboardData);\r\n    });\r\n\r\n    newSocket.on('tradeExecuted', (data) => {\r\n      setGlobalMarket(data.updatedMarket);\r\n      // Update player data if it's the current player\r\n      if (data.playerUpdate && data.playerUpdate.id === newSocket.id) {\r\n        setPlayerData(prev => ({\r\n          ...prev,\r\n          credits: data.playerUpdate.credits,\r\n          portfolio: data.playerUpdate.portfolio\r\n        }));\r\n      }\r\n    });\r\n\r\n    newSocket.on('tradeError', (error) => {\r\n      console.error('Trade error:', error.message);\r\n      // You can add a notification system here\r\n    });\r\n\r\n    // Add connection status logging with mobile detection\r\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n    \r\n    newSocket.on('connect', () => {\r\n      console.log('✅ Connected to multiplayer server', isMobile ? '(Mobile)' : '(Desktop)');\r\n    });\r\n\r\n    newSocket.on('disconnect', (reason) => {\r\n      console.log('❌ Disconnected from multiplayer server:', reason, isMobile ? '(Mobile)' : '(Desktop)');\r\n    });\r\n\r\n    newSocket.on('connect_error', (error) => {\r\n      console.log('⚠️ Connection error:', error.message, isMobile ? '(Mobile)' : '(Desktop)');\r\n      console.log('Error details:', error);\r\n    });\r\n\r\n    newSocket.on('reconnect', (attemptNumber) => {\r\n      console.log('🔄 Reconnected after', attemptNumber, 'attempts');\r\n    });\r\n\r\n    newSocket.on('reconnecting', (attemptNumber) => {\r\n      console.log('🔄 Reconnecting attempt', attemptNumber);\r\n    });\r\n\r\n    newSocket.on('reconnect_error', (error) => {\r\n      console.log('❌ Reconnect error:', error.message);\r\n    });\r\n\r\n    newSocket.on('reconnect_failed', () => {\r\n      console.log('❌ Reconnection failed');\r\n    });\r\n\r\n    // Player events\r\n    newSocket.on('playerJoined', (data) => {\r\n      setOnlinePlayers(data.onlinePlayers);\r\n      // Add system message to chat\r\n      setChatMessages(prev => [...prev, {\r\n        id: Date.now(),\r\n        username: 'System',\r\n        message: `${data.username} joined the game`,\r\n        timestamp: new Date().toISOString(),\r\n        type: 'system'\r\n      }]);\r\n    });\r\n\r\n    newSocket.on('playerLeft', (data) => {\r\n      setOnlinePlayers(data.onlinePlayers);\r\n      // Add system message to chat\r\n      setChatMessages(prev => [...prev, {\r\n        id: Date.now(),\r\n        username: 'System',\r\n        message: `${data.username} left the game`,\r\n        timestamp: new Date().toISOString(),\r\n        type: 'system'\r\n      }]);\r\n    });\r\n\r\n    // Chat events\r\n    newSocket.on('newMessage', (message) => {\r\n      setChatMessages(prev => [...prev, message]);\r\n    });\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      newSocket.close();\r\n    };\r\n  }, []);\r\n\r\n  // Retry connection if disconnected with mobile-friendly intervals\r\n  useEffect(() => {\r\n    if (!isConnected && socket) {\r\n      const retryTimeout = setTimeout(() => {\r\n        console.log('Retrying connection to multiplayer server...');\r\n        socket.connect();\r\n      }, 5000); // Longer delay for mobile networks\r\n\r\n      return () => clearTimeout(retryTimeout);\r\n    }\r\n  }, [isConnected, socket]);\r\n\r\n  // Add visibility change handler for mobile app switching\r\n  useEffect(() => {\r\n    const handleVisibilityChange = () => {\r\n      if (document.visibilityState === 'visible' && socket && !isConnected) {\r\n        console.log('App became visible, attempting reconnection...');\r\n        setTimeout(() => {\r\n          socket.connect();\r\n        }, 1000);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    return () => document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n  }, [socket, isConnected]);\r\n\r\n  // Join the game\r\n  const joinGame = (userData) => {\r\n    if (socket && isConnected) {\r\n      const playerData = {\r\n        username: userData.username,\r\n        credits: userData.gameState?.credits || 100000,\r\n        profit: userData.gameState?.profit || 0,\r\n        pnl: userData.gameState?.pnl || 0,\r\n        totalMargin: userData.gameState?.totalMargin || 0,\r\n        portfolio: userData.gameState?.portfolio || {}\r\n      };\r\n      \r\n      console.log('Joining multiplayer game as:', playerData.username);\r\n      setPlayerData(playerData);\r\n      socket.emit('playerJoin', playerData);\r\n    } else {\r\n      console.log('Cannot join game - socket not connected');\r\n    }\r\n  };\r\n\r\n  // Execute a trade\r\n  const executeTrade = (tradeData) => {\r\n    if (socket && isConnected) {\r\n      socket.emit('executeTrade', tradeData);\r\n    }\r\n  };\r\n\r\n  // Send a chat message\r\n  const sendMessage = (message, type = 'chat') => {\r\n    if (socket && isConnected) {\r\n      socket.emit('sendMessage', { message, type });\r\n    }\r\n  };\r\n\r\n  // Get leaderboard\r\n  const getLeaderboard = () => {\r\n    if (socket && isConnected) {\r\n      socket.emit('getLeaderboard');\r\n    }\r\n  };\r\n\r\n  // Send heartbeat\r\n  const sendHeartbeat = () => {\r\n    if (socket && isConnected) {\r\n      socket.emit('heartbeat');\r\n    }\r\n  };\r\n\r\n  // Set up heartbeat interval\r\n  useEffect(() => {\r\n    if (isConnected) {\r\n      const heartbeatInterval = setInterval(sendHeartbeat, 30000); // Every 30 seconds\r\n      return () => clearInterval(heartbeatInterval);\r\n    }\r\n  }, [isConnected]);\r\n\r\n  const value = {\r\n    socket,\r\n    isConnected,\r\n    onlinePlayers,\r\n    leaderboard,\r\n    globalMarket,\r\n    chatMessages,\r\n    playerData,\r\n    joinGame,\r\n    executeTrade,\r\n    sendMessage,\r\n    getLeaderboard\r\n  };\r\n\r\n  return (\r\n    <MultiplayerContext.Provider value={value}>\r\n      {children}\r\n    </MultiplayerContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"F:\\\\Windsurf\\\\Native\\\\GTC 3\\\\src\\\\contexts\\\\MultiplayerContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MultiplayerContext = /*#__PURE__*/createContext();\nexport const useMultiplayer = () => {\n  _s();\n  const context = useContext(MultiplayerContext);\n  if (!context) {\n    throw new Error('useMultiplayer must be used within a MultiplayerProvider');\n  }\n  return context;\n};\n_s(useMultiplayer, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const MultiplayerProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [onlinePlayers, setOnlinePlayers] = useState([]);\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [globalMarket, setGlobalMarket] = useState(null);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [playerData, setPlayerData] = useState(null);\n  useEffect(() => {\n    // Connect to the multiplayer server\n    const newSocket = io('http://localhost:3001');\n    setSocket(newSocket);\n\n    // Connection events\n    newSocket.on('connect', () => {\n      console.log('Connected to multiplayer server');\n      setIsConnected(true);\n    });\n    newSocket.on('disconnect', () => {\n      console.log('Disconnected from multiplayer server');\n      setIsConnected(false);\n    });\n\n    // Game state events\n    newSocket.on('gameState', data => {\n      setGlobalMarket(data.globalMarket);\n      setLeaderboard(data.leaderboard);\n      setChatMessages(data.chatMessages);\n      setOnlinePlayers(data.onlinePlayers);\n    });\n    newSocket.on('marketUpdate', market => {\n      setGlobalMarket(market);\n    });\n    newSocket.on('leaderboardUpdate', leaderboardData => {\n      setLeaderboard(leaderboardData);\n    });\n    newSocket.on('tradeExecuted', data => {\n      setGlobalMarket(data.updatedMarket);\n      // Update player data if it's the current player\n      if (data.playerUpdate && data.playerUpdate.id === newSocket.id) {\n        setPlayerData(prev => ({\n          ...prev,\n          credits: data.playerUpdate.credits,\n          portfolio: data.playerUpdate.portfolio\n        }));\n      }\n    });\n    newSocket.on('tradeError', error => {\n      console.error('Trade error:', error.message);\n      // You can add a notification system here\n    });\n\n    // Player events\n    newSocket.on('playerJoined', data => {\n      setOnlinePlayers(data.onlinePlayers);\n      // Add system message to chat\n      setChatMessages(prev => [...prev, {\n        id: Date.now(),\n        username: 'System',\n        message: `${data.username} joined the game`,\n        timestamp: new Date().toISOString(),\n        type: 'system'\n      }]);\n    });\n    newSocket.on('playerLeft', data => {\n      setOnlinePlayers(data.onlinePlayers);\n      // Add system message to chat\n      setChatMessages(prev => [...prev, {\n        id: Date.now(),\n        username: 'System',\n        message: `${data.username} left the game`,\n        timestamp: new Date().toISOString(),\n        type: 'system'\n      }]);\n    });\n\n    // Chat events\n    newSocket.on('newMessage', message => {\n      setChatMessages(prev => [...prev, message]);\n    });\n\n    // Cleanup on unmount\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n\n  // Join the game\n  const joinGame = userData => {\n    if (socket && isConnected) {\n      var _userData$gameState, _userData$gameState2, _userData$gameState3, _userData$gameState4, _userData$gameState5;\n      const playerData = {\n        username: userData.username,\n        credits: ((_userData$gameState = userData.gameState) === null || _userData$gameState === void 0 ? void 0 : _userData$gameState.credits) || 100000,\n        profit: ((_userData$gameState2 = userData.gameState) === null || _userData$gameState2 === void 0 ? void 0 : _userData$gameState2.profit) || 0,\n        pnl: ((_userData$gameState3 = userData.gameState) === null || _userData$gameState3 === void 0 ? void 0 : _userData$gameState3.pnl) || 0,\n        totalMargin: ((_userData$gameState4 = userData.gameState) === null || _userData$gameState4 === void 0 ? void 0 : _userData$gameState4.totalMargin) || 0,\n        portfolio: ((_userData$gameState5 = userData.gameState) === null || _userData$gameState5 === void 0 ? void 0 : _userData$gameState5.portfolio) || {}\n      };\n      setPlayerData(playerData);\n      socket.emit('playerJoin', playerData);\n    }\n  };\n\n  // Execute a trade\n  const executeTrade = tradeData => {\n    if (socket && isConnected) {\n      socket.emit('executeTrade', tradeData);\n    }\n  };\n\n  // Send a chat message\n  const sendMessage = (message, type = 'chat') => {\n    if (socket && isConnected) {\n      socket.emit('sendMessage', {\n        message,\n        type\n      });\n    }\n  };\n\n  // Get leaderboard\n  const getLeaderboard = () => {\n    if (socket && isConnected) {\n      socket.emit('getLeaderboard');\n    }\n  };\n\n  // Send heartbeat\n  const sendHeartbeat = () => {\n    if (socket && isConnected) {\n      socket.emit('heartbeat');\n    }\n  };\n\n  // Set up heartbeat interval\n  useEffect(() => {\n    if (isConnected) {\n      const heartbeatInterval = setInterval(sendHeartbeat, 30000); // Every 30 seconds\n      return () => clearInterval(heartbeatInterval);\n    }\n  }, [isConnected]);\n  const value = {\n    socket,\n    isConnected,\n    onlinePlayers,\n    leaderboard,\n    globalMarket,\n    chatMessages,\n    playerData,\n    joinGame,\n    executeTrade,\n    sendMessage,\n    getLeaderboard\n  };\n  return /*#__PURE__*/_jsxDEV(MultiplayerContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n_s2(MultiplayerProvider, \"LKgyKF+wOJyND4m/x/ORk80k4i8=\");\n_c = MultiplayerProvider;\nvar _c;\n$RefreshReg$(_c, \"MultiplayerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","jsxDEV","_jsxDEV","MultiplayerContext","useMultiplayer","_s","context","Error","MultiplayerProvider","children","_s2","socket","setSocket","isConnected","setIsConnected","onlinePlayers","setOnlinePlayers","leaderboard","setLeaderboard","globalMarket","setGlobalMarket","chatMessages","setChatMessages","playerData","setPlayerData","newSocket","on","console","log","data","market","leaderboardData","updatedMarket","playerUpdate","id","prev","credits","portfolio","error","message","Date","now","username","timestamp","toISOString","type","close","joinGame","userData","_userData$gameState","_userData$gameState2","_userData$gameState3","_userData$gameState4","_userData$gameState5","gameState","profit","pnl","totalMargin","emit","executeTrade","tradeData","sendMessage","getLeaderboard","sendHeartbeat","heartbeatInterval","setInterval","clearInterval","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/Windsurf/Native/GTC 3/src/contexts/MultiplayerContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst MultiplayerContext = createContext();\r\n\r\nexport const useMultiplayer = () => {\r\n  const context = useContext(MultiplayerContext);\r\n  if (!context) {\r\n    throw new Error('useMultiplayer must be used within a MultiplayerProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const MultiplayerProvider = ({ children }) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [onlinePlayers, setOnlinePlayers] = useState([]);\r\n  const [leaderboard, setLeaderboard] = useState([]);\r\n  const [globalMarket, setGlobalMarket] = useState(null);\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [playerData, setPlayerData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Connect to the multiplayer server\r\n    const newSocket = io('http://localhost:3001');\r\n    setSocket(newSocket);\r\n\r\n    // Connection events\r\n    newSocket.on('connect', () => {\r\n      console.log('Connected to multiplayer server');\r\n      setIsConnected(true);\r\n    });\r\n\r\n    newSocket.on('disconnect', () => {\r\n      console.log('Disconnected from multiplayer server');\r\n      setIsConnected(false);\r\n    });\r\n\r\n    // Game state events\r\n    newSocket.on('gameState', (data) => {\r\n      setGlobalMarket(data.globalMarket);\r\n      setLeaderboard(data.leaderboard);\r\n      setChatMessages(data.chatMessages);\r\n      setOnlinePlayers(data.onlinePlayers);\r\n    });\r\n\r\n    newSocket.on('marketUpdate', (market) => {\r\n      setGlobalMarket(market);\r\n    });\r\n\r\n    newSocket.on('leaderboardUpdate', (leaderboardData) => {\r\n      setLeaderboard(leaderboardData);\r\n    });\r\n\r\n    newSocket.on('tradeExecuted', (data) => {\r\n      setGlobalMarket(data.updatedMarket);\r\n      // Update player data if it's the current player\r\n      if (data.playerUpdate && data.playerUpdate.id === newSocket.id) {\r\n        setPlayerData(prev => ({\r\n          ...prev,\r\n          credits: data.playerUpdate.credits,\r\n          portfolio: data.playerUpdate.portfolio\r\n        }));\r\n      }\r\n    });\r\n\r\n    newSocket.on('tradeError', (error) => {\r\n      console.error('Trade error:', error.message);\r\n      // You can add a notification system here\r\n    });\r\n\r\n    // Player events\r\n    newSocket.on('playerJoined', (data) => {\r\n      setOnlinePlayers(data.onlinePlayers);\r\n      // Add system message to chat\r\n      setChatMessages(prev => [...prev, {\r\n        id: Date.now(),\r\n        username: 'System',\r\n        message: `${data.username} joined the game`,\r\n        timestamp: new Date().toISOString(),\r\n        type: 'system'\r\n      }]);\r\n    });\r\n\r\n    newSocket.on('playerLeft', (data) => {\r\n      setOnlinePlayers(data.onlinePlayers);\r\n      // Add system message to chat\r\n      setChatMessages(prev => [...prev, {\r\n        id: Date.now(),\r\n        username: 'System',\r\n        message: `${data.username} left the game`,\r\n        timestamp: new Date().toISOString(),\r\n        type: 'system'\r\n      }]);\r\n    });\r\n\r\n    // Chat events\r\n    newSocket.on('newMessage', (message) => {\r\n      setChatMessages(prev => [...prev, message]);\r\n    });\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      newSocket.close();\r\n    };\r\n  }, []);\r\n\r\n  // Join the game\r\n  const joinGame = (userData) => {\r\n    if (socket && isConnected) {\r\n      const playerData = {\r\n        username: userData.username,\r\n        credits: userData.gameState?.credits || 100000,\r\n        profit: userData.gameState?.profit || 0,\r\n        pnl: userData.gameState?.pnl || 0,\r\n        totalMargin: userData.gameState?.totalMargin || 0,\r\n        portfolio: userData.gameState?.portfolio || {}\r\n      };\r\n      \r\n      setPlayerData(playerData);\r\n      socket.emit('playerJoin', playerData);\r\n    }\r\n  };\r\n\r\n  // Execute a trade\r\n  const executeTrade = (tradeData) => {\r\n    if (socket && isConnected) {\r\n      socket.emit('executeTrade', tradeData);\r\n    }\r\n  };\r\n\r\n  // Send a chat message\r\n  const sendMessage = (message, type = 'chat') => {\r\n    if (socket && isConnected) {\r\n      socket.emit('sendMessage', { message, type });\r\n    }\r\n  };\r\n\r\n  // Get leaderboard\r\n  const getLeaderboard = () => {\r\n    if (socket && isConnected) {\r\n      socket.emit('getLeaderboard');\r\n    }\r\n  };\r\n\r\n  // Send heartbeat\r\n  const sendHeartbeat = () => {\r\n    if (socket && isConnected) {\r\n      socket.emit('heartbeat');\r\n    }\r\n  };\r\n\r\n  // Set up heartbeat interval\r\n  useEffect(() => {\r\n    if (isConnected) {\r\n      const heartbeatInterval = setInterval(sendHeartbeat, 30000); // Every 30 seconds\r\n      return () => clearInterval(heartbeatInterval);\r\n    }\r\n  }, [isConnected]);\r\n\r\n  const value = {\r\n    socket,\r\n    isConnected,\r\n    onlinePlayers,\r\n    leaderboard,\r\n    globalMarket,\r\n    chatMessages,\r\n    playerData,\r\n    joinGame,\r\n    executeTrade,\r\n    sendMessage,\r\n    getLeaderboard\r\n  };\r\n\r\n  return (\r\n    <MultiplayerContext.Provider value={value}>\r\n      {children}\r\n    </MultiplayerContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
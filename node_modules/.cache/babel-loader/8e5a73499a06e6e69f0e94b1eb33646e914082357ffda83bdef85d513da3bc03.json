{"ast":null,"code":"import _objectSpread from\"F:/Windsurf/Native/GTC 3/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useEffect,useState}from'react';import io from'socket.io-client';import{jsx as _jsx}from\"react/jsx-runtime\";const MultiplayerContext=/*#__PURE__*/createContext();export const useMultiplayer=()=>{const context=useContext(MultiplayerContext);if(!context){throw new Error('useMultiplayer must be used within a MultiplayerProvider');}return context;};export const MultiplayerProvider=_ref=>{let{children}=_ref;const[socket,setSocket]=useState(null);const[isConnected,setIsConnected]=useState(false);const[onlinePlayers,setOnlinePlayers]=useState([]);const[leaderboard,setLeaderboard]=useState([]);const[globalMarket,setGlobalMarket]=useState(null);const[chatMessages,setChatMessages]=useState([]);const[playerData,setPlayerData]=useState(null);useEffect(()=>{// Connect to the multiplayer server\nconst newSocket=io('http://localhost:3001');setSocket(newSocket);// Connection events\nnewSocket.on('connect',()=>{console.log('Connected to multiplayer server');setIsConnected(true);});newSocket.on('disconnect',()=>{console.log('Disconnected from multiplayer server');setIsConnected(false);});// Game state events\nnewSocket.on('gameState',data=>{setGlobalMarket(data.globalMarket);setLeaderboard(data.leaderboard);setChatMessages(data.chatMessages);setOnlinePlayers(data.onlinePlayers);});newSocket.on('marketUpdate',market=>{setGlobalMarket(market);console.log('Received market update from server:',market.commodities.length,'commodities');});newSocket.on('leaderboardUpdate',leaderboardData=>{setLeaderboard(leaderboardData);});newSocket.on('tradeExecuted',data=>{setGlobalMarket(data.updatedMarket);// Update player data if it's the current player\nif(data.playerUpdate&&data.playerUpdate.id===newSocket.id){setPlayerData(prev=>_objectSpread(_objectSpread({},prev),{},{credits:data.playerUpdate.credits,portfolio:data.playerUpdate.portfolio}));}});newSocket.on('tradeError',error=>{console.error('Trade error:',error.message);// You can add a notification system here\n});// Player events\nnewSocket.on('playerJoined',data=>{setOnlinePlayers(data.onlinePlayers);// Add system message to chat\nsetChatMessages(prev=>[...prev,{id:Date.now(),username:'System',message:\"\".concat(data.username,\" joined the game\"),timestamp:new Date().toISOString(),type:'system'}]);});newSocket.on('playerLeft',data=>{setOnlinePlayers(data.onlinePlayers);// Add system message to chat\nsetChatMessages(prev=>[...prev,{id:Date.now(),username:'System',message:\"\".concat(data.username,\" left the game\"),timestamp:new Date().toISOString(),type:'system'}]);});// Chat events\nnewSocket.on('newMessage',message=>{setChatMessages(prev=>[...prev,message]);});// Cleanup on unmount\nreturn()=>{newSocket.close();};},[]);// Join the game\nconst joinGame=userData=>{if(socket&&isConnected){var _userData$gameState,_userData$gameState2,_userData$gameState3,_userData$gameState4,_userData$gameState5;const playerData={username:userData.username,credits:((_userData$gameState=userData.gameState)===null||_userData$gameState===void 0?void 0:_userData$gameState.credits)||100000,profit:((_userData$gameState2=userData.gameState)===null||_userData$gameState2===void 0?void 0:_userData$gameState2.profit)||0,pnl:((_userData$gameState3=userData.gameState)===null||_userData$gameState3===void 0?void 0:_userData$gameState3.pnl)||0,totalMargin:((_userData$gameState4=userData.gameState)===null||_userData$gameState4===void 0?void 0:_userData$gameState4.totalMargin)||0,portfolio:((_userData$gameState5=userData.gameState)===null||_userData$gameState5===void 0?void 0:_userData$gameState5.portfolio)||{}};setPlayerData(playerData);socket.emit('playerJoin',playerData);}};// Execute a trade\nconst executeTrade=tradeData=>{if(socket&&isConnected){socket.emit('executeTrade',tradeData);}};// Send a chat message\nconst sendMessage=function(message){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'chat';if(socket&&isConnected){socket.emit('sendMessage',{message,type});}};// Get leaderboard\nconst getLeaderboard=()=>{if(socket&&isConnected){socket.emit('getLeaderboard');}};// Send heartbeat\nconst sendHeartbeat=()=>{if(socket&&isConnected){socket.emit('heartbeat');}};// Set up heartbeat interval\nuseEffect(()=>{if(isConnected){const heartbeatInterval=setInterval(sendHeartbeat,30000);// Every 30 seconds\nreturn()=>clearInterval(heartbeatInterval);}},[isConnected]);const value={socket,isConnected,onlinePlayers,leaderboard,globalMarket,chatMessages,playerData,joinGame,executeTrade,sendMessage,getLeaderboard};return/*#__PURE__*/_jsx(MultiplayerContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","jsx","_jsx","MultiplayerContext","useMultiplayer","context","Error","MultiplayerProvider","_ref","children","socket","setSocket","isConnected","setIsConnected","onlinePlayers","setOnlinePlayers","leaderboard","setLeaderboard","globalMarket","setGlobalMarket","chatMessages","setChatMessages","playerData","setPlayerData","newSocket","on","console","log","data","market","commodities","length","leaderboardData","updatedMarket","playerUpdate","id","prev","_objectSpread","credits","portfolio","error","message","Date","now","username","concat","timestamp","toISOString","type","close","joinGame","userData","_userData$gameState","_userData$gameState2","_userData$gameState3","_userData$gameState4","_userData$gameState5","gameState","profit","pnl","totalMargin","emit","executeTrade","tradeData","sendMessage","arguments","undefined","getLeaderboard","sendHeartbeat","heartbeatInterval","setInterval","clearInterval","value","Provider"],"sources":["F:/Windsurf/Native/GTC 3/src/contexts/MultiplayerContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\n\nconst MultiplayerContext = createContext();\n\nexport const useMultiplayer = () => {\n  const context = useContext(MultiplayerContext);\n  if (!context) {\n    throw new Error('useMultiplayer must be used within a MultiplayerProvider');\n  }\n  return context;\n};\n\nexport const MultiplayerProvider = ({ children }) => {\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [onlinePlayers, setOnlinePlayers] = useState([]);\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [globalMarket, setGlobalMarket] = useState(null);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [playerData, setPlayerData] = useState(null);\n\n  useEffect(() => {\n    // Connect to the multiplayer server\n    const newSocket = io('http://localhost:3001');\n    setSocket(newSocket);\n\n    // Connection events\n    newSocket.on('connect', () => {\n      console.log('Connected to multiplayer server');\n      setIsConnected(true);\n    });\n\n    newSocket.on('disconnect', () => {\n      console.log('Disconnected from multiplayer server');\n      setIsConnected(false);\n    });\n\n    // Game state events\n    newSocket.on('gameState', (data) => {\n      setGlobalMarket(data.globalMarket);\n      setLeaderboard(data.leaderboard);\n      setChatMessages(data.chatMessages);\n      setOnlinePlayers(data.onlinePlayers);\n    });\n\n    newSocket.on('marketUpdate', (market) => {\n      setGlobalMarket(market);\n      console.log('Received market update from server:', market.commodities.length, 'commodities');\n    });\n\n    newSocket.on('leaderboardUpdate', (leaderboardData) => {\n      setLeaderboard(leaderboardData);\n    });\n\n    newSocket.on('tradeExecuted', (data) => {\n      setGlobalMarket(data.updatedMarket);\n      // Update player data if it's the current player\n      if (data.playerUpdate && data.playerUpdate.id === newSocket.id) {\n        setPlayerData(prev => ({\n          ...prev,\n          credits: data.playerUpdate.credits,\n          portfolio: data.playerUpdate.portfolio\n        }));\n      }\n    });\n\n    newSocket.on('tradeError', (error) => {\n      console.error('Trade error:', error.message);\n      // You can add a notification system here\n    });\n\n    // Player events\n    newSocket.on('playerJoined', (data) => {\n      setOnlinePlayers(data.onlinePlayers);\n      // Add system message to chat\n      setChatMessages(prev => [...prev, {\n        id: Date.now(),\n        username: 'System',\n        message: `${data.username} joined the game`,\n        timestamp: new Date().toISOString(),\n        type: 'system'\n      }]);\n    });\n\n    newSocket.on('playerLeft', (data) => {\n      setOnlinePlayers(data.onlinePlayers);\n      // Add system message to chat\n      setChatMessages(prev => [...prev, {\n        id: Date.now(),\n        username: 'System',\n        message: `${data.username} left the game`,\n        timestamp: new Date().toISOString(),\n        type: 'system'\n      }]);\n    });\n\n    // Chat events\n    newSocket.on('newMessage', (message) => {\n      setChatMessages(prev => [...prev, message]);\n    });\n\n    // Cleanup on unmount\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n\n  // Join the game\n  const joinGame = (userData) => {\n    if (socket && isConnected) {\n      const playerData = {\n        username: userData.username,\n        credits: userData.gameState?.credits || 100000,\n        profit: userData.gameState?.profit || 0,\n        pnl: userData.gameState?.pnl || 0,\n        totalMargin: userData.gameState?.totalMargin || 0,\n        portfolio: userData.gameState?.portfolio || {}\n      };\n      \n      setPlayerData(playerData);\n      socket.emit('playerJoin', playerData);\n    }\n  };\n\n  // Execute a trade\n  const executeTrade = (tradeData) => {\n    if (socket && isConnected) {\n      socket.emit('executeTrade', tradeData);\n    }\n  };\n\n  // Send a chat message\n  const sendMessage = (message, type = 'chat') => {\n    if (socket && isConnected) {\n      socket.emit('sendMessage', { message, type });\n    }\n  };\n\n  // Get leaderboard\n  const getLeaderboard = () => {\n    if (socket && isConnected) {\n      socket.emit('getLeaderboard');\n    }\n  };\n\n  // Send heartbeat\n  const sendHeartbeat = () => {\n    if (socket && isConnected) {\n      socket.emit('heartbeat');\n    }\n  };\n\n  // Set up heartbeat interval\n  useEffect(() => {\n    if (isConnected) {\n      const heartbeatInterval = setInterval(sendHeartbeat, 30000); // Every 30 seconds\n      return () => clearInterval(heartbeatInterval);\n    }\n  }, [isConnected]);\n\n  const value = {\n    socket,\n    isConnected,\n    onlinePlayers,\n    leaderboard,\n    globalMarket,\n    chatMessages,\n    playerData,\n    joinGame,\n    executeTrade,\n    sendMessage,\n    getLeaderboard\n  };\n\n  return (\n    <MultiplayerContext.Provider value={value}>\n      {children}\n    </MultiplayerContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
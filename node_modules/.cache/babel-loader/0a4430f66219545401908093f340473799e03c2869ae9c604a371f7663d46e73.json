{"ast":null,"code":"import _objectSpread from\"F:/Windsurf/Native/GTC 3/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// AI Trading System with 200 traders\n// Each trader has different strategies and emotional responses\n// Trading Strategy Types\nexport const STRATEGY_TYPES={MOMENTUM:'momentum',MEAN_REVERSION:'mean_reversion',ARBITRAGE:'arbitrage',SCALPING:'scalping',SWING:'swing',VALUE:'value',GROWTH:'growth',CONTRARIAN:'contrarian',TREND_FOLLOWING:'trend_following',BREAKOUT:'breakout',SUPPLY_BASED:'supply_based'};// Emotional States\nexport const EMOTIONAL_STATES={CALM:'calm',EXCITED:'excited',FEARFUL:'fearful',GREEDY:'greedy',PANIC:'panic',FOMO:'fomo'};// Risk Tolerance Levels\nexport const RISK_LEVELS={CONSERVATIVE:0.2,MODERATE:0.5,AGGRESSIVE:0.8,EXTREME:1.0};// Generate 200 unique AI traders\nexport const generateAITraders=()=>{const traders=[];const names=['AlphaBot','QuantumTrader','NeuralNet','CyberTrader','DataMiner','AlgoMaster','SmartBot','TradeAI','MarketMind','ProfitBot','CryptoKing','StockMaster','TrendHunter','MomentumBot','ArbitrageAI','ScalpBot','SwingTrader','ValueBot','GrowthAI','ContrarianBot','BreakoutAI','SignalMaster','PatternBot','VolatilityAI','LiquidityBot','SpreadHunter','GapTrader','NewsBot','SentimentAI','VolumeBot','PriceAction','TechnicalAI','FundamentalBot','MacroTrader','MicroBot','SectorAI','IndexBot','CommodityAI','CurrencyBot','BondTrader','DerivativeAI','OptionBot','FutureTrader','SwapAI','HedgeBot','PortfolioAI','RiskBot','BalanceTrader','DiversifyAI','ConcentrateBot','LeverageAI','MarginBot','ShortTrader','LongAI','BullBot','BearAI','NeutralTrader','BiasBot','EmotionAI','LogicBot','InstinctAI','AnalysisBot','ResearchAI','BacktestBot','ForwardAI','PredictBot','ForecastAI','ProjectBot','EstimateAI','CalculateBot','ComputeAI','ProcessBot','ExecuteAI','ImplementBot','DeployAI','LaunchBot','StartAI','InitBot','BeginAI','CommenceBot','TriggerAI','ActivateBot','EnableAI','PowerBot','EnergyAI','ForceBot','DriveAI','PushBot','PullAI','DrawBot','AttractAI','RepelBot','RejectAI','AcceptBot','ApproveAI','DenyBot','BlockAI','AllowBot','PermitAI','RestrictBot','LimitAI','BoundBot','CapAI','FloorBot','CeilingAI','BaseBot','PeakAI','ValleyBot','SummitAI','DepthBot','HeightAI','WidthBot','LengthAI','SizeBot','ScaleAI','ScopeBot','RangeAI','SpanBot','ExtentAI','ReachBot','GraspAI','HoldBot','GripAI','ClutchBot','SeizeAI','CaptureBot','SnatchAI','GrabBot','TakeAI','GiveBot','OfferAI','BidBot','AskAI','QuoteBot','PriceAI','CostBot','ValueAI','WorthBot','MeritAI','DeserveBot','EarnAI','GainBot','ProfitAI','LossBot','WinAI','LoseBot','BeatAI','DefeatBot','ConquerAI','SurrenderBot','YieldAI','ResistBot','FightAI','PeaceBot','WarAI','BattleBot','CombatAI','StruggleBot','StriveAI','AchieveBot','SucceedAI','FailBot','SucceedAI','FailBot','WinAI','LoseBot','RiseAI','FallBot','ClimbAI','DescendBot','AscendAI','DropBot','JumpAI','LeapBot','BoundAI','SpringBot','BounceAI','ReboundBot','RecoverAI','HealBot','MendAI','FixBot','RepairAI','BreakBot','DamageAI','HarmBot','HurtAI','InjureBot','WoundAI','CutBot','SliceAI','ChopBot','SplitAI','DivideBot','MultiplyAI','AddBot','SumAI','TotalBot','CountAI','NumberBot','DigitAI','FigureBot','CalculateAI','ComputeBot','ProcessAI','HandleBot','ManageAI','ControlBot','DirectAI','GuideBot','LeadAI','FollowBot','TrackAI','TraceBot','FindAI','SearchBot','SeekAI','LookBot','WatchAI','ObserveBot','MonitorAI','CheckBot','VerifyAI','ConfirmBot','ValidateAI','TestBot','TrialAI','ExperimentBot'];for(let i=0;i<200;i++){const trader={id:i+1,name:names[i%names.length]+(Math.floor(i/names.length)+1),strategy:Object.values(STRATEGY_TYPES)[i%Object.values(STRATEGY_TYPES).length],riskTolerance:Object.values(RISK_LEVELS)[i%Object.values(RISK_LEVELS).length],emotionalState:EMOTIONAL_STATES.CALM,emotionalIntensity:Math.random(),// 0-1 scale\nfomoSusceptibility:Math.random(),// How easily they get FOMO\npanicSusceptibility:Math.random(),// How easily they panic\nmomentumSensitivity:Math.random(),// How much they follow momentum\nconfidence:0.5,// Current confidence level\ncapital:50000+Math.random()*150000,// Starting capital\nportfolio:{},tradeHistory:[],lastTradeTime:Date.now(),successRate:0.5,profitLoss:0,activePositions:{},maxPositions:3+Math.floor(Math.random()*5),// 3-7 positions\npreferredCommodities:[],// Will be set based on strategy\nmarketSentiment:0,// -1 to 1 (bearish to bullish)\nvolatilityTolerance:Math.random(),liquidityPreference:Math.random(),newsSensitivity:Math.random(),technicalAnalysisWeight:Math.random(),fundamentalAnalysisWeight:Math.random(),emotionalDecisionWeight:Math.random(),rationalDecisionWeight:1-Math.random()*0.3,// 0.7-1.0\nherdInstinct:Math.random(),contrarianTendency:Math.random(),patience:Math.random(),aggressiveness:Math.random(),stopLossThreshold:0.05+Math.random()*0.15,// 5-20%\ntakeProfitThreshold:0.1+Math.random()*0.2,// 10-30%\nmaxDrawdown:0.1+Math.random()*0.2,// 10-30%\nrebalancingFrequency:1+Math.floor(Math.random()*7),// 1-7 days\ndiversificationTarget:0.3+Math.random()*0.4,// 30-70% in top position\nleveragePreference:Math.random()*0.5,// 0-50% leverage\nshortingPreference:Math.random(),dayTradingPreference:Math.random(),swingTradingPreference:Math.random(),positionSizingMethod:['fixed','kelly','volatility','equal'][Math.floor(Math.random()*4)],marketHours:{start:6+Math.floor(Math.random()*6),// 6 AM - 12 PM\nend:12+Math.floor(Math.random()*12)// 12 PM - 12 AM\n},timezone:Math.floor(Math.random()*24),lastUpdate:Date.now(),isActive:true,// Factory building properties\nfactories:[],// AI trader's factories\nfactoryBuildingPreference:Math.random(),// How much they prefer building factories\nproductionFocus:Math.random(),// How much they focus on production vs trading\nfactoryInvestmentRatio:0.2+Math.random()*0.4,// 20-60% of capital for factories\nmaxFactories:2+Math.floor(Math.random()*4),// 2-5 factories max\nlastFactoryDecision:Date.now(),factoryDecisionCooldown:30000+Math.random()*60000,// 30-90 seconds between factory decisions\nperformanceMetrics:{totalTrades:0,winningTrades:0,losingTrades:0,averageWin:0,averageLoss:0,largestWin:0,largestLoss:0,consecutiveWins:0,consecutiveLosses:0,sharpeRatio:0,maxDrawdown:0,winRate:0,profitFactor:0,// Factory metrics\ntotalFactories:0,factoryProduction:0,factoryRevenue:0,factoryROI:0}};// Set preferred commodities based on strategy\ntrader.preferredCommodities=getPreferredCommodities(trader.strategy);traders.push(trader);}return traders;};// Get preferred commodities based on trading strategy\nconst getPreferredCommodities=strategy=>{const commodityPreferences={[STRATEGY_TYPES.MOMENTUM]:['quantum-crystals','dark-matter','plasma-cells'],[STRATEGY_TYPES.MEAN_REVERSION]:['neural-processors','antimatter-cores'],[STRATEGY_TYPES.ARBITRAGE]:['quantum-crystals','dark-matter','neural-processors'],[STRATEGY_TYPES.SCALPING]:['plasma-cells','quantum-crystals'],[STRATEGY_TYPES.SWING]:['antimatter-cores','fusion-reactors'],[STRATEGY_TYPES.VALUE]:['neural-processors','fusion-reactors'],[STRATEGY_TYPES.GROWTH]:['quantum-crystals','dark-matter'],[STRATEGY_TYPES.CONTRARIAN]:['antimatter-cores','plasma-cells'],[STRATEGY_TYPES.TREND_FOLLOWING]:['quantum-crystals','dark-matter','neural-processors'],[STRATEGY_TYPES.BREAKOUT]:['plasma-cells','fusion-reactors'],[STRATEGY_TYPES.SUPPLY_BASED]:['quantum-crystals','dark-matter','neural-processors','antimatter-cores','plasma-cells','fusion-reactors']};return commodityPreferences[strategy]||['quantum-crystals','dark-matter'];};// Update trader emotional state based on market conditions\nexport const updateTraderEmotions=(trader,marketData,recentTrades)=>{const{commodities,marketTrends}=marketData;// Calculate market volatility\nconst volatility=calculateMarketVolatility(commodities);// Calculate momentum\nconst momentum=calculateMarketMomentum(commodities);// Calculate supply stress\nconst supplyStress=calculateSupplyStress(commodities,trader);// Calculate FOMO trigger\nconst fomoTrigger=calculateFOMOTrigger(recentTrades,trader);// Calculate panic trigger\nconst panicTrigger=calculatePanicTrigger(volatility,trader.portfolio,commodities);// Update emotional state\nlet newEmotionalState=trader.emotionalState;let newEmotionalIntensity=trader.emotionalIntensity;// FOMO Logic\nif(fomoTrigger>trader.fomoSusceptibility*0.8){newEmotionalState=EMOTIONAL_STATES.FOMO;newEmotionalIntensity=Math.min(1,fomoTrigger);}// Panic Logic\nelse if(panicTrigger>trader.panicSusceptibility*0.7){newEmotionalState=EMOTIONAL_STATES.PANIC;newEmotionalIntensity=Math.min(1,panicTrigger);}// Supply Stress Logic\nelse if(supplyStress>0.6){newEmotionalState=EMOTIONAL_STATES.FEARFUL;newEmotionalIntensity=Math.min(1,supplyStress);}// Greed Logic\nelse if(momentum>0.6&&trader.profitLoss>0){newEmotionalState=EMOTIONAL_STATES.GREEDY;newEmotionalIntensity=Math.min(1,momentum*0.8);}// Fear Logic\nelse if(volatility>0.7||trader.profitLoss<-trader.capital*0.1){newEmotionalState=EMOTIONAL_STATES.FEARFUL;newEmotionalIntensity=Math.min(1,volatility*0.9);}// Excitement Logic\nelse if(momentum>0.4&&trader.profitLoss>trader.capital*0.05){newEmotionalState=EMOTIONAL_STATES.EXCITED;newEmotionalIntensity=Math.min(1,momentum*0.6);}// Calm Logic\nelse{newEmotionalState=EMOTIONAL_STATES.CALM;newEmotionalIntensity=Math.max(0,newEmotionalIntensity-0.1);}return _objectSpread(_objectSpread({},trader),{},{emotionalState:newEmotionalState,emotionalIntensity:newEmotionalIntensity});};// Calculate market volatility\nconst calculateMarketVolatility=commodities=>{const priceChanges=commodities.map(commodity=>{const history=commodity.priceHistory;if(history.length<2)return 0;const changes=[];for(let i=1;i<history.length;i++){const change=Math.abs(history[i].price-history[i-1].price)/history[i-1].price;changes.push(change);}return changes.reduce((sum,change)=>sum+change,0)/changes.length;});return priceChanges.reduce((sum,volatility)=>sum+volatility,0)/priceChanges.length;};// Calculate market momentum\nconst calculateMarketMomentum=commodities=>{const momentums=commodities.map(commodity=>{const history=commodity.priceHistory;if(history.length<3)return 0;const recent=history.slice(-3);const older=history.slice(-6,-3);if(older.length===0)return 0;const recentAvg=recent.reduce((sum,h)=>sum+h.price,0)/recent.length;const olderAvg=older.reduce((sum,h)=>sum+h.price,0)/older.length;return(recentAvg-olderAvg)/olderAvg;});return momentums.reduce((sum,momentum)=>sum+momentum,0)/momentums.length;};// Calculate FOMO trigger\nconst calculateFOMOTrigger=(recentTrades,trader)=>{if(recentTrades.length===0)return 0;const buyVolume=recentTrades.filter(trade=>trade.action==='BUY').reduce((sum,trade)=>sum+trade.quantity,0);const sellVolume=recentTrades.filter(trade=>trade.action==='SELL').reduce((sum,trade)=>sum+trade.quantity,0);const totalVolume=buyVolume+sellVolume;if(totalVolume===0)return 0;const buyRatio=buyVolume/totalVolume;const volumeIntensity=Math.min(1,totalVolume/1000);// Normalize volume\nreturn buyRatio*volumeIntensity*trader.fomoSusceptibility;};// Calculate panic trigger\nconst calculatePanicTrigger=(volatility,portfolio,commodities)=>{let portfolioValue=0;let portfolioCost=0;Object.entries(portfolio).forEach(_ref=>{let[commodityId,quantity]=_ref;const commodity=commodities.find(c=>c.id===commodityId);if(commodity){portfolioValue+=commodity.lastPrice*quantity;portfolioCost+=commodity.buyPrice*quantity;}});const unrealizedPnL=(portfolioValue-portfolioCost)/portfolioCost;const volatilityImpact=volatility*0.5;const lossImpact=unrealizedPnL<-0.1?Math.abs(unrealizedPnL)*0.3:0;return Math.min(1,volatilityImpact+lossImpact);};// Calculate supply stress\nconst calculateSupplyStress=(commodities,trader)=>{let totalStress=0;let commodityCount=0;// Check each commodity in trader's preferred commodities\ntrader.preferredCommodities.forEach(commodityId=>{const commodity=commodities.find(c=>c.id===commodityId);if(!commodity)return;const{supply}=commodity;const baseSupply=2000;// Baseline supply level (updated to match starting supply)\nconst supplyRatio=supply/baseSupply;// High supply = stress (oversupply)\n// Low supply = stress (shortage)\nlet stress=0;if(supplyRatio>3){// Oversupply stress\nstress=Math.min(1,(supplyRatio-3)/2);}else if(supplyRatio<0.3){// Shortage stress\nstress=Math.min(1,(0.3-supplyRatio)/0.3);}totalStress+=stress;commodityCount++;});return commodityCount>0?totalStress/commodityCount:0;};// Generate trading decision for a trader\nexport const generateTradingDecision=(trader,commodities,marketData,recentTrades)=>{const decisions=[];// Skip if trader is not active or outside trading hours\nif(!trader.isActive)return decisions;const currentHour=new Date().getHours();if(currentHour<trader.marketHours.start||currentHour>trader.marketHours.end){return decisions;}// Update emotional state\nconst updatedTrader=updateTraderEmotions(trader,marketData,recentTrades);// Generate trading decisions for each preferred commodity\nupdatedTrader.preferredCommodities.forEach(commodityId=>{const commodity=commodities.find(c=>c.id===commodityId);if(!commodity)return;const decision=calculateTradeDecision(updatedTrader,commodity,marketData,recentTrades);if(decision){decisions.push(decision);}});return decisions;};// Generate factory building decision for a trader\nexport const generateFactoryDecision=(trader,commodities,marketData,recentTrades)=>{const decisions=[];// Skip if trader is not active or outside trading hours\nif(!trader.isActive)return decisions;const currentHour=new Date().getHours();if(currentHour<trader.marketHours.start||currentHour>trader.marketHours.end){return decisions;}// Check cooldown for factory decisions\nconst now=Date.now();if(now-trader.lastFactoryDecision<trader.factoryDecisionCooldown){return decisions;}// Check if trader has reached max factories\nif(trader.factories.length>=trader.maxFactories){return decisions;}// Check if trader has enough capital for factory investment\nconst availableCapital=trader.capital*trader.factoryInvestmentRatio;if(availableCapital<50000){// Minimum factory cost\nreturn decisions;}// Update emotional state\nconst updatedTrader=updateTraderEmotions(trader,marketData,recentTrades);// Generate factory building decisions\nconst factoryDecision=calculateFactoryDecision(updatedTrader,commodities,marketData,recentTrades);if(factoryDecision){decisions.push(factoryDecision);}return decisions;};// Calculate individual trade decision\nconst calculateTradeDecision=(trader,commodity,marketData,recentTrades)=>{const{strategy,emotionalState,emotionalIntensity,riskTolerance,confidence,capital,portfolio,activePositions,maxPositions}=trader;// Check position limits\nif(Object.keys(activePositions).length>=maxPositions&&!activePositions[commodity.id]){return null;}// Calculate base signal from strategy\nlet signal=calculateStrategySignal(trader,commodity,marketData);// Apply emotional adjustments\nsignal=applyEmotionalAdjustments(signal,trader,commodity,recentTrades);// Calculate position size\nconst positionSize=calculatePositionSize(trader,commodity,signal);// Determine action\nlet action=null;let quantity=0;if(signal>0.6&&positionSize>0){action='BUY';quantity=Math.floor(positionSize);}else if(signal<0.4&&activePositions[commodity.id]){action='SELL';quantity=activePositions[commodity.id];}if(action&&quantity>0){return{traderId:trader.id,traderName:trader.name,commodityId:commodity.id,commodityName:commodity.name,action,quantity,price:action==='BUY'?commodity.buyPrice:commodity.sellPrice,signal,emotionalState,emotionalIntensity,strategy,timestamp:Date.now()};}return null;};// Calculate factory building decision\nconst calculateFactoryDecision=(trader,commodities,marketData,recentTrades)=>{const{capital,factoryBuildingPreference,productionFocus,emotionalState,emotionalIntensity,factories,strategy}=trader;// Calculate factory building signal based on multiple factors\nlet factorySignal=0;// Base preference for factory building\nfactorySignal+=factoryBuildingPreference*0.3;// Production focus preference\nfactorySignal+=productionFocus*0.2;// Strategy-based factory preference\nconst strategyFactoryPreference={[STRATEGY_TYPES.VALUE]:0.8,// Value traders love factories\n[STRATEGY_TYPES.GROWTH]:0.7,// Growth traders like production\n[STRATEGY_TYPES.SUPPLY_BASED]:0.6,// Supply-based traders understand production\n[STRATEGY_TYPES.MOMENTUM]:0.3,// Momentum traders prefer trading\n[STRATEGY_TYPES.SCALPING]:0.2,// Scalpers prefer quick trades\n[STRATEGY_TYPES.ARBITRAGE]:0.4,// Arbitrage traders are neutral\n[STRATEGY_TYPES.MEAN_REVERSION]:0.5,// Mean reversion traders like stability\n[STRATEGY_TYPES.SWING]:0.6,// Swing traders like production\n[STRATEGY_TYPES.CONTRARIAN]:0.4,// Contrarian traders are neutral\n[STRATEGY_TYPES.TREND_FOLLOWING]:0.5,// Trend followers are neutral\n[STRATEGY_TYPES.BREAKOUT]:0.3// Breakout traders prefer trading\n};factorySignal+=(strategyFactoryPreference[strategy]||0.5)*0.2;// Emotional adjustments\nswitch(emotionalState){case EMOTIONAL_STATES.GREEDY:factorySignal+=emotionalIntensity*0.2;// Greedy traders want more production\nbreak;case EMOTIONAL_STATES.FOMO:factorySignal+=emotionalIntensity*0.1;// FOMO traders want to build\nbreak;case EMOTIONAL_STATES.PANIC:factorySignal-=emotionalIntensity*0.3;// Panic traders avoid building\nbreak;case EMOTIONAL_STATES.FEARFUL:factorySignal-=emotionalIntensity*0.2;// Fearful traders avoid building\nbreak;}// Market conditions analysis\nconst marketConditions=analyzeMarketForFactories(commodities,recentTrades);factorySignal+=marketConditions.factoryOpportunity*0.3;// Capital efficiency check\nconst capitalEfficiency=Math.min(1,capital/200000);// More capital = better factory building\nfactorySignal+=capitalEfficiency*0.1;// Factory diversity check\nconst factoryDiversity=1-factories.length/trader.maxFactories;// More diversity = better\nfactorySignal+=factoryDiversity*0.1;// Determine if should build factory\nif(factorySignal>0.6){// Find best commodity for factory\nconst bestCommodity=findBestCommodityForFactory(commodities,trader);if(bestCommodity){return{traderId:trader.id,traderName:trader.name,action:'BUILD_FACTORY',commodityId:bestCommodity.id,commodityName:bestCommodity.name,factoryType:'BASIC',// For now, all factories are basic\nsignal:factorySignal,emotionalState,emotionalIntensity,strategy,timestamp:Date.now()};}}return null;};// Analyze market conditions for factory building\nconst analyzeMarketForFactories=(commodities,recentTrades)=>{let factoryOpportunity=0;// Check for commodities with high demand (low supply)\nconst lowSupplyCommodities=commodities.filter(c=>c.supply<1500);factoryOpportunity+=lowSupplyCommodities.length/commodities.length*0.4;// Check for commodities with rising prices\nconst risingPriceCommodities=commodities.filter(c=>{if(c.priceHistory.length<3)return false;const recent=c.priceHistory.slice(-3);const older=c.priceHistory.slice(-6,-3);if(older.length===0)return false;const recentAvg=recent.reduce((sum,h)=>sum+h.price,0)/recent.length;const olderAvg=older.reduce((sum,h)=>sum+h.price,0)/older.length;return recentAvg>olderAvg;});factoryOpportunity+=risingPriceCommodities.length/commodities.length*0.3;// Check for high trading volume (opportunity)\nconst highVolume=recentTrades.length>10;factoryOpportunity+=highVolume?0.2:0;// Check for supply shortages (high prices)\nconst highPriceCommodities=commodities.filter(c=>c.lastPrice>1000);factoryOpportunity+=highPriceCommodities.length/commodities.length*0.1;return{factoryOpportunity};};// Find best commodity for factory building\nconst findBestCommodityForFactory=(commodities,trader)=>{let bestCommodity=null;let bestScore=0;commodities.forEach(commodity=>{let score=0;// Prefer commodities in trader's preferred list\nif(trader.preferredCommodities.includes(commodity.id)){score+=0.3;}// Prefer commodities with low supply (high demand)\nconst supplyRatio=commodity.supply/2000;score+=(1-supplyRatio)*0.3;// Prefer commodities with high prices (more profitable)\nconst priceScore=Math.min(1,commodity.lastPrice/1000);score+=priceScore*0.2;// Prefer commodities with rising prices\nif(commodity.priceHistory.length>=3){const recent=commodity.priceHistory.slice(-3);const older=commodity.priceHistory.slice(-6,-3);if(older.length>0){const recentAvg=recent.reduce((sum,h)=>sum+h.price,0)/recent.length;const olderAvg=older.reduce((sum,h)=>sum+h.price,0)/older.length;if(recentAvg>olderAvg){score+=0.2;}}}if(score>bestScore){bestScore=score;bestCommodity=commodity;}});return bestCommodity;};// Calculate strategy-based signal\nconst calculateStrategySignal=(trader,commodity,marketData)=>{const{strategy}=trader;const{priceHistory,lastPrice,buyPrice,sellPrice}=commodity;switch(strategy){case STRATEGY_TYPES.MOMENTUM:return calculateMomentumSignal(priceHistory);case STRATEGY_TYPES.MEAN_REVERSION:return calculateMeanReversionSignal(priceHistory);case STRATEGY_TYPES.ARBITRAGE:return calculateArbitrageSignal(buyPrice,sellPrice);case STRATEGY_TYPES.SCALPING:return calculateScalpingSignal(priceHistory);case STRATEGY_TYPES.SWING:return calculateSwingSignal(priceHistory);case STRATEGY_TYPES.VALUE:return calculateValueSignal(commodity);case STRATEGY_TYPES.GROWTH:return calculateGrowthSignal(priceHistory);case STRATEGY_TYPES.CONTRARIAN:return calculateContrarianSignal(priceHistory);case STRATEGY_TYPES.TREND_FOLLOWING:return calculateTrendFollowingSignal(priceHistory);case STRATEGY_TYPES.BREAKOUT:return calculateBreakoutSignal(priceHistory);case STRATEGY_TYPES.SUPPLY_BASED:return calculateSupplyBasedSignal(commodity);default:return 0.5;}};// Strategy-specific signal calculations\nconst calculateMomentumSignal=priceHistory=>{if(priceHistory.length<3)return 0.5;const recent=priceHistory.slice(-3);const older=priceHistory.slice(-6,-3);if(older.length===0)return 0.5;const recentAvg=recent.reduce((sum,h)=>sum+h.price,0)/recent.length;const olderAvg=older.reduce((sum,h)=>sum+h.price,0)/older.length;const momentum=(recentAvg-olderAvg)/olderAvg;return Math.max(0,Math.min(1,0.5+momentum*2));};const calculateMeanReversionSignal=priceHistory=>{if(priceHistory.length<6)return 0.5;const prices=priceHistory.map(h=>h.price);const mean=prices.reduce((sum,price)=>sum+price,0)/prices.length;const currentPrice=prices[prices.length-1];const deviation=(currentPrice-mean)/mean;return Math.max(0,Math.min(1,0.5-deviation*2));};const calculateArbitrageSignal=(buyPrice,sellPrice)=>{const spread=(sellPrice-buyPrice)/buyPrice;return Math.max(0,Math.min(1,spread*10));};const calculateScalpingSignal=priceHistory=>{if(priceHistory.length<2)return 0.5;const recent=priceHistory.slice(-2);const change=(recent[1].price-recent[0].price)/recent[0].price;return Math.max(0,Math.min(1,0.5+change*5));};const calculateSwingSignal=priceHistory=>{if(priceHistory.length<5)return 0.5;const prices=priceHistory.map(h=>h.price);const trend=(prices[prices.length-1]-prices[0])/prices[0];return Math.max(0,Math.min(1,0.5+trend*2));};const calculateValueSignal=commodity=>{const{supply,lastPrice}=commodity;// Calculate value based on supply fundamentals\n// Lower supply = higher value\nconst baseSupply=2000;// Baseline supply level (updated to match starting supply)\nconst supplyRatio=supply/baseSupply;// Much more reactive supply value calculation\nlet supplyValue=0.5;if(supplyRatio<0.4){// Supply shortage - very high value\nsupplyValue=0.95+(0.4-supplyRatio)*0.4;// Much higher value\n}else if(supplyRatio>2.0){// Supply glut - very low value\nsupplyValue=0.05-(supplyRatio-2.0)*0.15;// Much lower value\n}else{// Normal range - more aggressive curve\nsupplyValue=1-supplyRatio/1.5;// More aggressive curve\n}// Consider price relative to supply (mean reversion component)\nconst avgPrice=100;// Assume average price as baseline\nconst priceRatio=lastPrice/avgPrice;const priceValue=Math.max(0,Math.min(1,1-(priceRatio-1)*0.5));// Combine supply and price factors with more weight on supply\nconst signal=supplyValue*0.8+priceValue*0.2;return Math.max(0,Math.min(1,signal));};const calculateGrowthSignal=priceHistory=>{if(priceHistory.length<4)return 0.5;const growth=priceHistory.slice(-4).map((h,i,arr)=>{if(i===0)return 0;return(h.price-arr[i-1].price)/arr[i-1].price;}).slice(1);const avgGrowth=growth.reduce((sum,g)=>sum+g,0)/growth.length;return Math.max(0,Math.min(1,0.5+avgGrowth*3));};const calculateContrarianSignal=priceHistory=>{if(priceHistory.length<3)return 0.5;const recent=priceHistory.slice(-3);const trend=(recent[2].price-recent[0].price)/recent[0].price;return Math.max(0,Math.min(1,0.5-trend*2));};const calculateTrendFollowingSignal=priceHistory=>{if(priceHistory.length<4)return 0.5;const prices=priceHistory.map(h=>h.price);const trend=(prices[prices.length-1]-prices[0])/prices[0];return Math.max(0,Math.min(1,0.5+trend*1.5));};const calculateBreakoutSignal=priceHistory=>{if(priceHistory.length<6)return 0.5;const prices=priceHistory.map(h=>h.price);const high=Math.max(...prices.slice(0,-1));const current=prices[prices.length-1];if(current>high){return Math.min(1,0.7+(current-high)/high);}return 0.3;};// Calculate supply-based signal\nconst calculateSupplyBasedSignal=commodity=>{const{supply}=commodity;// Calculate supply-based signal\n// Lower supply = higher signal (buy)\n// Higher supply = lower signal (sell)\nconst baseSupply=2000;// Baseline supply level (updated to match starting supply)\nconst supplyRatio=supply/baseSupply;// Much more reactive signal calculation\nlet signal=0.5;// Neutral starting point\nif(supplyRatio<0.5){// Supply shortage - very strong buy signal\nsignal=0.9+(0.5-supplyRatio)*0.6;// Much stronger signal\n}else if(supplyRatio>2.0){// Supply glut - very strong sell signal\nsignal=0.1-(supplyRatio-2.0)*0.3;// Much stronger signal\n}else{// Normal range - more aggressive linear relationship\nsignal=1-supplyRatio/1.5;// More aggressive curve\n}// Add more noise to make it more realistic\nconst noise=(Math.random()-0.5)*0.25;// Much more noise for more volatility\nreturn Math.max(0,Math.min(1,signal+noise));};// Apply emotional adjustments to signal\nconst applyEmotionalAdjustments=(signal,trader,commodity,recentTrades)=>{const{emotionalState,emotionalIntensity,fomoSusceptibility,panicSusceptibility}=trader;let adjustedSignal=signal;switch(emotionalState){case EMOTIONAL_STATES.FOMO:// FOMO makes traders more likely to buy\nadjustedSignal+=emotionalIntensity*0.3;break;case EMOTIONAL_STATES.PANIC:// Panic makes traders more likely to sell\nadjustedSignal-=emotionalIntensity*0.4;break;case EMOTIONAL_STATES.GREEDY:// Greed makes traders more aggressive\nadjustedSignal+=emotionalIntensity*0.2;break;case EMOTIONAL_STATES.FEARFUL:// Fear makes traders more conservative\nadjustedSignal-=emotionalIntensity*0.3;break;case EMOTIONAL_STATES.EXCITED:// Excitement increases confidence\nadjustedSignal+=emotionalIntensity*0.1;break;}// Apply FOMO from recent trades\nconst fomoAdjustment=calculateFOMOAdjustment(recentTrades,commodity,fomoSusceptibility);adjustedSignal+=fomoAdjustment;// Apply panic from volatility\nconst panicAdjustment=calculatePanicAdjustment(commodity,panicSusceptibility);adjustedSignal+=panicAdjustment;return Math.max(0,Math.min(1,adjustedSignal));};// Calculate FOMO adjustment from recent trades\nconst calculateFOMOAdjustment=(recentTrades,commodity,fomoSusceptibility)=>{const commodityTrades=recentTrades.filter(trade=>trade.commodity.toLowerCase().includes(commodity.name.toLowerCase().substring(0,3)));if(commodityTrades.length===0)return 0;const buyVolume=commodityTrades.filter(trade=>trade.action==='BUY').reduce((sum,trade)=>sum+trade.quantity,0);const sellVolume=commodityTrades.filter(trade=>trade.action==='SELL').reduce((sum,trade)=>sum+trade.quantity,0);const totalVolume=buyVolume+sellVolume;if(totalVolume===0)return 0;const buyRatio=buyVolume/totalVolume;return(buyRatio-0.5)*fomoSusceptibility*0.2;};// Calculate panic adjustment from volatility\nconst calculatePanicAdjustment=(commodity,panicSusceptibility)=>{const priceHistory=commodity.priceHistory;if(priceHistory.length<2)return 0;const recentChanges=[];for(let i=1;i<priceHistory.length;i++){const change=Math.abs(priceHistory[i].price-priceHistory[i-1].price)/priceHistory[i-1].price;recentChanges.push(change);}const volatility=recentChanges.reduce((sum,change)=>sum+change,0)/recentChanges.length;return-volatility*panicSusceptibility*0.3;};// Calculate position size\nconst calculatePositionSize=(trader,commodity,signal)=>{const{capital,riskTolerance,emotionalIntensity,emotionalState}=trader;// Base position size based on signal strength\nlet baseSize=Math.abs(signal-0.5)*2;// 0-1 scale\n// Adjust for risk tolerance\nbaseSize*=riskTolerance;// Adjust for emotional state\nswitch(emotionalState){case EMOTIONAL_STATES.FOMO:case EMOTIONAL_STATES.GREEDY:baseSize*=1+emotionalIntensity*0.5;break;case EMOTIONAL_STATES.PANIC:case EMOTIONAL_STATES.FEARFUL:baseSize*=1-emotionalIntensity*0.7;break;}// Calculate actual quantity\nconst maxQuantity=Math.floor(capital*0.1/commodity.lastPrice);// Max 10% of capital\nconst quantity=Math.floor(baseSize*maxQuantity);return Math.max(1,Math.min(quantity,100));// Between 1 and 100\n};// Execute trade and update trader state\nexport const executeTrade=(trader,decision,commodities)=>{const commodity=commodities.find(c=>c.id===decision.commodityId);if(!commodity)return trader;const tradeValue=decision.quantity*decision.price;const updatedTrader=_objectSpread({},trader);if(decision.action==='BUY'){// Update capital\nupdatedTrader.capital-=tradeValue;// Update portfolio\nupdatedTrader.portfolio[commodity.id]=(updatedTrader.portfolio[commodity.id]||0)+decision.quantity;// Update active positions\nupdatedTrader.activePositions[commodity.id]=decision.quantity;}else if(decision.action==='SELL'){// Update capital\nupdatedTrader.capital+=tradeValue;// Update portfolio\nupdatedTrader.portfolio[commodity.id]=Math.max(0,(updatedTrader.portfolio[commodity.id]||0)-decision.quantity);// Remove from active positions if sold all\nif(updatedTrader.portfolio[commodity.id]===0){delete updatedTrader.activePositions[commodity.id];}else{updatedTrader.activePositions[commodity.id]=updatedTrader.portfolio[commodity.id];}}// Update trade history\nupdatedTrader.tradeHistory.push(_objectSpread(_objectSpread({},decision),{},{timestamp:Date.now(),commodityPrice:commodity.lastPrice}));// Keep only last 100 trades\nif(updatedTrader.tradeHistory.length>100){updatedTrader.tradeHistory=updatedTrader.tradeHistory.slice(-100);}// Update last trade time\nupdatedTrader.lastTradeTime=Date.now();return updatedTrader;};// Update trader performance metrics\nexport const updateTraderPerformance=trader=>{const{tradeHistory,capital}=trader;if(tradeHistory.length===0)return trader;const updatedTrader=_objectSpread({},trader);const metrics=updatedTrader.performanceMetrics;// Calculate basic metrics\nmetrics.totalTrades=tradeHistory.length;// Calculate P&L\nlet totalPnL=0;let winningTrades=0;let losingTrades=0;let totalWins=0;let totalLosses=0;tradeHistory.forEach(trade=>{if(trade.action==='SELL'){const buyTrade=tradeHistory.find(t=>t.action==='BUY'&&t.commodityId===trade.commodityId&&t.timestamp<trade.timestamp);if(buyTrade){const pnl=(trade.price-buyTrade.price)*trade.quantity;totalPnL+=pnl;if(pnl>0){winningTrades++;totalWins+=pnl;}else{losingTrades++;totalLosses+=Math.abs(pnl);}}}});metrics.winningTrades=winningTrades;metrics.losingTrades=losingTrades;metrics.averageWin=winningTrades>0?totalWins/winningTrades:0;metrics.averageLoss=losingTrades>0?totalLosses/losingTrades:0;metrics.winRate=metrics.totalTrades>0?winningTrades/metrics.totalTrades:0;metrics.profitFactor=totalLosses>0?totalWins/totalLosses:0;updatedTrader.profitLoss=totalPnL;updatedTrader.successRate=metrics.winRate;return updatedTrader;};","map":{"version":3,"names":["STRATEGY_TYPES","MOMENTUM","MEAN_REVERSION","ARBITRAGE","SCALPING","SWING","VALUE","GROWTH","CONTRARIAN","TREND_FOLLOWING","BREAKOUT","SUPPLY_BASED","EMOTIONAL_STATES","CALM","EXCITED","FEARFUL","GREEDY","PANIC","FOMO","RISK_LEVELS","CONSERVATIVE","MODERATE","AGGRESSIVE","EXTREME","generateAITraders","traders","names","i","trader","id","name","length","Math","floor","strategy","Object","values","riskTolerance","emotionalState","emotionalIntensity","random","fomoSusceptibility","panicSusceptibility","momentumSensitivity","confidence","capital","portfolio","tradeHistory","lastTradeTime","Date","now","successRate","profitLoss","activePositions","maxPositions","preferredCommodities","marketSentiment","volatilityTolerance","liquidityPreference","newsSensitivity","technicalAnalysisWeight","fundamentalAnalysisWeight","emotionalDecisionWeight","rationalDecisionWeight","herdInstinct","contrarianTendency","patience","aggressiveness","stopLossThreshold","takeProfitThreshold","maxDrawdown","rebalancingFrequency","diversificationTarget","leveragePreference","shortingPreference","dayTradingPreference","swingTradingPreference","positionSizingMethod","marketHours","start","end","timezone","lastUpdate","isActive","factories","factoryBuildingPreference","productionFocus","factoryInvestmentRatio","maxFactories","lastFactoryDecision","factoryDecisionCooldown","performanceMetrics","totalTrades","winningTrades","losingTrades","averageWin","averageLoss","largestWin","largestLoss","consecutiveWins","consecutiveLosses","sharpeRatio","winRate","profitFactor","totalFactories","factoryProduction","factoryRevenue","factoryROI","getPreferredCommodities","push","commodityPreferences","updateTraderEmotions","marketData","recentTrades","commodities","marketTrends","volatility","calculateMarketVolatility","momentum","calculateMarketMomentum","supplyStress","calculateSupplyStress","fomoTrigger","calculateFOMOTrigger","panicTrigger","calculatePanicTrigger","newEmotionalState","newEmotionalIntensity","min","max","_objectSpread","priceChanges","map","commodity","history","priceHistory","changes","change","abs","price","reduce","sum","momentums","recent","slice","older","recentAvg","h","olderAvg","buyVolume","filter","trade","action","quantity","sellVolume","totalVolume","buyRatio","volumeIntensity","portfolioValue","portfolioCost","entries","forEach","_ref","commodityId","find","c","lastPrice","buyPrice","unrealizedPnL","volatilityImpact","lossImpact","totalStress","commodityCount","supply","baseSupply","supplyRatio","stress","generateTradingDecision","decisions","currentHour","getHours","updatedTrader","decision","calculateTradeDecision","generateFactoryDecision","availableCapital","factoryDecision","calculateFactoryDecision","keys","signal","calculateStrategySignal","applyEmotionalAdjustments","positionSize","calculatePositionSize","traderId","traderName","commodityName","sellPrice","timestamp","factorySignal","strategyFactoryPreference","marketConditions","analyzeMarketForFactories","factoryOpportunity","capitalEfficiency","factoryDiversity","bestCommodity","findBestCommodityForFactory","factoryType","lowSupplyCommodities","risingPriceCommodities","highVolume","highPriceCommodities","bestScore","score","includes","priceScore","calculateMomentumSignal","calculateMeanReversionSignal","calculateArbitrageSignal","calculateScalpingSignal","calculateSwingSignal","calculateValueSignal","calculateGrowthSignal","calculateContrarianSignal","calculateTrendFollowingSignal","calculateBreakoutSignal","calculateSupplyBasedSignal","prices","mean","currentPrice","deviation","spread","trend","supplyValue","avgPrice","priceRatio","priceValue","growth","arr","avgGrowth","g","high","current","noise","adjustedSignal","fomoAdjustment","calculateFOMOAdjustment","panicAdjustment","calculatePanicAdjustment","commodityTrades","toLowerCase","substring","recentChanges","baseSize","maxQuantity","executeTrade","tradeValue","commodityPrice","updateTraderPerformance","metrics","totalPnL","totalWins","totalLosses","buyTrade","t","pnl"],"sources":["F:/Windsurf/Native/GTC 3/src/aiTraders.js"],"sourcesContent":["// AI Trading System with 200 traders\r\n// Each trader has different strategies and emotional responses\r\n\r\n// Trading Strategy Types\r\nexport const STRATEGY_TYPES = {\r\n  MOMENTUM: 'momentum',\r\n  MEAN_REVERSION: 'mean_reversion',\r\n  ARBITRAGE: 'arbitrage',\r\n  SCALPING: 'scalping',\r\n  SWING: 'swing',\r\n  VALUE: 'value',\r\n  GROWTH: 'growth',\r\n  CONTRARIAN: 'contrarian',\r\n  TREND_FOLLOWING: 'trend_following',\r\n  BREAKOUT: 'breakout',\r\n  SUPPLY_BASED: 'supply_based'\r\n};\r\n\r\n// Emotional States\r\nexport const EMOTIONAL_STATES = {\r\n  CALM: 'calm',\r\n  EXCITED: 'excited',\r\n  FEARFUL: 'fearful',\r\n  GREEDY: 'greedy',\r\n  PANIC: 'panic',\r\n  FOMO: 'fomo'\r\n};\r\n\r\n// Risk Tolerance Levels\r\nexport const RISK_LEVELS = {\r\n  CONSERVATIVE: 0.2,\r\n  MODERATE: 0.5,\r\n  AGGRESSIVE: 0.8,\r\n  EXTREME: 1.0\r\n};\r\n\r\n// Generate 200 unique AI traders\r\nexport const generateAITraders = () => {\r\n  const traders = [];\r\n  const names = [\r\n    'AlphaBot', 'QuantumTrader', 'NeuralNet', 'CyberTrader', 'DataMiner', 'AlgoMaster',\r\n    'SmartBot', 'TradeAI', 'MarketMind', 'ProfitBot', 'CryptoKing', 'StockMaster',\r\n    'TrendHunter', 'MomentumBot', 'ArbitrageAI', 'ScalpBot', 'SwingTrader', 'ValueBot',\r\n    'GrowthAI', 'ContrarianBot', 'BreakoutAI', 'SignalMaster', 'PatternBot', 'VolatilityAI',\r\n    'LiquidityBot', 'SpreadHunter', 'GapTrader', 'NewsBot', 'SentimentAI', 'VolumeBot',\r\n    'PriceAction', 'TechnicalAI', 'FundamentalBot', 'MacroTrader', 'MicroBot', 'SectorAI',\r\n    'IndexBot', 'CommodityAI', 'CurrencyBot', 'BondTrader', 'DerivativeAI', 'OptionBot',\r\n    'FutureTrader', 'SwapAI', 'HedgeBot', 'PortfolioAI', 'RiskBot', 'BalanceTrader',\r\n    'DiversifyAI', 'ConcentrateBot', 'LeverageAI', 'MarginBot', 'ShortTrader', 'LongAI',\r\n    'BullBot', 'BearAI', 'NeutralTrader', 'BiasBot', 'EmotionAI', 'LogicBot',\r\n    'InstinctAI', 'AnalysisBot', 'ResearchAI', 'BacktestBot', 'ForwardAI', 'PredictBot',\r\n    'ForecastAI', 'ProjectBot', 'EstimateAI', 'CalculateBot', 'ComputeAI', 'ProcessBot',\r\n    'ExecuteAI', 'ImplementBot', 'DeployAI', 'LaunchBot', 'StartAI', 'InitBot',\r\n    'BeginAI', 'CommenceBot', 'TriggerAI', 'ActivateBot', 'EnableAI', 'PowerBot',\r\n    'EnergyAI', 'ForceBot', 'DriveAI', 'PushBot', 'PullAI', 'DrawBot',\r\n    'AttractAI', 'RepelBot', 'RejectAI', 'AcceptBot', 'ApproveAI', 'DenyBot',\r\n    'BlockAI', 'AllowBot', 'PermitAI', 'RestrictBot', 'LimitAI', 'BoundBot',\r\n    'CapAI', 'FloorBot', 'CeilingAI', 'BaseBot', 'PeakAI', 'ValleyBot',\r\n    'SummitAI', 'DepthBot', 'HeightAI', 'WidthBot', 'LengthAI', 'SizeBot',\r\n    'ScaleAI', 'ScopeBot', 'RangeAI', 'SpanBot', 'ExtentAI', 'ReachBot',\r\n    'GraspAI', 'HoldBot', 'GripAI', 'ClutchBot', 'SeizeAI', 'CaptureBot',\r\n    'SnatchAI', 'GrabBot', 'TakeAI', 'GiveBot', 'OfferAI', 'BidBot',\r\n    'AskAI', 'QuoteBot', 'PriceAI', 'CostBot', 'ValueAI', 'WorthBot',\r\n    'MeritAI', 'DeserveBot', 'EarnAI', 'GainBot', 'ProfitAI', 'LossBot',\r\n    'WinAI', 'LoseBot', 'BeatAI', 'DefeatBot', 'ConquerAI', 'SurrenderBot',\r\n    'YieldAI', 'ResistBot', 'FightAI', 'PeaceBot', 'WarAI', 'BattleBot',\r\n    'CombatAI', 'StruggleBot', 'StriveAI', 'AchieveBot', 'SucceedAI', 'FailBot',\r\n    'SucceedAI', 'FailBot', 'WinAI', 'LoseBot', 'RiseAI', 'FallBot',\r\n    'ClimbAI', 'DescendBot', 'AscendAI', 'DropBot', 'JumpAI', 'LeapBot',\r\n    'BoundAI', 'SpringBot', 'BounceAI', 'ReboundBot', 'RecoverAI', 'HealBot',\r\n    'MendAI', 'FixBot', 'RepairAI', 'BreakBot', 'DamageAI', 'HarmBot',\r\n    'HurtAI', 'InjureBot', 'WoundAI', 'CutBot', 'SliceAI', 'ChopBot',\r\n    'SplitAI', 'DivideBot', 'MultiplyAI', 'AddBot', 'SumAI', 'TotalBot',\r\n    'CountAI', 'NumberBot', 'DigitAI', 'FigureBot', 'CalculateAI', 'ComputeBot',\r\n    'ProcessAI', 'HandleBot', 'ManageAI', 'ControlBot', 'DirectAI', 'GuideBot',\r\n    'LeadAI', 'FollowBot', 'TrackAI', 'TraceBot', 'FindAI', 'SearchBot',\r\n    'SeekAI', 'LookBot', 'WatchAI', 'ObserveBot', 'MonitorAI', 'CheckBot',\r\n    'VerifyAI', 'ConfirmBot', 'ValidateAI', 'TestBot', 'TrialAI', 'ExperimentBot'\r\n  ];\r\n\r\n  for (let i = 0; i < 200; i++) {\r\n    const trader = {\r\n      id: i + 1,\r\n      name: names[i % names.length] + (Math.floor(i / names.length) + 1),\r\n      strategy: Object.values(STRATEGY_TYPES)[i % Object.values(STRATEGY_TYPES).length],\r\n      riskTolerance: Object.values(RISK_LEVELS)[i % Object.values(RISK_LEVELS).length],\r\n      emotionalState: EMOTIONAL_STATES.CALM,\r\n      emotionalIntensity: Math.random(), // 0-1 scale\r\n      fomoSusceptibility: Math.random(), // How easily they get FOMO\r\n      panicSusceptibility: Math.random(), // How easily they panic\r\n      momentumSensitivity: Math.random(), // How much they follow momentum\r\n      confidence: 0.5, // Current confidence level\r\n      capital: 50000 + Math.random() * 150000, // Starting capital\r\n      portfolio: {},\r\n      tradeHistory: [],\r\n      lastTradeTime: Date.now(),\r\n      successRate: 0.5,\r\n      profitLoss: 0,\r\n      activePositions: {},\r\n      maxPositions: 3 + Math.floor(Math.random() * 5), // 3-7 positions\r\n      preferredCommodities: [], // Will be set based on strategy\r\n      marketSentiment: 0, // -1 to 1 (bearish to bullish)\r\n      volatilityTolerance: Math.random(),\r\n      liquidityPreference: Math.random(),\r\n      newsSensitivity: Math.random(),\r\n      technicalAnalysisWeight: Math.random(),\r\n      fundamentalAnalysisWeight: Math.random(),\r\n      emotionalDecisionWeight: Math.random(),\r\n      rationalDecisionWeight: 1 - Math.random() * 0.3, // 0.7-1.0\r\n      herdInstinct: Math.random(),\r\n      contrarianTendency: Math.random(),\r\n      patience: Math.random(),\r\n      aggressiveness: Math.random(),\r\n      stopLossThreshold: 0.05 + Math.random() * 0.15, // 5-20%\r\n      takeProfitThreshold: 0.1 + Math.random() * 0.2, // 10-30%\r\n      maxDrawdown: 0.1 + Math.random() * 0.2, // 10-30%\r\n      rebalancingFrequency: 1 + Math.floor(Math.random() * 7), // 1-7 days\r\n      diversificationTarget: 0.3 + Math.random() * 0.4, // 30-70% in top position\r\n      leveragePreference: Math.random() * 0.5, // 0-50% leverage\r\n      shortingPreference: Math.random(),\r\n      dayTradingPreference: Math.random(),\r\n      swingTradingPreference: Math.random(),\r\n      positionSizingMethod: ['fixed', 'kelly', 'volatility', 'equal'][Math.floor(Math.random() * 4)],\r\n      marketHours: {\r\n        start: 6 + Math.floor(Math.random() * 6), // 6 AM - 12 PM\r\n        end: 12 + Math.floor(Math.random() * 12) // 12 PM - 12 AM\r\n      },\r\n      timezone: Math.floor(Math.random() * 24),\r\n      lastUpdate: Date.now(),\r\n      isActive: true,\r\n      // Factory building properties\r\n      factories: [], // AI trader's factories\r\n      factoryBuildingPreference: Math.random(), // How much they prefer building factories\r\n      productionFocus: Math.random(), // How much they focus on production vs trading\r\n      factoryInvestmentRatio: 0.2 + Math.random() * 0.4, // 20-60% of capital for factories\r\n      maxFactories: 2 + Math.floor(Math.random() * 4), // 2-5 factories max\r\n      lastFactoryDecision: Date.now(),\r\n      factoryDecisionCooldown: 30000 + Math.random() * 60000, // 30-90 seconds between factory decisions\r\n      performanceMetrics: {\r\n        totalTrades: 0,\r\n        winningTrades: 0,\r\n        losingTrades: 0,\r\n        averageWin: 0,\r\n        averageLoss: 0,\r\n        largestWin: 0,\r\n        largestLoss: 0,\r\n        consecutiveWins: 0,\r\n        consecutiveLosses: 0,\r\n        sharpeRatio: 0,\r\n        maxDrawdown: 0,\r\n        winRate: 0,\r\n        profitFactor: 0,\r\n        // Factory metrics\r\n        totalFactories: 0,\r\n        factoryProduction: 0,\r\n        factoryRevenue: 0,\r\n        factoryROI: 0\r\n      }\r\n    };\r\n\r\n    // Set preferred commodities based on strategy\r\n    trader.preferredCommodities = getPreferredCommodities(trader.strategy);\r\n    \r\n    traders.push(trader);\r\n  }\r\n\r\n  return traders;\r\n};\r\n\r\n// Get preferred commodities based on trading strategy\r\nconst getPreferredCommodities = (strategy) => {\r\n  const commodityPreferences = {\r\n    [STRATEGY_TYPES.MOMENTUM]: ['quantum-crystals', 'dark-matter', 'plasma-cells'],\r\n    [STRATEGY_TYPES.MEAN_REVERSION]: ['neural-processors', 'antimatter-cores'],\r\n    [STRATEGY_TYPES.ARBITRAGE]: ['quantum-crystals', 'dark-matter', 'neural-processors'],\r\n    [STRATEGY_TYPES.SCALPING]: ['plasma-cells', 'quantum-crystals'],\r\n    [STRATEGY_TYPES.SWING]: ['antimatter-cores', 'fusion-reactors'],\r\n    [STRATEGY_TYPES.VALUE]: ['neural-processors', 'fusion-reactors'],\r\n    [STRATEGY_TYPES.GROWTH]: ['quantum-crystals', 'dark-matter'],\r\n    [STRATEGY_TYPES.CONTRARIAN]: ['antimatter-cores', 'plasma-cells'],\r\n    [STRATEGY_TYPES.TREND_FOLLOWING]: ['quantum-crystals', 'dark-matter', 'neural-processors'],\r\n    [STRATEGY_TYPES.BREAKOUT]: ['plasma-cells', 'fusion-reactors'],\r\n    [STRATEGY_TYPES.SUPPLY_BASED]: ['quantum-crystals', 'dark-matter', 'neural-processors', 'antimatter-cores', 'plasma-cells', 'fusion-reactors']\r\n  };\r\n  \r\n  return commodityPreferences[strategy] || ['quantum-crystals', 'dark-matter'];\r\n};\r\n\r\n// Update trader emotional state based on market conditions\r\nexport const updateTraderEmotions = (trader, marketData, recentTrades) => {\r\n  const { commodities, marketTrends } = marketData;\r\n  \r\n  // Calculate market volatility\r\n  const volatility = calculateMarketVolatility(commodities);\r\n  \r\n  // Calculate momentum\r\n  const momentum = calculateMarketMomentum(commodities);\r\n  \r\n  // Calculate supply stress\r\n  const supplyStress = calculateSupplyStress(commodities, trader);\r\n  \r\n  // Calculate FOMO trigger\r\n  const fomoTrigger = calculateFOMOTrigger(recentTrades, trader);\r\n  \r\n  // Calculate panic trigger\r\n  const panicTrigger = calculatePanicTrigger(volatility, trader.portfolio, commodities);\r\n  \r\n  // Update emotional state\r\n  let newEmotionalState = trader.emotionalState;\r\n  let newEmotionalIntensity = trader.emotionalIntensity;\r\n  \r\n  // FOMO Logic\r\n  if (fomoTrigger > trader.fomoSusceptibility * 0.8) {\r\n    newEmotionalState = EMOTIONAL_STATES.FOMO;\r\n    newEmotionalIntensity = Math.min(1, fomoTrigger);\r\n  }\r\n  // Panic Logic\r\n  else if (panicTrigger > trader.panicSusceptibility * 0.7) {\r\n    newEmotionalState = EMOTIONAL_STATES.PANIC;\r\n    newEmotionalIntensity = Math.min(1, panicTrigger);\r\n  }\r\n  // Supply Stress Logic\r\n  else if (supplyStress > 0.6) {\r\n    newEmotionalState = EMOTIONAL_STATES.FEARFUL;\r\n    newEmotionalIntensity = Math.min(1, supplyStress);\r\n  }\r\n  // Greed Logic\r\n  else if (momentum > 0.6 && trader.profitLoss > 0) {\r\n    newEmotionalState = EMOTIONAL_STATES.GREEDY;\r\n    newEmotionalIntensity = Math.min(1, momentum * 0.8);\r\n  }\r\n  // Fear Logic\r\n  else if (volatility > 0.7 || trader.profitLoss < -trader.capital * 0.1) {\r\n    newEmotionalState = EMOTIONAL_STATES.FEARFUL;\r\n    newEmotionalIntensity = Math.min(1, volatility * 0.9);\r\n  }\r\n  // Excitement Logic\r\n  else if (momentum > 0.4 && trader.profitLoss > trader.capital * 0.05) {\r\n    newEmotionalState = EMOTIONAL_STATES.EXCITED;\r\n    newEmotionalIntensity = Math.min(1, momentum * 0.6);\r\n  }\r\n  // Calm Logic\r\n  else {\r\n    newEmotionalState = EMOTIONAL_STATES.CALM;\r\n    newEmotionalIntensity = Math.max(0, newEmotionalIntensity - 0.1);\r\n  }\r\n  \r\n  return {\r\n    ...trader,\r\n    emotionalState: newEmotionalState,\r\n    emotionalIntensity: newEmotionalIntensity\r\n  };\r\n};\r\n\r\n// Calculate market volatility\r\nconst calculateMarketVolatility = (commodities) => {\r\n  const priceChanges = commodities.map(commodity => {\r\n    const history = commodity.priceHistory;\r\n    if (history.length < 2) return 0;\r\n    \r\n    const changes = [];\r\n    for (let i = 1; i < history.length; i++) {\r\n      const change = Math.abs(history[i].price - history[i-1].price) / history[i-1].price;\r\n      changes.push(change);\r\n    }\r\n    \r\n    return changes.reduce((sum, change) => sum + change, 0) / changes.length;\r\n  });\r\n  \r\n  return priceChanges.reduce((sum, volatility) => sum + volatility, 0) / priceChanges.length;\r\n};\r\n\r\n// Calculate market momentum\r\nconst calculateMarketMomentum = (commodities) => {\r\n  const momentums = commodities.map(commodity => {\r\n    const history = commodity.priceHistory;\r\n    if (history.length < 3) return 0;\r\n    \r\n    const recent = history.slice(-3);\r\n    const older = history.slice(-6, -3);\r\n    \r\n    if (older.length === 0) return 0;\r\n    \r\n    const recentAvg = recent.reduce((sum, h) => sum + h.price, 0) / recent.length;\r\n    const olderAvg = older.reduce((sum, h) => sum + h.price, 0) / older.length;\r\n    \r\n    return (recentAvg - olderAvg) / olderAvg;\r\n  });\r\n  \r\n  return momentums.reduce((sum, momentum) => sum + momentum, 0) / momentums.length;\r\n};\r\n\r\n// Calculate FOMO trigger\r\nconst calculateFOMOTrigger = (recentTrades, trader) => {\r\n  if (recentTrades.length === 0) return 0;\r\n  \r\n  const buyVolume = recentTrades\r\n    .filter(trade => trade.action === 'BUY')\r\n    .reduce((sum, trade) => sum + trade.quantity, 0);\r\n  \r\n  const sellVolume = recentTrades\r\n    .filter(trade => trade.action === 'SELL')\r\n    .reduce((sum, trade) => sum + trade.quantity, 0);\r\n  \r\n  const totalVolume = buyVolume + sellVolume;\r\n  if (totalVolume === 0) return 0;\r\n  \r\n  const buyRatio = buyVolume / totalVolume;\r\n  const volumeIntensity = Math.min(1, totalVolume / 1000); // Normalize volume\r\n  \r\n  return buyRatio * volumeIntensity * trader.fomoSusceptibility;\r\n};\r\n\r\n// Calculate panic trigger\r\nconst calculatePanicTrigger = (volatility, portfolio, commodities) => {\r\n  let portfolioValue = 0;\r\n  let portfolioCost = 0;\r\n  \r\n  Object.entries(portfolio).forEach(([commodityId, quantity]) => {\r\n    const commodity = commodities.find(c => c.id === commodityId);\r\n    if (commodity) {\r\n      portfolioValue += commodity.lastPrice * quantity;\r\n      portfolioCost += commodity.buyPrice * quantity;\r\n    }\r\n  });\r\n  \r\n  const unrealizedPnL = (portfolioValue - portfolioCost) / portfolioCost;\r\n  const volatilityImpact = volatility * 0.5;\r\n  const lossImpact = unrealizedPnL < -0.1 ? Math.abs(unrealizedPnL) * 0.3 : 0;\r\n  \r\n  return Math.min(1, volatilityImpact + lossImpact);\r\n};\r\n\r\n// Calculate supply stress\r\nconst calculateSupplyStress = (commodities, trader) => {\r\n  let totalStress = 0;\r\n  let commodityCount = 0;\r\n  \r\n  // Check each commodity in trader's preferred commodities\r\n  trader.preferredCommodities.forEach(commodityId => {\r\n    const commodity = commodities.find(c => c.id === commodityId);\r\n    if (!commodity) return;\r\n    \r\n    const { supply } = commodity;\r\n    const baseSupply = 2000; // Baseline supply level (updated to match starting supply)\r\n    const supplyRatio = supply / baseSupply;\r\n    \r\n    // High supply = stress (oversupply)\r\n    // Low supply = stress (shortage)\r\n    let stress = 0;\r\n    \r\n    if (supplyRatio > 3) {\r\n      // Oversupply stress\r\n      stress = Math.min(1, (supplyRatio - 3) / 2);\r\n    } else if (supplyRatio < 0.3) {\r\n      // Shortage stress\r\n      stress = Math.min(1, (0.3 - supplyRatio) / 0.3);\r\n    }\r\n    \r\n    totalStress += stress;\r\n    commodityCount++;\r\n  });\r\n  \r\n  return commodityCount > 0 ? totalStress / commodityCount : 0;\r\n};\r\n\r\n// Generate trading decision for a trader\r\nexport const generateTradingDecision = (trader, commodities, marketData, recentTrades) => {\r\n  const decisions = [];\r\n  \r\n  // Skip if trader is not active or outside trading hours\r\n  if (!trader.isActive) return decisions;\r\n  \r\n  const currentHour = new Date().getHours();\r\n  if (currentHour < trader.marketHours.start || currentHour > trader.marketHours.end) {\r\n    return decisions;\r\n  }\r\n  \r\n  // Update emotional state\r\n  const updatedTrader = updateTraderEmotions(trader, marketData, recentTrades);\r\n  \r\n  // Generate trading decisions for each preferred commodity\r\n  updatedTrader.preferredCommodities.forEach(commodityId => {\r\n    const commodity = commodities.find(c => c.id === commodityId);\r\n    if (!commodity) return;\r\n    \r\n    const decision = calculateTradeDecision(updatedTrader, commodity, marketData, recentTrades);\r\n    if (decision) {\r\n      decisions.push(decision);\r\n    }\r\n  });\r\n  \r\n  return decisions;\r\n};\r\n\r\n// Generate factory building decision for a trader\r\nexport const generateFactoryDecision = (trader, commodities, marketData, recentTrades) => {\r\n  const decisions = [];\r\n  \r\n  // Skip if trader is not active or outside trading hours\r\n  if (!trader.isActive) return decisions;\r\n  \r\n  const currentHour = new Date().getHours();\r\n  if (currentHour < trader.marketHours.start || currentHour > trader.marketHours.end) {\r\n    return decisions;\r\n  }\r\n  \r\n  // Check cooldown for factory decisions\r\n  const now = Date.now();\r\n  if (now - trader.lastFactoryDecision < trader.factoryDecisionCooldown) {\r\n    return decisions;\r\n  }\r\n  \r\n  // Check if trader has reached max factories\r\n  if (trader.factories.length >= trader.maxFactories) {\r\n    return decisions;\r\n  }\r\n  \r\n  // Check if trader has enough capital for factory investment\r\n  const availableCapital = trader.capital * trader.factoryInvestmentRatio;\r\n  if (availableCapital < 50000) { // Minimum factory cost\r\n    return decisions;\r\n  }\r\n  \r\n  // Update emotional state\r\n  const updatedTrader = updateTraderEmotions(trader, marketData, recentTrades);\r\n  \r\n  // Generate factory building decisions\r\n  const factoryDecision = calculateFactoryDecision(updatedTrader, commodities, marketData, recentTrades);\r\n  if (factoryDecision) {\r\n    decisions.push(factoryDecision);\r\n  }\r\n  \r\n  return decisions;\r\n};\r\n\r\n// Calculate individual trade decision\r\nconst calculateTradeDecision = (trader, commodity, marketData, recentTrades) => {\r\n  const {\r\n    strategy,\r\n    emotionalState,\r\n    emotionalIntensity,\r\n    riskTolerance,\r\n    confidence,\r\n    capital,\r\n    portfolio,\r\n    activePositions,\r\n    maxPositions\r\n  } = trader;\r\n  \r\n  // Check position limits\r\n  if (Object.keys(activePositions).length >= maxPositions && !activePositions[commodity.id]) {\r\n    return null;\r\n  }\r\n  \r\n  // Calculate base signal from strategy\r\n  let signal = calculateStrategySignal(trader, commodity, marketData);\r\n  \r\n  // Apply emotional adjustments\r\n  signal = applyEmotionalAdjustments(signal, trader, commodity, recentTrades);\r\n  \r\n  // Calculate position size\r\n  const positionSize = calculatePositionSize(trader, commodity, signal);\r\n  \r\n  // Determine action\r\n  let action = null;\r\n  let quantity = 0;\r\n  \r\n  if (signal > 0.6 && positionSize > 0) {\r\n    action = 'BUY';\r\n    quantity = Math.floor(positionSize);\r\n  } else if (signal < 0.4 && activePositions[commodity.id]) {\r\n    action = 'SELL';\r\n    quantity = activePositions[commodity.id];\r\n  }\r\n  \r\n  if (action && quantity > 0) {\r\n    return {\r\n      traderId: trader.id,\r\n      traderName: trader.name,\r\n      commodityId: commodity.id,\r\n      commodityName: commodity.name,\r\n      action,\r\n      quantity,\r\n      price: action === 'BUY' ? commodity.buyPrice : commodity.sellPrice,\r\n      signal,\r\n      emotionalState,\r\n      emotionalIntensity,\r\n      strategy,\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\n// Calculate factory building decision\r\nconst calculateFactoryDecision = (trader, commodities, marketData, recentTrades) => {\r\n  const { \r\n    capital, \r\n    factoryBuildingPreference, \r\n    productionFocus, \r\n    emotionalState, \r\n    emotionalIntensity,\r\n    factories,\r\n    strategy\r\n  } = trader;\r\n  \r\n  // Calculate factory building signal based on multiple factors\r\n  let factorySignal = 0;\r\n  \r\n  // Base preference for factory building\r\n  factorySignal += factoryBuildingPreference * 0.3;\r\n  \r\n  // Production focus preference\r\n  factorySignal += productionFocus * 0.2;\r\n  \r\n  // Strategy-based factory preference\r\n  const strategyFactoryPreference = {\r\n    [STRATEGY_TYPES.VALUE]: 0.8, // Value traders love factories\r\n    [STRATEGY_TYPES.GROWTH]: 0.7, // Growth traders like production\r\n    [STRATEGY_TYPES.SUPPLY_BASED]: 0.6, // Supply-based traders understand production\r\n    [STRATEGY_TYPES.MOMENTUM]: 0.3, // Momentum traders prefer trading\r\n    [STRATEGY_TYPES.SCALPING]: 0.2, // Scalpers prefer quick trades\r\n    [STRATEGY_TYPES.ARBITRAGE]: 0.4, // Arbitrage traders are neutral\r\n    [STRATEGY_TYPES.MEAN_REVERSION]: 0.5, // Mean reversion traders like stability\r\n    [STRATEGY_TYPES.SWING]: 0.6, // Swing traders like production\r\n    [STRATEGY_TYPES.CONTRARIAN]: 0.4, // Contrarian traders are neutral\r\n    [STRATEGY_TYPES.TREND_FOLLOWING]: 0.5, // Trend followers are neutral\r\n    [STRATEGY_TYPES.BREAKOUT]: 0.3 // Breakout traders prefer trading\r\n  };\r\n  \r\n  factorySignal += (strategyFactoryPreference[strategy] || 0.5) * 0.2;\r\n  \r\n  // Emotional adjustments\r\n  switch (emotionalState) {\r\n    case EMOTIONAL_STATES.GREEDY:\r\n      factorySignal += emotionalIntensity * 0.2; // Greedy traders want more production\r\n      break;\r\n    case EMOTIONAL_STATES.FOMO:\r\n      factorySignal += emotionalIntensity * 0.1; // FOMO traders want to build\r\n      break;\r\n    case EMOTIONAL_STATES.PANIC:\r\n      factorySignal -= emotionalIntensity * 0.3; // Panic traders avoid building\r\n      break;\r\n    case EMOTIONAL_STATES.FEARFUL:\r\n      factorySignal -= emotionalIntensity * 0.2; // Fearful traders avoid building\r\n      break;\r\n  }\r\n  \r\n  // Market conditions analysis\r\n  const marketConditions = analyzeMarketForFactories(commodities, recentTrades);\r\n  factorySignal += marketConditions.factoryOpportunity * 0.3;\r\n  \r\n  // Capital efficiency check\r\n  const capitalEfficiency = Math.min(1, capital / 200000); // More capital = better factory building\r\n  factorySignal += capitalEfficiency * 0.1;\r\n  \r\n  // Factory diversity check\r\n  const factoryDiversity = 1 - (factories.length / trader.maxFactories); // More diversity = better\r\n  factorySignal += factoryDiversity * 0.1;\r\n  \r\n  // Determine if should build factory\r\n  if (factorySignal > 0.6) {\r\n    // Find best commodity for factory\r\n    const bestCommodity = findBestCommodityForFactory(commodities, trader);\r\n    \r\n    if (bestCommodity) {\r\n      return {\r\n        traderId: trader.id,\r\n        traderName: trader.name,\r\n        action: 'BUILD_FACTORY',\r\n        commodityId: bestCommodity.id,\r\n        commodityName: bestCommodity.name,\r\n        factoryType: 'BASIC', // For now, all factories are basic\r\n        signal: factorySignal,\r\n        emotionalState,\r\n        emotionalIntensity,\r\n        strategy,\r\n        timestamp: Date.now()\r\n      };\r\n    }\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\n// Analyze market conditions for factory building\r\nconst analyzeMarketForFactories = (commodities, recentTrades) => {\r\n  let factoryOpportunity = 0;\r\n  \r\n  // Check for commodities with high demand (low supply)\r\n  const lowSupplyCommodities = commodities.filter(c => c.supply < 1500);\r\n  factoryOpportunity += (lowSupplyCommodities.length / commodities.length) * 0.4;\r\n  \r\n  // Check for commodities with rising prices\r\n  const risingPriceCommodities = commodities.filter(c => {\r\n    if (c.priceHistory.length < 3) return false;\r\n    const recent = c.priceHistory.slice(-3);\r\n    const older = c.priceHistory.slice(-6, -3);\r\n    if (older.length === 0) return false;\r\n    \r\n    const recentAvg = recent.reduce((sum, h) => sum + h.price, 0) / recent.length;\r\n    const olderAvg = older.reduce((sum, h) => sum + h.price, 0) / older.length;\r\n    \r\n    return recentAvg > olderAvg;\r\n  });\r\n  \r\n  factoryOpportunity += (risingPriceCommodities.length / commodities.length) * 0.3;\r\n  \r\n  // Check for high trading volume (opportunity)\r\n  const highVolume = recentTrades.length > 10;\r\n  factoryOpportunity += highVolume ? 0.2 : 0;\r\n  \r\n  // Check for supply shortages (high prices)\r\n  const highPriceCommodities = commodities.filter(c => c.lastPrice > 1000);\r\n  factoryOpportunity += (highPriceCommodities.length / commodities.length) * 0.1;\r\n  \r\n  return { factoryOpportunity };\r\n};\r\n\r\n// Find best commodity for factory building\r\nconst findBestCommodityForFactory = (commodities, trader) => {\r\n  let bestCommodity = null;\r\n  let bestScore = 0;\r\n  \r\n  commodities.forEach(commodity => {\r\n    let score = 0;\r\n    \r\n    // Prefer commodities in trader's preferred list\r\n    if (trader.preferredCommodities.includes(commodity.id)) {\r\n      score += 0.3;\r\n    }\r\n    \r\n    // Prefer commodities with low supply (high demand)\r\n    const supplyRatio = commodity.supply / 2000;\r\n    score += (1 - supplyRatio) * 0.3;\r\n    \r\n    // Prefer commodities with high prices (more profitable)\r\n    const priceScore = Math.min(1, commodity.lastPrice / 1000);\r\n    score += priceScore * 0.2;\r\n    \r\n    // Prefer commodities with rising prices\r\n    if (commodity.priceHistory.length >= 3) {\r\n      const recent = commodity.priceHistory.slice(-3);\r\n      const older = commodity.priceHistory.slice(-6, -3);\r\n      if (older.length > 0) {\r\n        const recentAvg = recent.reduce((sum, h) => sum + h.price, 0) / recent.length;\r\n        const olderAvg = older.reduce((sum, h) => sum + h.price, 0) / older.length;\r\n        \r\n        if (recentAvg > olderAvg) {\r\n          score += 0.2;\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (score > bestScore) {\r\n      bestScore = score;\r\n      bestCommodity = commodity;\r\n    }\r\n  });\r\n  \r\n  return bestCommodity;\r\n};\r\n\r\n// Calculate strategy-based signal\r\nconst calculateStrategySignal = (trader, commodity, marketData) => {\r\n  const { strategy } = trader;\r\n  const { priceHistory, lastPrice, buyPrice, sellPrice } = commodity;\r\n  \r\n  switch (strategy) {\r\n    case STRATEGY_TYPES.MOMENTUM:\r\n      return calculateMomentumSignal(priceHistory);\r\n    \r\n    case STRATEGY_TYPES.MEAN_REVERSION:\r\n      return calculateMeanReversionSignal(priceHistory);\r\n    \r\n    case STRATEGY_TYPES.ARBITRAGE:\r\n      return calculateArbitrageSignal(buyPrice, sellPrice);\r\n    \r\n    case STRATEGY_TYPES.SCALPING:\r\n      return calculateScalpingSignal(priceHistory);\r\n    \r\n    case STRATEGY_TYPES.SWING:\r\n      return calculateSwingSignal(priceHistory);\r\n    \r\n    case STRATEGY_TYPES.VALUE:\r\n      return calculateValueSignal(commodity);\r\n    \r\n    case STRATEGY_TYPES.GROWTH:\r\n      return calculateGrowthSignal(priceHistory);\r\n    \r\n    case STRATEGY_TYPES.CONTRARIAN:\r\n      return calculateContrarianSignal(priceHistory);\r\n    \r\n    case STRATEGY_TYPES.TREND_FOLLOWING:\r\n      return calculateTrendFollowingSignal(priceHistory);\r\n    \r\n    case STRATEGY_TYPES.BREAKOUT:\r\n      return calculateBreakoutSignal(priceHistory);\r\n    \r\n    case STRATEGY_TYPES.SUPPLY_BASED:\r\n      return calculateSupplyBasedSignal(commodity);\r\n    \r\n    default:\r\n      return 0.5;\r\n  }\r\n};\r\n\r\n// Strategy-specific signal calculations\r\nconst calculateMomentumSignal = (priceHistory) => {\r\n  if (priceHistory.length < 3) return 0.5;\r\n  \r\n  const recent = priceHistory.slice(-3);\r\n  const older = priceHistory.slice(-6, -3);\r\n  \r\n  if (older.length === 0) return 0.5;\r\n  \r\n  const recentAvg = recent.reduce((sum, h) => sum + h.price, 0) / recent.length;\r\n  const olderAvg = older.reduce((sum, h) => sum + h.price, 0) / older.length;\r\n  \r\n  const momentum = (recentAvg - olderAvg) / olderAvg;\r\n  return Math.max(0, Math.min(1, 0.5 + momentum * 2));\r\n};\r\n\r\nconst calculateMeanReversionSignal = (priceHistory) => {\r\n  if (priceHistory.length < 6) return 0.5;\r\n  \r\n  const prices = priceHistory.map(h => h.price);\r\n  const mean = prices.reduce((sum, price) => sum + price, 0) / prices.length;\r\n  const currentPrice = prices[prices.length - 1];\r\n  \r\n  const deviation = (currentPrice - mean) / mean;\r\n  return Math.max(0, Math.min(1, 0.5 - deviation * 2));\r\n};\r\n\r\nconst calculateArbitrageSignal = (buyPrice, sellPrice) => {\r\n  const spread = (sellPrice - buyPrice) / buyPrice;\r\n  return Math.max(0, Math.min(1, spread * 10));\r\n};\r\n\r\nconst calculateScalpingSignal = (priceHistory) => {\r\n  if (priceHistory.length < 2) return 0.5;\r\n  \r\n  const recent = priceHistory.slice(-2);\r\n  const change = (recent[1].price - recent[0].price) / recent[0].price;\r\n  \r\n  return Math.max(0, Math.min(1, 0.5 + change * 5));\r\n};\r\n\r\nconst calculateSwingSignal = (priceHistory) => {\r\n  if (priceHistory.length < 5) return 0.5;\r\n  \r\n  const prices = priceHistory.map(h => h.price);\r\n  const trend = (prices[prices.length - 1] - prices[0]) / prices[0];\r\n  \r\n  return Math.max(0, Math.min(1, 0.5 + trend * 2));\r\n};\r\n\r\nconst calculateValueSignal = (commodity) => {\r\n  const { supply, lastPrice } = commodity;\r\n  \r\n  // Calculate value based on supply fundamentals\r\n  // Lower supply = higher value\r\n  const baseSupply = 2000; // Baseline supply level (updated to match starting supply)\r\n  const supplyRatio = supply / baseSupply;\r\n  \r\n  // Much more reactive supply value calculation\r\n  let supplyValue = 0.5;\r\n  if (supplyRatio < 0.4) {\r\n    // Supply shortage - very high value\r\n    supplyValue = 0.95 + (0.4 - supplyRatio) * 0.4; // Much higher value\r\n  } else if (supplyRatio > 2.0) {\r\n    // Supply glut - very low value\r\n    supplyValue = 0.05 - (supplyRatio - 2.0) * 0.15; // Much lower value\r\n  } else {\r\n    // Normal range - more aggressive curve\r\n    supplyValue = 1 - (supplyRatio / 1.5); // More aggressive curve\r\n  }\r\n  \r\n  // Consider price relative to supply (mean reversion component)\r\n  const avgPrice = 100; // Assume average price as baseline\r\n  const priceRatio = lastPrice / avgPrice;\r\n  const priceValue = Math.max(0, Math.min(1, 1 - (priceRatio - 1) * 0.5));\r\n  \r\n  // Combine supply and price factors with more weight on supply\r\n  const signal = (supplyValue * 0.8) + (priceValue * 0.2);\r\n  \r\n  return Math.max(0, Math.min(1, signal));\r\n};\r\n\r\nconst calculateGrowthSignal = (priceHistory) => {\r\n  if (priceHistory.length < 4) return 0.5;\r\n  \r\n  const growth = priceHistory.slice(-4).map((h, i, arr) => {\r\n    if (i === 0) return 0;\r\n    return (h.price - arr[i-1].price) / arr[i-1].price;\r\n  }).slice(1);\r\n  \r\n  const avgGrowth = growth.reduce((sum, g) => sum + g, 0) / growth.length;\r\n  return Math.max(0, Math.min(1, 0.5 + avgGrowth * 3));\r\n};\r\n\r\nconst calculateContrarianSignal = (priceHistory) => {\r\n  if (priceHistory.length < 3) return 0.5;\r\n  \r\n  const recent = priceHistory.slice(-3);\r\n  const trend = (recent[2].price - recent[0].price) / recent[0].price;\r\n  \r\n  return Math.max(0, Math.min(1, 0.5 - trend * 2));\r\n};\r\n\r\nconst calculateTrendFollowingSignal = (priceHistory) => {\r\n  if (priceHistory.length < 4) return 0.5;\r\n  \r\n  const prices = priceHistory.map(h => h.price);\r\n  const trend = (prices[prices.length - 1] - prices[0]) / prices[0];\r\n  \r\n  return Math.max(0, Math.min(1, 0.5 + trend * 1.5));\r\n};\r\n\r\nconst calculateBreakoutSignal = (priceHistory) => {\r\n  if (priceHistory.length < 6) return 0.5;\r\n  \r\n  const prices = priceHistory.map(h => h.price);\r\n  const high = Math.max(...prices.slice(0, -1));\r\n  const current = prices[prices.length - 1];\r\n  \r\n  if (current > high) {\r\n    return Math.min(1, 0.7 + (current - high) / high);\r\n  }\r\n  \r\n  return 0.3;\r\n};\r\n\r\n// Calculate supply-based signal\r\nconst calculateSupplyBasedSignal = (commodity) => {\r\n  const { supply } = commodity;\r\n  \r\n  // Calculate supply-based signal\r\n  // Lower supply = higher signal (buy)\r\n  // Higher supply = lower signal (sell)\r\n  const baseSupply = 2000; // Baseline supply level (updated to match starting supply)\r\n  const supplyRatio = supply / baseSupply;\r\n  \r\n  // Much more reactive signal calculation\r\n  let signal = 0.5; // Neutral starting point\r\n  \r\n  if (supplyRatio < 0.5) {\r\n    // Supply shortage - very strong buy signal\r\n    signal = 0.9 + (0.5 - supplyRatio) * 0.6; // Much stronger signal\r\n  } else if (supplyRatio > 2.0) {\r\n    // Supply glut - very strong sell signal\r\n    signal = 0.1 - (supplyRatio - 2.0) * 0.3; // Much stronger signal\r\n  } else {\r\n    // Normal range - more aggressive linear relationship\r\n    signal = 1 - (supplyRatio / 1.5); // More aggressive curve\r\n  }\r\n  \r\n  // Add more noise to make it more realistic\r\n  const noise = (Math.random() - 0.5) * 0.25; // Much more noise for more volatility\r\n  \r\n  return Math.max(0, Math.min(1, signal + noise));\r\n};\r\n\r\n// Apply emotional adjustments to signal\r\nconst applyEmotionalAdjustments = (signal, trader, commodity, recentTrades) => {\r\n  const { emotionalState, emotionalIntensity, fomoSusceptibility, panicSusceptibility } = trader;\r\n  \r\n  let adjustedSignal = signal;\r\n  \r\n  switch (emotionalState) {\r\n    case EMOTIONAL_STATES.FOMO:\r\n      // FOMO makes traders more likely to buy\r\n      adjustedSignal += emotionalIntensity * 0.3;\r\n      break;\r\n    \r\n    case EMOTIONAL_STATES.PANIC:\r\n      // Panic makes traders more likely to sell\r\n      adjustedSignal -= emotionalIntensity * 0.4;\r\n      break;\r\n    \r\n    case EMOTIONAL_STATES.GREEDY:\r\n      // Greed makes traders more aggressive\r\n      adjustedSignal += emotionalIntensity * 0.2;\r\n      break;\r\n    \r\n    case EMOTIONAL_STATES.FEARFUL:\r\n      // Fear makes traders more conservative\r\n      adjustedSignal -= emotionalIntensity * 0.3;\r\n      break;\r\n    \r\n    case EMOTIONAL_STATES.EXCITED:\r\n      // Excitement increases confidence\r\n      adjustedSignal += emotionalIntensity * 0.1;\r\n      break;\r\n  }\r\n  \r\n  // Apply FOMO from recent trades\r\n  const fomoAdjustment = calculateFOMOAdjustment(recentTrades, commodity, fomoSusceptibility);\r\n  adjustedSignal += fomoAdjustment;\r\n  \r\n  // Apply panic from volatility\r\n  const panicAdjustment = calculatePanicAdjustment(commodity, panicSusceptibility);\r\n  adjustedSignal += panicAdjustment;\r\n  \r\n  return Math.max(0, Math.min(1, adjustedSignal));\r\n};\r\n\r\n// Calculate FOMO adjustment from recent trades\r\nconst calculateFOMOAdjustment = (recentTrades, commodity, fomoSusceptibility) => {\r\n  const commodityTrades = recentTrades.filter(trade => \r\n    trade.commodity.toLowerCase().includes(commodity.name.toLowerCase().substring(0, 3))\r\n  );\r\n  \r\n  if (commodityTrades.length === 0) return 0;\r\n  \r\n  const buyVolume = commodityTrades\r\n    .filter(trade => trade.action === 'BUY')\r\n    .reduce((sum, trade) => sum + trade.quantity, 0);\r\n  \r\n  const sellVolume = commodityTrades\r\n    .filter(trade => trade.action === 'SELL')\r\n    .reduce((sum, trade) => sum + trade.quantity, 0);\r\n  \r\n  const totalVolume = buyVolume + sellVolume;\r\n  if (totalVolume === 0) return 0;\r\n  \r\n  const buyRatio = buyVolume / totalVolume;\r\n  return (buyRatio - 0.5) * fomoSusceptibility * 0.2;\r\n};\r\n\r\n// Calculate panic adjustment from volatility\r\nconst calculatePanicAdjustment = (commodity, panicSusceptibility) => {\r\n  const priceHistory = commodity.priceHistory;\r\n  if (priceHistory.length < 2) return 0;\r\n  \r\n  const recentChanges = [];\r\n  for (let i = 1; i < priceHistory.length; i++) {\r\n    const change = Math.abs(priceHistory[i].price - priceHistory[i-1].price) / priceHistory[i-1].price;\r\n    recentChanges.push(change);\r\n  }\r\n  \r\n  const volatility = recentChanges.reduce((sum, change) => sum + change, 0) / recentChanges.length;\r\n  return -volatility * panicSusceptibility * 0.3;\r\n};\r\n\r\n// Calculate position size\r\nconst calculatePositionSize = (trader, commodity, signal) => {\r\n  const { capital, riskTolerance, emotionalIntensity, emotionalState } = trader;\r\n  \r\n  // Base position size based on signal strength\r\n  let baseSize = Math.abs(signal - 0.5) * 2; // 0-1 scale\r\n  \r\n  // Adjust for risk tolerance\r\n  baseSize *= riskTolerance;\r\n  \r\n  // Adjust for emotional state\r\n  switch (emotionalState) {\r\n    case EMOTIONAL_STATES.FOMO:\r\n    case EMOTIONAL_STATES.GREEDY:\r\n      baseSize *= (1 + emotionalIntensity * 0.5);\r\n      break;\r\n    \r\n    case EMOTIONAL_STATES.PANIC:\r\n    case EMOTIONAL_STATES.FEARFUL:\r\n      baseSize *= (1 - emotionalIntensity * 0.7);\r\n      break;\r\n  }\r\n  \r\n  // Calculate actual quantity\r\n  const maxQuantity = Math.floor(capital * 0.1 / commodity.lastPrice); // Max 10% of capital\r\n  const quantity = Math.floor(baseSize * maxQuantity);\r\n  \r\n  return Math.max(1, Math.min(quantity, 100)); // Between 1 and 100\r\n};\r\n\r\n// Execute trade and update trader state\r\nexport const executeTrade = (trader, decision, commodities) => {\r\n  const commodity = commodities.find(c => c.id === decision.commodityId);\r\n  if (!commodity) return trader;\r\n  \r\n  const tradeValue = decision.quantity * decision.price;\r\n  const updatedTrader = { ...trader };\r\n  \r\n  if (decision.action === 'BUY') {\r\n    // Update capital\r\n    updatedTrader.capital -= tradeValue;\r\n    \r\n    // Update portfolio\r\n    updatedTrader.portfolio[commodity.id] = (updatedTrader.portfolio[commodity.id] || 0) + decision.quantity;\r\n    \r\n    // Update active positions\r\n    updatedTrader.activePositions[commodity.id] = decision.quantity;\r\n    \r\n  } else if (decision.action === 'SELL') {\r\n    // Update capital\r\n    updatedTrader.capital += tradeValue;\r\n    \r\n    // Update portfolio\r\n    updatedTrader.portfolio[commodity.id] = Math.max(0, (updatedTrader.portfolio[commodity.id] || 0) - decision.quantity);\r\n    \r\n    // Remove from active positions if sold all\r\n    if (updatedTrader.portfolio[commodity.id] === 0) {\r\n      delete updatedTrader.activePositions[commodity.id];\r\n    } else {\r\n      updatedTrader.activePositions[commodity.id] = updatedTrader.portfolio[commodity.id];\r\n    }\r\n  }\r\n  \r\n  // Update trade history\r\n  updatedTrader.tradeHistory.push({\r\n    ...decision,\r\n    timestamp: Date.now(),\r\n    commodityPrice: commodity.lastPrice\r\n  });\r\n  \r\n  // Keep only last 100 trades\r\n  if (updatedTrader.tradeHistory.length > 100) {\r\n    updatedTrader.tradeHistory = updatedTrader.tradeHistory.slice(-100);\r\n  }\r\n  \r\n  // Update last trade time\r\n  updatedTrader.lastTradeTime = Date.now();\r\n  \r\n  return updatedTrader;\r\n};\r\n\r\n// Update trader performance metrics\r\nexport const updateTraderPerformance = (trader) => {\r\n  const { tradeHistory, capital } = trader;\r\n  \r\n  if (tradeHistory.length === 0) return trader;\r\n  \r\n  const updatedTrader = { ...trader };\r\n  const metrics = updatedTrader.performanceMetrics;\r\n  \r\n  // Calculate basic metrics\r\n  metrics.totalTrades = tradeHistory.length;\r\n  \r\n  // Calculate P&L\r\n  let totalPnL = 0;\r\n  let winningTrades = 0;\r\n  let losingTrades = 0;\r\n  let totalWins = 0;\r\n  let totalLosses = 0;\r\n  \r\n  tradeHistory.forEach(trade => {\r\n    if (trade.action === 'SELL') {\r\n      const buyTrade = tradeHistory.find(t => \r\n        t.action === 'BUY' && \r\n        t.commodityId === trade.commodityId && \r\n        t.timestamp < trade.timestamp\r\n      );\r\n      \r\n      if (buyTrade) {\r\n        const pnl = (trade.price - buyTrade.price) * trade.quantity;\r\n        totalPnL += pnl;\r\n        \r\n        if (pnl > 0) {\r\n          winningTrades++;\r\n          totalWins += pnl;\r\n        } else {\r\n          losingTrades++;\r\n          totalLosses += Math.abs(pnl);\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n  metrics.winningTrades = winningTrades;\r\n  metrics.losingTrades = losingTrades;\r\n  metrics.averageWin = winningTrades > 0 ? totalWins / winningTrades : 0;\r\n  metrics.averageLoss = losingTrades > 0 ? totalLosses / losingTrades : 0;\r\n  metrics.winRate = metrics.totalTrades > 0 ? winningTrades / metrics.totalTrades : 0;\r\n  metrics.profitFactor = totalLosses > 0 ? totalWins / totalLosses : 0;\r\n  \r\n  updatedTrader.profitLoss = totalPnL;\r\n  updatedTrader.successRate = metrics.winRate;\r\n  \r\n  return updatedTrader;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
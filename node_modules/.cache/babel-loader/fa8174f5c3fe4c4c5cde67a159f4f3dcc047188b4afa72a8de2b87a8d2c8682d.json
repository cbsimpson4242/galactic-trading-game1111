{"ast":null,"code":"var _jsxFileName = \"F:\\\\Windsurf\\\\Native\\\\GTC 3\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport TradingGrid from './components/TradingGrid';\nimport Sidebar from './components/Sidebar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [gameState, setGameState] = useState({\n    credits: 74192,\n    profit: 6011,\n    pnl: 4191,\n    totalMargin: 75945,\n    isSimulationPaused: false\n  });\n  const [commodities, setCommodities] = useState([{\n    id: 'quantum-crystals',\n    name: 'Quantum Crystals',\n    icon: '💎',\n    lastPrice: 29,\n    supply: 5825,\n    demand: 2159,\n    buyPrice: 28,\n    sellPrice: 30,\n    buyQuantity: 1068,\n    sellQuantity: 1042,\n    unit: 'Tons',\n    quantity: 1\n  }, {\n    id: 'dark-matter',\n    name: 'Dark Matter',\n    icon: '⚫',\n    lastPrice: 929,\n    supply: 1296,\n    demand: 3383,\n    buyPrice: 910,\n    sellPrice: 948,\n    buyQuantity: 800,\n    sellQuantity: 1200,\n    unit: 'Units',\n    quantity: 1\n  }, {\n    id: 'neural-processors',\n    name: 'Neural Processors',\n    icon: '🧠',\n    lastPrice: 304,\n    supply: 8886,\n    demand: 2359,\n    buyPrice: 298,\n    sellPrice: 310,\n    buyQuantity: 1500,\n    sellQuantity: 1000,\n    unit: 'Units',\n    quantity: 1\n  }, {\n    id: 'antimatter-cores',\n    name: 'Antimatter Cores',\n    icon: '⚛️',\n    lastPrice: 1347,\n    supply: 623,\n    demand: 1911,\n    buyPrice: 1320,\n    sellPrice: 1374,\n    buyQuantity: 500,\n    sellQuantity: 800,\n    unit: 'Units',\n    quantity: 1\n  }, {\n    id: 'plasma-cells',\n    name: 'Plasma Cells',\n    icon: '⚡',\n    lastPrice: 77,\n    supply: 4618,\n    demand: 3229,\n    buyPrice: 75,\n    sellPrice: 79,\n    buyQuantity: 2000,\n    sellQuantity: 1500,\n    unit: 'Units',\n    quantity: 1\n  }, {\n    id: 'fusion-reactors',\n    name: 'Fusion Reactors',\n    icon: '🔋',\n    lastPrice: 5235,\n    supply: 214,\n    demand: 800,\n    buyPrice: 5130,\n    sellPrice: 5340,\n    buyQuantity: 100,\n    sellQuantity: 300,\n    unit: 'Units',\n    quantity: 1\n  }]);\n  const [aiPortfolio, setAiPortfolio] = useState({\n    'Quantum Crystals': 12345,\n    'Dark Matter': 8901,\n    'Neural Processors': 15678,\n    'Plasma Cells': 4567\n  });\n  const [marketTrends, setMarketTrends] = useState([{\n    name: 'Quantum Crystals',\n    trend: 'Bullish',\n    color: '#00ff88'\n  }, {\n    name: 'Dark Matter',\n    trend: 'Bearish',\n    color: '#ff4444'\n  }, {\n    name: 'Neural Processors',\n    trend: 'Bullish',\n    color: '#00ff88'\n  }]);\n  const [tradeFeed, setTradeFeed] = useState([{\n    time: '19:11',\n    commodity: 'FREAC',\n    action: 'SELL',\n    quantity: 11,\n    value: 56903\n  }, {\n    time: '19:10',\n    commodity: 'ACORE',\n    action: 'BUY',\n    quantity: 47,\n    value: 61147\n  }, {\n    time: '19:09',\n    commodity: 'QCRYS',\n    action: 'SELL',\n    quantity: 73,\n    value: 2190\n  }, {\n    time: '19:08',\n    commodity: 'DMATT',\n    action: 'BUY',\n    quantity: 25,\n    value: 23225\n  }, {\n    time: '19:07',\n    commodity: 'NPROC',\n    action: 'SELL',\n    quantity: 15,\n    value: 4560\n  }]);\n  const handleQuantityChange = (commodityId, newQuantity) => {\n    setCommodities(prev => prev.map(commodity => commodity.id === commodityId ? {\n      ...commodity,\n      quantity: Math.max(1, Math.min(100, newQuantity))\n    } : commodity));\n  };\n  const handleBuy = commodityId => {\n    const commodity = commodities.find(c => c.id === commodityId);\n    const cost = commodity.buyPrice * commodity.quantity;\n    if (gameState.credits >= cost) {\n      setGameState(prev => ({\n        ...prev,\n        credits: prev.credits - cost,\n        totalMargin: prev.totalMargin + cost\n      }));\n\n      // Add to trade feed\n      const newTrade = {\n        time: new Date().toLocaleTimeString('en-US', {\n          hour12: false,\n          hour: '2-digit',\n          minute: '2-digit'\n        }),\n        commodity: commodity.name.substring(0, 5).toUpperCase(),\n        action: 'BUY',\n        quantity: commodity.quantity,\n        value: cost\n      };\n      setTradeFeed(prev => [newTrade, ...prev.slice(0, 4)]);\n    }\n  };\n  const handleSell = commodityId => {\n    const commodity = commodities.find(c => c.id === commodityId);\n    const revenue = commodity.sellPrice * commodity.quantity;\n    setGameState(prev => ({\n      ...prev,\n      credits: prev.credits + revenue,\n      profit: prev.profit + (revenue - commodity.buyPrice * commodity.quantity)\n    }));\n\n    // Add to trade feed\n    const newTrade = {\n      time: new Date().toLocaleTimeString('en-US', {\n        hour12: false,\n        hour: '2-digit',\n        minute: '2-digit'\n      }),\n      commodity: commodity.name.substring(0, 5).toUpperCase(),\n      action: 'SELL',\n      quantity: commodity.quantity,\n      value: revenue\n    };\n    setTradeFeed(prev => [newTrade, ...prev.slice(0, 4)]);\n  };\n  const toggleSimulation = () => {\n    setGameState(prev => ({\n      ...prev,\n      isSimulationPaused: !prev.isSimulationPaused\n    }));\n  };\n\n  // Simulate price fluctuations\n  useEffect(() => {\n    if (!gameState.isSimulationPaused) {\n      const interval = setInterval(() => {\n        setCommodities(prev => prev.map(commodity => {\n          const priceChange = (Math.random() - 0.5) * 0.1; // ±5% change\n          const newLastPrice = Math.max(1, Math.round(commodity.lastPrice * (1 + priceChange)));\n          const newBuyPrice = Math.max(1, newLastPrice - Math.floor(Math.random() * 3) - 1);\n          const newSellPrice = newLastPrice + Math.floor(Math.random() * 3) + 1;\n          return {\n            ...commodity,\n            lastPrice: newLastPrice,\n            buyPrice: newBuyPrice,\n            sellPrice: newSellPrice\n          };\n        }));\n      }, 3000);\n      return () => clearInterval(interval);\n    }\n  }, [gameState.isSimulationPaused]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      gameState: gameState,\n      onToggleSimulation: toggleSimulation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(TradingGrid, {\n        commodities: commodities,\n        onQuantityChange: handleQuantityChange,\n        onBuy: handleBuy,\n        onSell: handleSell\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Sidebar, {\n        aiPortfolio: aiPortfolio,\n        marketTrends: marketTrends,\n        tradeFeed: tradeFeed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"yKdrbYFVL7NoFSGhZJ6MxyoWI6I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","TradingGrid","Sidebar","jsxDEV","_jsxDEV","App","_s","gameState","setGameState","credits","profit","pnl","totalMargin","isSimulationPaused","commodities","setCommodities","id","name","icon","lastPrice","supply","demand","buyPrice","sellPrice","buyQuantity","sellQuantity","unit","quantity","aiPortfolio","setAiPortfolio","marketTrends","setMarketTrends","trend","color","tradeFeed","setTradeFeed","time","commodity","action","value","handleQuantityChange","commodityId","newQuantity","prev","map","Math","max","min","handleBuy","find","c","cost","newTrade","Date","toLocaleTimeString","hour12","hour","minute","substring","toUpperCase","slice","handleSell","revenue","toggleSimulation","interval","setInterval","priceChange","random","newLastPrice","round","newBuyPrice","floor","newSellPrice","clearInterval","className","children","onToggleSimulation","fileName","_jsxFileName","lineNumber","columnNumber","onQuantityChange","onBuy","onSell","_c","$RefreshReg$"],"sources":["F:/Windsurf/Native/GTC 3/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport TradingGrid from './components/TradingGrid';\r\nimport Sidebar from './components/Sidebar';\r\n\r\nfunction App() {\r\n  const [gameState, setGameState] = useState({\r\n    credits: 74192,\r\n    profit: 6011,\r\n    pnl: 4191,\r\n    totalMargin: 75945,\r\n    isSimulationPaused: false\r\n  });\r\n\r\n  const [commodities, setCommodities] = useState([\r\n    {\r\n      id: 'quantum-crystals',\r\n      name: 'Quantum Crystals',\r\n      icon: '💎',\r\n      lastPrice: 29,\r\n      supply: 5825,\r\n      demand: 2159,\r\n      buyPrice: 28,\r\n      sellPrice: 30,\r\n      buyQuantity: 1068,\r\n      sellQuantity: 1042,\r\n      unit: 'Tons',\r\n      quantity: 1\r\n    },\r\n    {\r\n      id: 'dark-matter',\r\n      name: 'Dark Matter',\r\n      icon: '⚫',\r\n      lastPrice: 929,\r\n      supply: 1296,\r\n      demand: 3383,\r\n      buyPrice: 910,\r\n      sellPrice: 948,\r\n      buyQuantity: 800,\r\n      sellQuantity: 1200,\r\n      unit: 'Units',\r\n      quantity: 1\r\n    },\r\n    {\r\n      id: 'neural-processors',\r\n      name: 'Neural Processors',\r\n      icon: '🧠',\r\n      lastPrice: 304,\r\n      supply: 8886,\r\n      demand: 2359,\r\n      buyPrice: 298,\r\n      sellPrice: 310,\r\n      buyQuantity: 1500,\r\n      sellQuantity: 1000,\r\n      unit: 'Units',\r\n      quantity: 1\r\n    },\r\n    {\r\n      id: 'antimatter-cores',\r\n      name: 'Antimatter Cores',\r\n      icon: '⚛️',\r\n      lastPrice: 1347,\r\n      supply: 623,\r\n      demand: 1911,\r\n      buyPrice: 1320,\r\n      sellPrice: 1374,\r\n      buyQuantity: 500,\r\n      sellQuantity: 800,\r\n      unit: 'Units',\r\n      quantity: 1\r\n    },\r\n    {\r\n      id: 'plasma-cells',\r\n      name: 'Plasma Cells',\r\n      icon: '⚡',\r\n      lastPrice: 77,\r\n      supply: 4618,\r\n      demand: 3229,\r\n      buyPrice: 75,\r\n      sellPrice: 79,\r\n      buyQuantity: 2000,\r\n      sellQuantity: 1500,\r\n      unit: 'Units',\r\n      quantity: 1\r\n    },\r\n    {\r\n      id: 'fusion-reactors',\r\n      name: 'Fusion Reactors',\r\n      icon: '🔋',\r\n      lastPrice: 5235,\r\n      supply: 214,\r\n      demand: 800,\r\n      buyPrice: 5130,\r\n      sellPrice: 5340,\r\n      buyQuantity: 100,\r\n      sellQuantity: 300,\r\n      unit: 'Units',\r\n      quantity: 1\r\n    }\r\n  ]);\r\n\r\n  const [aiPortfolio, setAiPortfolio] = useState({\r\n    'Quantum Crystals': 12345,\r\n    'Dark Matter': 8901,\r\n    'Neural Processors': 15678,\r\n    'Plasma Cells': 4567\r\n  });\r\n\r\n  const [marketTrends, setMarketTrends] = useState([\r\n    { name: 'Quantum Crystals', trend: 'Bullish', color: '#00ff88' },\r\n    { name: 'Dark Matter', trend: 'Bearish', color: '#ff4444' },\r\n    { name: 'Neural Processors', trend: 'Bullish', color: '#00ff88' }\r\n  ]);\r\n\r\n  const [tradeFeed, setTradeFeed] = useState([\r\n    { time: '19:11', commodity: 'FREAC', action: 'SELL', quantity: 11, value: 56903 },\r\n    { time: '19:10', commodity: 'ACORE', action: 'BUY', quantity: 47, value: 61147 },\r\n    { time: '19:09', commodity: 'QCRYS', action: 'SELL', quantity: 73, value: 2190 },\r\n    { time: '19:08', commodity: 'DMATT', action: 'BUY', quantity: 25, value: 23225 },\r\n    { time: '19:07', commodity: 'NPROC', action: 'SELL', quantity: 15, value: 4560 }\r\n  ]);\r\n\r\n  const handleQuantityChange = (commodityId, newQuantity) => {\r\n    setCommodities(prev => prev.map(commodity => \r\n      commodity.id === commodityId \r\n        ? { ...commodity, quantity: Math.max(1, Math.min(100, newQuantity)) }\r\n        : commodity\r\n    ));\r\n  };\r\n\r\n  const handleBuy = (commodityId) => {\r\n    const commodity = commodities.find(c => c.id === commodityId);\r\n    const cost = commodity.buyPrice * commodity.quantity;\r\n    \r\n    if (gameState.credits >= cost) {\r\n      setGameState(prev => ({\r\n        ...prev,\r\n        credits: prev.credits - cost,\r\n        totalMargin: prev.totalMargin + cost\r\n      }));\r\n      \r\n      // Add to trade feed\r\n      const newTrade = {\r\n        time: new Date().toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' }),\r\n        commodity: commodity.name.substring(0, 5).toUpperCase(),\r\n        action: 'BUY',\r\n        quantity: commodity.quantity,\r\n        value: cost\r\n      };\r\n      \r\n      setTradeFeed(prev => [newTrade, ...prev.slice(0, 4)]);\r\n    }\r\n  };\r\n\r\n  const handleSell = (commodityId) => {\r\n    const commodity = commodities.find(c => c.id === commodityId);\r\n    const revenue = commodity.sellPrice * commodity.quantity;\r\n    \r\n    setGameState(prev => ({\r\n      ...prev,\r\n      credits: prev.credits + revenue,\r\n      profit: prev.profit + (revenue - commodity.buyPrice * commodity.quantity)\r\n    }));\r\n    \r\n    // Add to trade feed\r\n    const newTrade = {\r\n      time: new Date().toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' }),\r\n      commodity: commodity.name.substring(0, 5).toUpperCase(),\r\n      action: 'SELL',\r\n      quantity: commodity.quantity,\r\n      value: revenue\r\n    };\r\n    \r\n    setTradeFeed(prev => [newTrade, ...prev.slice(0, 4)]);\r\n  };\r\n\r\n  const toggleSimulation = () => {\r\n    setGameState(prev => ({\r\n      ...prev,\r\n      isSimulationPaused: !prev.isSimulationPaused\r\n    }));\r\n  };\r\n\r\n  // Simulate price fluctuations\r\n  useEffect(() => {\r\n    if (!gameState.isSimulationPaused) {\r\n      const interval = setInterval(() => {\r\n        setCommodities(prev => prev.map(commodity => {\r\n          const priceChange = (Math.random() - 0.5) * 0.1; // ±5% change\r\n          const newLastPrice = Math.max(1, Math.round(commodity.lastPrice * (1 + priceChange)));\r\n          const newBuyPrice = Math.max(1, newLastPrice - Math.floor(Math.random() * 3) - 1);\r\n          const newSellPrice = newLastPrice + Math.floor(Math.random() * 3) + 1;\r\n          \r\n          return {\r\n            ...commodity,\r\n            lastPrice: newLastPrice,\r\n            buyPrice: newBuyPrice,\r\n            sellPrice: newSellPrice\r\n          };\r\n        }));\r\n      }, 3000);\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [gameState.isSimulationPaused]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header \r\n        gameState={gameState} \r\n        onToggleSimulation={toggleSimulation}\r\n      />\r\n      <div className=\"main-content\">\r\n        <TradingGrid \r\n          commodities={commodities}\r\n          onQuantityChange={handleQuantityChange}\r\n          onBuy={handleBuy}\r\n          onSell={handleSell}\r\n        />\r\n        <Sidebar \r\n          aiPortfolio={aiPortfolio}\r\n          marketTrends={marketTrends}\r\n          tradeFeed={tradeFeed}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"F:\\\\Windsurf\\\\Native\\\\GTC 3\\\\src\\\\contexts\\\\MultiplayerContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MultiplayerContext = /*#__PURE__*/createContext();\nexport const useMultiplayer = () => {\n  _s();\n  const context = useContext(MultiplayerContext);\n  if (!context) {\n    throw new Error('useMultiplayer must be used within a MultiplayerProvider');\n  }\n  return context;\n};\n_s(useMultiplayer, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const MultiplayerProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [onlinePlayers, setOnlinePlayers] = useState([]);\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [globalMarket, setGlobalMarket] = useState(null);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [playerData, setPlayerData] = useState(null);\n  useEffect(() => {\n    // Connect to the multiplayer server\n    const newSocket = io('http://localhost:3001', {\n      transports: ['websocket', 'polling'],\n      timeout: 20000,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n    setSocket(newSocket);\n\n    // Connection events\n    newSocket.on('connect', () => {\n      console.log('Connected to multiplayer server with ID:', newSocket.id);\n      setIsConnected(true);\n    });\n    newSocket.on('disconnect', () => {\n      console.log('Disconnected from multiplayer server');\n      setIsConnected(false);\n    });\n    newSocket.on('connect_error', error => {\n      console.error('Connection error:', error);\n      setIsConnected(false);\n    });\n    newSocket.on('reconnect', attemptNumber => {\n      console.log('Reconnected to multiplayer server after', attemptNumber, 'attempts');\n      setIsConnected(true);\n    });\n\n    // Game state events\n    newSocket.on('gameState', data => {\n      setGlobalMarket(data.globalMarket);\n      setLeaderboard(data.leaderboard);\n      setChatMessages(data.chatMessages);\n      setOnlinePlayers(data.onlinePlayers);\n    });\n    newSocket.on('marketUpdate', market => {\n      setGlobalMarket(market);\n      console.log('Received market update from server:', market.commodities.length, 'commodities');\n    });\n    newSocket.on('leaderboardUpdate', leaderboardData => {\n      setLeaderboard(leaderboardData);\n    });\n    newSocket.on('tradeExecuted', data => {\n      setGlobalMarket(data.updatedMarket);\n      // Update player data if it's the current player\n      if (data.playerUpdate && data.playerUpdate.id === newSocket.id) {\n        setPlayerData(prev => ({\n          ...prev,\n          credits: data.playerUpdate.credits,\n          portfolio: data.playerUpdate.portfolio\n        }));\n      }\n    });\n    newSocket.on('tradeError', error => {\n      console.error('Trade error:', error.message);\n      // You can add a notification system here\n    });\n\n    // Player events\n    newSocket.on('playerJoined', data => {\n      setOnlinePlayers(data.onlinePlayers);\n      // Add system message to chat\n      setChatMessages(prev => [...prev, {\n        id: Date.now(),\n        username: 'System',\n        message: `${data.username} joined the game`,\n        timestamp: new Date().toISOString(),\n        type: 'system'\n      }]);\n    });\n    newSocket.on('playerLeft', data => {\n      setOnlinePlayers(data.onlinePlayers);\n      // Add system message to chat\n      setChatMessages(prev => [...prev, {\n        id: Date.now(),\n        username: 'System',\n        message: `${data.username} left the game`,\n        timestamp: new Date().toISOString(),\n        type: 'system'\n      }]);\n    });\n\n    // Chat events\n    newSocket.on('newMessage', message => {\n      setChatMessages(prev => [...prev, message]);\n    });\n\n    // Cleanup on unmount\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n\n  // Join the game\n  const joinGame = userData => {\n    if (socket) {\n      var _userData$gameState, _userData$gameState2, _userData$gameState3, _userData$gameState4, _userData$gameState5;\n      const playerData = {\n        username: userData.username,\n        credits: ((_userData$gameState = userData.gameState) === null || _userData$gameState === void 0 ? void 0 : _userData$gameState.credits) || 100000,\n        profit: ((_userData$gameState2 = userData.gameState) === null || _userData$gameState2 === void 0 ? void 0 : _userData$gameState2.profit) || 0,\n        pnl: ((_userData$gameState3 = userData.gameState) === null || _userData$gameState3 === void 0 ? void 0 : _userData$gameState3.pnl) || 0,\n        totalMargin: ((_userData$gameState4 = userData.gameState) === null || _userData$gameState4 === void 0 ? void 0 : _userData$gameState4.totalMargin) || 0,\n        portfolio: ((_userData$gameState5 = userData.gameState) === null || _userData$gameState5 === void 0 ? void 0 : _userData$gameState5.portfolio) || {}\n      };\n      setPlayerData(playerData);\n      socket.emit('playerJoin', playerData);\n      console.log('Joining game as:', userData.username);\n    } else {\n      console.error('Socket not available for joining game');\n    }\n  };\n\n  // Execute a trade\n  const executeTrade = tradeData => {\n    if (socket) {\n      socket.emit('executeTrade', tradeData);\n      console.log('Executing trade:', tradeData);\n    } else {\n      console.error('Socket not available for trade execution');\n    }\n  };\n\n  // Send a chat message\n  const sendMessage = (message, type = 'chat') => {\n    if (socket) {\n      socket.emit('sendMessage', {\n        message,\n        type\n      });\n      console.log('Sending message:', message);\n    } else {\n      console.error('Socket not available for sending message');\n    }\n  };\n\n  // Get leaderboard\n  const getLeaderboard = () => {\n    if (socket) {\n      socket.emit('getLeaderboard');\n      console.log('Requesting leaderboard update');\n    } else {\n      console.error('Socket not available for leaderboard request');\n    }\n  };\n\n  // Send heartbeat\n  const sendHeartbeat = () => {\n    if (socket && isConnected) {\n      socket.emit('heartbeat');\n    }\n  };\n\n  // Set up heartbeat interval\n  useEffect(() => {\n    if (isConnected) {\n      const heartbeatInterval = setInterval(sendHeartbeat, 30000); // Every 30 seconds\n      return () => clearInterval(heartbeatInterval);\n    }\n  }, [isConnected]);\n  const value = {\n    socket,\n    isConnected,\n    onlinePlayers,\n    leaderboard,\n    globalMarket,\n    chatMessages,\n    playerData,\n    joinGame,\n    executeTrade,\n    sendMessage,\n    getLeaderboard\n  };\n  return /*#__PURE__*/_jsxDEV(MultiplayerContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n_s2(MultiplayerProvider, \"LKgyKF+wOJyND4m/x/ORk80k4i8=\");\n_c = MultiplayerProvider;\nvar _c;\n$RefreshReg$(_c, \"MultiplayerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","jsxDEV","_jsxDEV","MultiplayerContext","useMultiplayer","_s","context","Error","MultiplayerProvider","children","_s2","socket","setSocket","isConnected","setIsConnected","onlinePlayers","setOnlinePlayers","leaderboard","setLeaderboard","globalMarket","setGlobalMarket","chatMessages","setChatMessages","playerData","setPlayerData","newSocket","transports","timeout","reconnection","reconnectionAttempts","reconnectionDelay","on","console","log","id","error","attemptNumber","data","market","commodities","length","leaderboardData","updatedMarket","playerUpdate","prev","credits","portfolio","message","Date","now","username","timestamp","toISOString","type","close","joinGame","userData","_userData$gameState","_userData$gameState2","_userData$gameState3","_userData$gameState4","_userData$gameState5","gameState","profit","pnl","totalMargin","emit","executeTrade","tradeData","sendMessage","getLeaderboard","sendHeartbeat","heartbeatInterval","setInterval","clearInterval","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/Windsurf/Native/GTC 3/src/contexts/MultiplayerContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\n\nconst MultiplayerContext = createContext();\n\nexport const useMultiplayer = () => {\n  const context = useContext(MultiplayerContext);\n  if (!context) {\n    throw new Error('useMultiplayer must be used within a MultiplayerProvider');\n  }\n  return context;\n};\n\nexport const MultiplayerProvider = ({ children }) => {\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [onlinePlayers, setOnlinePlayers] = useState([]);\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [globalMarket, setGlobalMarket] = useState(null);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [playerData, setPlayerData] = useState(null);\n\n  useEffect(() => {\n    // Connect to the multiplayer server\n    const newSocket = io('http://localhost:3001', {\n      transports: ['websocket', 'polling'],\n      timeout: 20000,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n    setSocket(newSocket);\n\n    // Connection events\n    newSocket.on('connect', () => {\n      console.log('Connected to multiplayer server with ID:', newSocket.id);\n      setIsConnected(true);\n    });\n\n    newSocket.on('disconnect', () => {\n      console.log('Disconnected from multiplayer server');\n      setIsConnected(false);\n    });\n\n    newSocket.on('connect_error', (error) => {\n      console.error('Connection error:', error);\n      setIsConnected(false);\n    });\n\n    newSocket.on('reconnect', (attemptNumber) => {\n      console.log('Reconnected to multiplayer server after', attemptNumber, 'attempts');\n      setIsConnected(true);\n    });\n\n    // Game state events\n    newSocket.on('gameState', (data) => {\n      setGlobalMarket(data.globalMarket);\n      setLeaderboard(data.leaderboard);\n      setChatMessages(data.chatMessages);\n      setOnlinePlayers(data.onlinePlayers);\n    });\n\n    newSocket.on('marketUpdate', (market) => {\n      setGlobalMarket(market);\n      console.log('Received market update from server:', market.commodities.length, 'commodities');\n    });\n\n    newSocket.on('leaderboardUpdate', (leaderboardData) => {\n      setLeaderboard(leaderboardData);\n    });\n\n    newSocket.on('tradeExecuted', (data) => {\n      setGlobalMarket(data.updatedMarket);\n      // Update player data if it's the current player\n      if (data.playerUpdate && data.playerUpdate.id === newSocket.id) {\n        setPlayerData(prev => ({\n          ...prev,\n          credits: data.playerUpdate.credits,\n          portfolio: data.playerUpdate.portfolio\n        }));\n      }\n    });\n\n    newSocket.on('tradeError', (error) => {\n      console.error('Trade error:', error.message);\n      // You can add a notification system here\n    });\n\n    // Player events\n    newSocket.on('playerJoined', (data) => {\n      setOnlinePlayers(data.onlinePlayers);\n      // Add system message to chat\n      setChatMessages(prev => [...prev, {\n        id: Date.now(),\n        username: 'System',\n        message: `${data.username} joined the game`,\n        timestamp: new Date().toISOString(),\n        type: 'system'\n      }]);\n    });\n\n    newSocket.on('playerLeft', (data) => {\n      setOnlinePlayers(data.onlinePlayers);\n      // Add system message to chat\n      setChatMessages(prev => [...prev, {\n        id: Date.now(),\n        username: 'System',\n        message: `${data.username} left the game`,\n        timestamp: new Date().toISOString(),\n        type: 'system'\n      }]);\n    });\n\n    // Chat events\n    newSocket.on('newMessage', (message) => {\n      setChatMessages(prev => [...prev, message]);\n    });\n\n    // Cleanup on unmount\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n\n  // Join the game\n  const joinGame = (userData) => {\n    if (socket) {\n      const playerData = {\n        username: userData.username,\n        credits: userData.gameState?.credits || 100000,\n        profit: userData.gameState?.profit || 0,\n        pnl: userData.gameState?.pnl || 0,\n        totalMargin: userData.gameState?.totalMargin || 0,\n        portfolio: userData.gameState?.portfolio || {}\n      };\n      \n      setPlayerData(playerData);\n      socket.emit('playerJoin', playerData);\n      console.log('Joining game as:', userData.username);\n    } else {\n      console.error('Socket not available for joining game');\n    }\n  };\n\n  // Execute a trade\n  const executeTrade = (tradeData) => {\n    if (socket) {\n      socket.emit('executeTrade', tradeData);\n      console.log('Executing trade:', tradeData);\n    } else {\n      console.error('Socket not available for trade execution');\n    }\n  };\n\n  // Send a chat message\n  const sendMessage = (message, type = 'chat') => {\n    if (socket) {\n      socket.emit('sendMessage', { message, type });\n      console.log('Sending message:', message);\n    } else {\n      console.error('Socket not available for sending message');\n    }\n  };\n\n  // Get leaderboard\n  const getLeaderboard = () => {\n    if (socket) {\n      socket.emit('getLeaderboard');\n      console.log('Requesting leaderboard update');\n    } else {\n      console.error('Socket not available for leaderboard request');\n    }\n  };\n\n  // Send heartbeat\n  const sendHeartbeat = () => {\n    if (socket && isConnected) {\n      socket.emit('heartbeat');\n    }\n  };\n\n  // Set up heartbeat interval\n  useEffect(() => {\n    if (isConnected) {\n      const heartbeatInterval = setInterval(sendHeartbeat, 30000); // Every 30 seconds\n      return () => clearInterval(heartbeatInterval);\n    }\n  }, [isConnected]);\n\n  const value = {\n    socket,\n    isConnected,\n    onlinePlayers,\n    leaderboard,\n    globalMarket,\n    chatMessages,\n    playerData,\n    joinGame,\n    executeTrade,\n    sendMessage,\n    getLeaderboard\n  };\n\n  return (\n    <MultiplayerContext.Provider value={value}>\n      {children}\n    </MultiplayerContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
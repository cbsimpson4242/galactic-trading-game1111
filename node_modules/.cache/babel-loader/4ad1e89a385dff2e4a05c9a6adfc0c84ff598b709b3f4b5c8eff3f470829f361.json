{"ast":null,"code":"var _jsxFileName = \"F:\\\\Windsurf\\\\Native\\\\GTC 3\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport TradingGrid from './components/TradingGrid';\nimport Sidebar from './components/Sidebar';\nimport NotificationContainer from './components/NotificationContainer';\nimport AITraderPanel from './components/AITraderPanel';\nimport MarketSentiment from './components/MarketSentiment';\nimport { generateAITraders, generateTradingDecision, executeTrade, updateTraderPerformance } from './aiTraders';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [gameState, setGameState] = useState({\n    credits: 100000,\n    profit: 0,\n    pnl: 0,\n    totalMargin: 0,\n    isSimulationPaused: false\n  });\n  const [commodities, setCommodities] = useState([{\n    id: 'quantum-crystals',\n    name: 'Quantum Crystals',\n    icon: '💎',\n    lastPrice: 29,\n    supply: 5825,\n    demand: 2159,\n    buyPrice: 28,\n    sellPrice: 30,\n    buyQuantity: 1068,\n    sellQuantity: 1042,\n    unit: 'Tons',\n    quantity: 1,\n    holdings: 0,\n    priceHistory: [{\n      time: '00:00',\n      price: 25\n    }, {\n      time: '04:00',\n      price: 27\n    }, {\n      time: '08:00',\n      price: 26\n    }, {\n      time: '12:00',\n      price: 28\n    }, {\n      time: '16:00',\n      price: 30\n    }, {\n      time: '20:00',\n      price: 29\n    }]\n  }, {\n    id: 'dark-matter',\n    name: 'Dark Matter',\n    icon: '⚫',\n    lastPrice: 929,\n    supply: 1296,\n    demand: 3383,\n    buyPrice: 910,\n    sellPrice: 948,\n    buyQuantity: 800,\n    sellQuantity: 1200,\n    unit: 'Units',\n    quantity: 1,\n    holdings: 0,\n    priceHistory: [{\n      time: '00:00',\n      price: 850\n    }, {\n      time: '04:00',\n      price: 880\n    }, {\n      time: '08:00',\n      price: 920\n    }, {\n      time: '12:00',\n      price: 950\n    }, {\n      time: '16:00',\n      price: 940\n    }, {\n      time: '20:00',\n      price: 929\n    }]\n  }, {\n    id: 'neural-processors',\n    name: 'Neural Processors',\n    icon: '🧠',\n    lastPrice: 304,\n    supply: 8886,\n    demand: 2359,\n    buyPrice: 298,\n    sellPrice: 310,\n    buyQuantity: 1500,\n    sellQuantity: 1000,\n    unit: 'Units',\n    quantity: 1,\n    holdings: 0,\n    priceHistory: [{\n      time: '00:00',\n      price: 280\n    }, {\n      time: '04:00',\n      price: 290\n    }, {\n      time: '08:00',\n      price: 300\n    }, {\n      time: '12:00',\n      price: 310\n    }, {\n      time: '16:00',\n      price: 305\n    }, {\n      time: '20:00',\n      price: 304\n    }]\n  }, {\n    id: 'antimatter-cores',\n    name: 'Antimatter Cores',\n    icon: '⚛️',\n    lastPrice: 1347,\n    supply: 623,\n    demand: 1911,\n    buyPrice: 1320,\n    sellPrice: 1374,\n    buyQuantity: 500,\n    sellQuantity: 800,\n    unit: 'Units',\n    quantity: 1,\n    holdings: 0,\n    priceHistory: [{\n      time: '00:00',\n      price: 1300\n    }, {\n      time: '04:00',\n      price: 1320\n    }, {\n      time: '08:00',\n      price: 1350\n    }, {\n      time: '12:00',\n      price: 1380\n    }, {\n      time: '16:00',\n      price: 1360\n    }, {\n      time: '20:00',\n      price: 1347\n    }]\n  }, {\n    id: 'plasma-cells',\n    name: 'Plasma Cells',\n    icon: '⚡',\n    lastPrice: 77,\n    supply: 4618,\n    demand: 3229,\n    buyPrice: 75,\n    sellPrice: 79,\n    buyQuantity: 2000,\n    sellQuantity: 1500,\n    unit: 'Units',\n    quantity: 1,\n    holdings: 0,\n    priceHistory: [{\n      time: '00:00',\n      price: 70\n    }, {\n      time: '04:00',\n      price: 72\n    }, {\n      time: '08:00',\n      price: 75\n    }, {\n      time: '12:00',\n      price: 78\n    }, {\n      time: '16:00',\n      price: 76\n    }, {\n      time: '20:00',\n      price: 77\n    }]\n  }, {\n    id: 'fusion-reactors',\n    name: 'Fusion Reactors',\n    icon: '🔋',\n    lastPrice: 5235,\n    supply: 214,\n    demand: 800,\n    buyPrice: 5130,\n    sellPrice: 5340,\n    buyQuantity: 100,\n    sellQuantity: 300,\n    unit: 'Units',\n    quantity: 1,\n    holdings: 0,\n    priceHistory: [{\n      time: '00:00',\n      price: 5000\n    }, {\n      time: '04:00',\n      price: 5100\n    }, {\n      time: '08:00',\n      price: 5200\n    }, {\n      time: '12:00',\n      price: 5300\n    }, {\n      time: '16:00',\n      price: 5250\n    }, {\n      time: '20:00',\n      price: 5235\n    }]\n  }]);\n  const [aiPortfolio, setAiPortfolio] = useState({\n    'Quantum Crystals': 12345,\n    'Dark Matter': 8901,\n    'Neural Processors': 15678,\n    'Plasma Cells': 4567\n  });\n  const [marketTrends, setMarketTrends] = useState([{\n    name: 'Quantum Crystals',\n    trend: 'Bullish',\n    color: '#00ff88'\n  }, {\n    name: 'Dark Matter',\n    trend: 'Bearish',\n    color: '#ff4444'\n  }, {\n    name: 'Neural Processors',\n    trend: 'Bullish',\n    color: '#00ff88'\n  }]);\n  const [tradeFeed, setTradeFeed] = useState([{\n    time: '19:11',\n    commodity: 'FREAC',\n    action: 'SELL',\n    quantity: 11,\n    value: 56903\n  }, {\n    time: '19:10',\n    commodity: 'ACORE',\n    action: 'BUY',\n    quantity: 47,\n    value: 61147\n  }, {\n    time: '19:09',\n    commodity: 'QCRYS',\n    action: 'SELL',\n    quantity: 73,\n    value: 2190\n  }, {\n    time: '19:08',\n    commodity: 'DMATT',\n    action: 'BUY',\n    quantity: 25,\n    value: 23225\n  }, {\n    time: '19:07',\n    commodity: 'NPROC',\n    action: 'SELL',\n    quantity: 15,\n    value: 4560\n  }]);\n  const [notifications, setNotifications] = useState([]);\n\n  // AI Trading System\n  const [aiTraders, setAiTraders] = useState([]);\n  const [aiTradeFeed, setAiTradeFeed] = useState([]);\n  const [showAITraders, setShowAITraders] = useState(false);\n  const [showMarketSentiment, setShowMarketSentiment] = useState(false);\n  const handleQuantityChange = (commodityId, newQuantity) => {\n    setCommodities(prev => prev.map(commodity => commodity.id === commodityId ? {\n      ...commodity,\n      quantity: Math.max(1, newQuantity)\n    } : commodity));\n  };\n  const handleBuy = commodityId => {\n    const commodity = commodities.find(c => c.id === commodityId);\n    const cost = commodity.buyPrice * commodity.quantity;\n    if (gameState.credits >= cost && commodity.supply >= commodity.quantity) {\n      setGameState(prev => ({\n        ...prev,\n        credits: prev.credits - cost,\n        totalMargin: prev.totalMargin + cost\n      }));\n\n      // Update holdings and supply\n      setCommodities(prev => prev.map(c => c.id === commodityId ? {\n        ...c,\n        holdings: c.holdings + c.quantity,\n        supply: Math.max(0, c.supply - c.quantity)\n      } : c));\n\n      // Add to trade feed\n      const newTrade = {\n        time: new Date().toLocaleTimeString('en-US', {\n          hour12: false,\n          hour: '2-digit',\n          minute: '2-digit'\n        }),\n        commodity: commodity.name.substring(0, 5).toUpperCase(),\n        action: 'BUY',\n        quantity: commodity.quantity,\n        value: cost\n      };\n      setTradeFeed(prev => [newTrade, ...prev.slice(0, 4)]);\n\n      // Show success notification\n      showNotification({\n        type: 'buy',\n        title: 'Trade Successful!',\n        message: `Bought ${commodity.quantity} ${commodity.name} for ₹${cost.toLocaleString()}`\n      });\n    } else if (commodity.supply < commodity.quantity) {\n      // Show error notification for insufficient supply\n      showNotification({\n        type: 'error',\n        title: 'Insufficient Supply',\n        message: `Only ${commodity.supply} ${commodity.name} available, but trying to buy ${commodity.quantity}`\n      });\n    } else {\n      // Show error notification for insufficient credits\n      showNotification({\n        type: 'error',\n        title: 'Insufficient Credits',\n        message: `You need ₹${cost.toLocaleString()} but only have ₹${gameState.credits.toLocaleString()}`\n      });\n    }\n  };\n  const handleSell = (commodityId, sellQuantity = null) => {\n    const commodity = commodities.find(c => c.id === commodityId);\n    const quantityToSell = sellQuantity !== null ? sellQuantity : commodity.quantity;\n    const revenue = commodity.sellPrice * quantityToSell;\n\n    // Check if user has enough holdings to sell\n    if (commodity.holdings >= quantityToSell) {\n      setGameState(prev => ({\n        ...prev,\n        credits: prev.credits + revenue,\n        profit: prev.profit + (revenue - commodity.buyPrice * quantityToSell)\n      }));\n\n      // Update holdings and supply\n      setCommodities(prev => prev.map(c => c.id === commodityId ? {\n        ...c,\n        holdings: c.holdings - quantityToSell,\n        supply: c.supply + quantityToSell\n      } : c));\n\n      // Add to trade feed\n      const newTrade = {\n        time: new Date().toLocaleTimeString('en-US', {\n          hour12: false,\n          hour: '2-digit',\n          minute: '2-digit'\n        }),\n        commodity: commodity.name.substring(0, 5).toUpperCase(),\n        action: 'SELL',\n        quantity: quantityToSell,\n        value: revenue\n      };\n      setTradeFeed(prev => [newTrade, ...prev.slice(0, 4)]);\n\n      // Show success notification\n      showNotification({\n        type: 'sell',\n        title: 'Trade Successful!',\n        message: `Sold ${quantityToSell} ${commodity.name} for ₹${revenue.toLocaleString()}`\n      });\n    } else {\n      // Show error notification for insufficient holdings\n      showNotification({\n        type: 'error',\n        title: 'Insufficient Holdings',\n        message: `You only have ${commodity.holdings} ${commodity.name} but trying to sell ${quantityToSell}`\n      });\n    }\n  };\n  const toggleSimulation = () => {\n    setGameState(prev => ({\n      ...prev,\n      isSimulationPaused: !prev.isSimulationPaused\n    }));\n  };\n  const showNotification = notificationData => {\n    const newNotification = {\n      id: Date.now() + Math.random(),\n      ...notificationData\n    };\n    setNotifications(prev => [...prev, newNotification]);\n  };\n  const removeNotification = notificationId => {\n    setNotifications(prev => prev.filter(n => n.id !== notificationId));\n  };\n\n  // Initialize AI traders\n  useEffect(() => {\n    if (aiTraders.length === 0) {\n      setAiTraders(generateAITraders());\n    }\n  }, [aiTraders.length]);\n\n  // AI Trading simulation\n  useEffect(() => {\n    if (!gameState.isSimulationPaused && aiTraders.length > 0) {\n      const interval = setInterval(() => {\n        // Generate trading decisions for all AI traders\n        const allDecisions = [];\n        aiTraders.forEach(trader => {\n          const decisions = generateTradingDecision(trader, commodities, {\n            commodities,\n            marketTrends\n          }, aiTradeFeed);\n          allDecisions.push(...decisions);\n        });\n\n        // Execute trades\n        if (allDecisions.length > 0) {\n          const executedTrades = [];\n          const updatedTraders = [...aiTraders];\n          allDecisions.forEach(decision => {\n            const traderIndex = updatedTraders.findIndex(t => t.id === decision.traderId);\n            if (traderIndex !== -1) {\n              // Find the commodity being traded\n              const commodity = commodities.find(c => c.name === decision.commodityName);\n\n              // Check if trade is valid (sufficient supply for buy, or sufficient holdings for sell)\n              let canExecute = false;\n              if (decision.action === 'BUY') {\n                canExecute = commodity && commodity.supply >= decision.quantity;\n              } else if (decision.action === 'SELL') {\n                // For AI traders, we'll assume they have holdings (simplified)\n                canExecute = true;\n              }\n              if (canExecute) {\n                // Execute the trade\n                updatedTraders[traderIndex] = executeTrade(updatedTraders[traderIndex], decision, commodities);\n\n                // Update commodity supply\n                setCommodities(prev => prev.map(c => {\n                  if (c.name === decision.commodityName) {\n                    if (decision.action === 'BUY') {\n                      return {\n                        ...c,\n                        supply: Math.max(0, c.supply - decision.quantity)\n                      };\n                    } else if (decision.action === 'SELL') {\n                      return {\n                        ...c,\n                        supply: c.supply + decision.quantity\n                      };\n                    }\n                  }\n                  return c;\n                }));\n\n                // Add to AI trade feed\n                const aiTrade = {\n                  time: new Date().toLocaleTimeString('en-US', {\n                    hour12: false,\n                    hour: '2-digit',\n                    minute: '2-digit'\n                  }),\n                  trader: decision.traderName,\n                  commodity: decision.commodityName.substring(0, 5).toUpperCase(),\n                  action: decision.action,\n                  quantity: decision.quantity,\n                  value: decision.quantity * decision.price,\n                  strategy: decision.strategy,\n                  emotionalState: decision.emotionalState\n                };\n                executedTrades.push(aiTrade);\n              }\n            }\n          });\n\n          // Update AI traders\n          setAiTraders(updatedTraders.map(trader => updateTraderPerformance(trader)));\n\n          // Update AI trade feed\n          setAiTradeFeed(prev => [...executedTrades, ...prev.slice(0, 19)]); // Keep last 20 trades\n\n          // Update main trade feed with some AI trades\n          if (executedTrades.length > 0) {\n            const selectedTrades = executedTrades.slice(0, 3); // Show up to 3 AI trades\n            const newTradeFeed = selectedTrades.map(trade => ({\n              time: trade.time,\n              commodity: trade.commodity,\n              action: trade.action,\n              quantity: trade.quantity,\n              value: trade.value\n            }));\n            setTradeFeed(prev => [...newTradeFeed, ...prev.slice(0, 2)]); // Keep last 5 trades\n          }\n        }\n      }, 5000); // AI traders make decisions every 5 seconds\n\n      return () => clearInterval(interval);\n    }\n  }, [gameState.isSimulationPaused, aiTraders, commodities, marketTrends, aiTradeFeed]);\n  const handleTraderSelect = trader => {\n    console.log('Selected trader:', trader);\n  };\n\n  // Simulate price fluctuations based on supply only\n  useEffect(() => {\n    if (!gameState.isSimulationPaused) {\n      const interval = setInterval(() => {\n        setCommodities(prev => prev.map(commodity => {\n          // Calculate price change based on supply only\n          // As supply increases, price decreases\n          // As supply decreases, price increases\n          const baseSupply = 1000; // Baseline supply level\n          const supplyRatio = commodity.supply / baseSupply;\n\n          // Calculate price change based on supply relationship\n          // Higher supply = lower price, lower supply = higher price\n          const basePriceChange = (1 - supplyRatio) * 0.03; // Base change based on supply\n\n          // Add some randomness to make it more realistic\n          const randomFactor = (Math.random() - 0.5) * 0.02; // ±1% random variation\n          const totalPriceChange = basePriceChange + randomFactor;\n\n          // Calculate new price\n          const newLastPrice = Math.max(1, Math.round(commodity.lastPrice * (1 + totalPriceChange)));\n\n          // Update buy/sell prices with spread\n          const spread = Math.floor(Math.random() * 3) + 1;\n          const newBuyPrice = Math.max(1, newLastPrice - spread);\n          const newSellPrice = newLastPrice + spread;\n\n          // Update price history\n          const currentTime = new Date().toLocaleTimeString('en-US', {\n            hour12: false,\n            hour: '2-digit',\n            minute: '2-digit'\n          });\n          const newPriceHistory = [...commodity.priceHistory.slice(1), {\n            time: currentTime,\n            price: newLastPrice\n          }];\n          return {\n            ...commodity,\n            lastPrice: newLastPrice,\n            buyPrice: newBuyPrice,\n            sellPrice: newSellPrice,\n            priceHistory: newPriceHistory\n          };\n        }));\n      }, 3000);\n      return () => clearInterval(interval);\n    }\n  }, [gameState.isSimulationPaused]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      gameState: gameState,\n      onToggleSimulation: toggleSimulation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(TradingGrid, {\n        commodities: commodities,\n        onQuantityChange: handleQuantityChange,\n        onBuy: handleBuy,\n        onSell: handleSell\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar-container\",\n        children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n          aiPortfolio: aiPortfolio,\n          marketTrends: marketTrends,\n          tradeFeed: tradeFeed,\n          aiTradeFeed: aiTradeFeed\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ai-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `ai-control-btn ${showAITraders ? 'active' : ''}`,\n            onClick: () => setShowAITraders(!showAITraders),\n            children: [\"\\uD83E\\uDD16 AI Traders (\", aiTraders.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `ai-control-btn ${showMarketSentiment ? 'active' : ''}`,\n            onClick: () => setShowMarketSentiment(!showMarketSentiment),\n            children: \"\\uD83D\\uDCCA Market Sentiment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 11\n        }, this), showAITraders && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ai-panel-overlay\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ai-panel-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"ai-panel-close-btn\",\n              onClick: () => setShowAITraders(false),\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(AITraderPanel, {\n              aiTraders: aiTraders,\n              onTraderSelect: handleTraderSelect\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 500,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 13\n        }, this), showMarketSentiment && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ai-panel-overlay\",\n          children: /*#__PURE__*/_jsxDEV(MarketSentiment, {\n            aiTraders: aiTraders,\n            commodities: commodities\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NotificationContainer, {\n      notifications: notifications,\n      onRemoveNotification: removeNotification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 454,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"4qi/ppm31EGa/D5bYz9IohhRb+s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","TradingGrid","Sidebar","NotificationContainer","AITraderPanel","MarketSentiment","generateAITraders","generateTradingDecision","executeTrade","updateTraderPerformance","jsxDEV","_jsxDEV","App","_s","gameState","setGameState","credits","profit","pnl","totalMargin","isSimulationPaused","commodities","setCommodities","id","name","icon","lastPrice","supply","demand","buyPrice","sellPrice","buyQuantity","sellQuantity","unit","quantity","holdings","priceHistory","time","price","aiPortfolio","setAiPortfolio","marketTrends","setMarketTrends","trend","color","tradeFeed","setTradeFeed","commodity","action","value","notifications","setNotifications","aiTraders","setAiTraders","aiTradeFeed","setAiTradeFeed","showAITraders","setShowAITraders","showMarketSentiment","setShowMarketSentiment","handleQuantityChange","commodityId","newQuantity","prev","map","Math","max","handleBuy","find","c","cost","newTrade","Date","toLocaleTimeString","hour12","hour","minute","substring","toUpperCase","slice","showNotification","type","title","message","toLocaleString","handleSell","quantityToSell","revenue","toggleSimulation","notificationData","newNotification","now","random","removeNotification","notificationId","filter","n","length","interval","setInterval","allDecisions","forEach","trader","decisions","push","executedTrades","updatedTraders","decision","traderIndex","findIndex","t","traderId","commodityName","canExecute","aiTrade","traderName","strategy","emotionalState","selectedTrades","newTradeFeed","trade","clearInterval","handleTraderSelect","console","log","baseSupply","supplyRatio","basePriceChange","randomFactor","totalPriceChange","newLastPrice","round","spread","floor","newBuyPrice","newSellPrice","currentTime","newPriceHistory","className","children","onToggleSimulation","fileName","_jsxFileName","lineNumber","columnNumber","onQuantityChange","onBuy","onSell","onClick","onTraderSelect","onRemoveNotification","_c","$RefreshReg$"],"sources":["F:/Windsurf/Native/GTC 3/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport TradingGrid from './components/TradingGrid';\nimport Sidebar from './components/Sidebar';\nimport NotificationContainer from './components/NotificationContainer';\nimport AITraderPanel from './components/AITraderPanel';\nimport MarketSentiment from './components/MarketSentiment';\nimport { \n  generateAITraders, \n  generateTradingDecision, \n  executeTrade, \n  updateTraderPerformance \n} from './aiTraders';\n\nfunction App() {\n  const [gameState, setGameState] = useState({\n    credits: 100000,\n    profit: 0,\n    pnl: 0,\n    totalMargin: 0,\n    isSimulationPaused: false\n  });\n\n  const [commodities, setCommodities] = useState([\n    {\n      id: 'quantum-crystals',\n      name: 'Quantum Crystals',\n      icon: '💎',\n      lastPrice: 29,\n      supply: 5825,\n      demand: 2159,\n      buyPrice: 28,\n      sellPrice: 30,\n      buyQuantity: 1068,\n      sellQuantity: 1042,\n      unit: 'Tons',\n      quantity: 1,\n      holdings: 0,\n      priceHistory: [\n        { time: '00:00', price: 25 }, { time: '04:00', price: 27 }, { time: '08:00', price: 26 },\n        { time: '12:00', price: 28 }, { time: '16:00', price: 30 }, { time: '20:00', price: 29 }\n      ]\n    },\n    {\n      id: 'dark-matter',\n      name: 'Dark Matter',\n      icon: '⚫',\n      lastPrice: 929,\n      supply: 1296,\n      demand: 3383,\n      buyPrice: 910,\n      sellPrice: 948,\n      buyQuantity: 800,\n      sellQuantity: 1200,\n      unit: 'Units',\n      quantity: 1,\n      holdings: 0,\n      priceHistory: [\n        { time: '00:00', price: 850 }, { time: '04:00', price: 880 }, { time: '08:00', price: 920 },\n        { time: '12:00', price: 950 }, { time: '16:00', price: 940 }, { time: '20:00', price: 929 }\n      ]\n    },\n    {\n      id: 'neural-processors',\n      name: 'Neural Processors',\n      icon: '🧠',\n      lastPrice: 304,\n      supply: 8886,\n      demand: 2359,\n      buyPrice: 298,\n      sellPrice: 310,\n      buyQuantity: 1500,\n      sellQuantity: 1000,\n      unit: 'Units',\n      quantity: 1,\n      holdings: 0,\n      priceHistory: [\n        { time: '00:00', price: 280 }, { time: '04:00', price: 290 }, { time: '08:00', price: 300 },\n        { time: '12:00', price: 310 }, { time: '16:00', price: 305 }, { time: '20:00', price: 304 }\n      ]\n    },\n    {\n      id: 'antimatter-cores',\n      name: 'Antimatter Cores',\n      icon: '⚛️',\n      lastPrice: 1347,\n      supply: 623,\n      demand: 1911,\n      buyPrice: 1320,\n      sellPrice: 1374,\n      buyQuantity: 500,\n      sellQuantity: 800,\n      unit: 'Units',\n      quantity: 1,\n      holdings: 0,\n      priceHistory: [\n        { time: '00:00', price: 1300 }, { time: '04:00', price: 1320 }, { time: '08:00', price: 1350 },\n        { time: '12:00', price: 1380 }, { time: '16:00', price: 1360 }, { time: '20:00', price: 1347 }\n      ]\n    },\n    {\n      id: 'plasma-cells',\n      name: 'Plasma Cells',\n      icon: '⚡',\n      lastPrice: 77,\n      supply: 4618,\n      demand: 3229,\n      buyPrice: 75,\n      sellPrice: 79,\n      buyQuantity: 2000,\n      sellQuantity: 1500,\n      unit: 'Units',\n      quantity: 1,\n      holdings: 0,\n      priceHistory: [\n        { time: '00:00', price: 70 }, { time: '04:00', price: 72 }, { time: '08:00', price: 75 },\n        { time: '12:00', price: 78 }, { time: '16:00', price: 76 }, { time: '20:00', price: 77 }\n      ]\n    },\n    {\n      id: 'fusion-reactors',\n      name: 'Fusion Reactors',\n      icon: '🔋',\n      lastPrice: 5235,\n      supply: 214,\n      demand: 800,\n      buyPrice: 5130,\n      sellPrice: 5340,\n      buyQuantity: 100,\n      sellQuantity: 300,\n      unit: 'Units',\n      quantity: 1,\n      holdings: 0,\n      priceHistory: [\n        { time: '00:00', price: 5000 }, { time: '04:00', price: 5100 }, { time: '08:00', price: 5200 },\n        { time: '12:00', price: 5300 }, { time: '16:00', price: 5250 }, { time: '20:00', price: 5235 }\n      ]\n    }\n  ]);\n\n  const [aiPortfolio, setAiPortfolio] = useState({\n    'Quantum Crystals': 12345,\n    'Dark Matter': 8901,\n    'Neural Processors': 15678,\n    'Plasma Cells': 4567\n  });\n\n  const [marketTrends, setMarketTrends] = useState([\n    { name: 'Quantum Crystals', trend: 'Bullish', color: '#00ff88' },\n    { name: 'Dark Matter', trend: 'Bearish', color: '#ff4444' },\n    { name: 'Neural Processors', trend: 'Bullish', color: '#00ff88' }\n  ]);\n\n  const [tradeFeed, setTradeFeed] = useState([\n    { time: '19:11', commodity: 'FREAC', action: 'SELL', quantity: 11, value: 56903 },\n    { time: '19:10', commodity: 'ACORE', action: 'BUY', quantity: 47, value: 61147 },\n    { time: '19:09', commodity: 'QCRYS', action: 'SELL', quantity: 73, value: 2190 },\n    { time: '19:08', commodity: 'DMATT', action: 'BUY', quantity: 25, value: 23225 },\n    { time: '19:07', commodity: 'NPROC', action: 'SELL', quantity: 15, value: 4560 }\n  ]);\n\n  const [notifications, setNotifications] = useState([]);\n  \n  // AI Trading System\n  const [aiTraders, setAiTraders] = useState([]);\n  const [aiTradeFeed, setAiTradeFeed] = useState([]);\n  const [showAITraders, setShowAITraders] = useState(false);\n  const [showMarketSentiment, setShowMarketSentiment] = useState(false);\n\n  const handleQuantityChange = (commodityId, newQuantity) => {\n    setCommodities(prev => prev.map(commodity => \n      commodity.id === commodityId \n        ? { ...commodity, quantity: Math.max(1, newQuantity) }\n        : commodity\n    ));\n  };\n\n  const handleBuy = (commodityId) => {\n    const commodity = commodities.find(c => c.id === commodityId);\n    const cost = commodity.buyPrice * commodity.quantity;\n    \n    if (gameState.credits >= cost && commodity.supply >= commodity.quantity) {\n      setGameState(prev => ({\n        ...prev,\n        credits: prev.credits - cost,\n        totalMargin: prev.totalMargin + cost\n      }));\n      \n      // Update holdings and supply\n      setCommodities(prev => prev.map(c => \n        c.id === commodityId \n          ? { \n              ...c, \n              holdings: c.holdings + c.quantity,\n              supply: Math.max(0, c.supply - c.quantity)\n            }\n          : c\n      ));\n      \n      // Add to trade feed\n      const newTrade = {\n        time: new Date().toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' }),\n        commodity: commodity.name.substring(0, 5).toUpperCase(),\n        action: 'BUY',\n        quantity: commodity.quantity,\n        value: cost\n      };\n      \n      setTradeFeed(prev => [newTrade, ...prev.slice(0, 4)]);\n      \n      // Show success notification\n      showNotification({\n        type: 'buy',\n        title: 'Trade Successful!',\n        message: `Bought ${commodity.quantity} ${commodity.name} for ₹${cost.toLocaleString()}`\n      });\n    } else if (commodity.supply < commodity.quantity) {\n      // Show error notification for insufficient supply\n      showNotification({\n        type: 'error',\n        title: 'Insufficient Supply',\n        message: `Only ${commodity.supply} ${commodity.name} available, but trying to buy ${commodity.quantity}`\n      });\n    } else {\n      // Show error notification for insufficient credits\n      showNotification({\n        type: 'error',\n        title: 'Insufficient Credits',\n        message: `You need ₹${cost.toLocaleString()} but only have ₹${gameState.credits.toLocaleString()}`\n      });\n    }\n  };\n\n  const handleSell = (commodityId, sellQuantity = null) => {\n    const commodity = commodities.find(c => c.id === commodityId);\n    const quantityToSell = sellQuantity !== null ? sellQuantity : commodity.quantity;\n    const revenue = commodity.sellPrice * quantityToSell;\n    \n    // Check if user has enough holdings to sell\n    if (commodity.holdings >= quantityToSell) {\n      setGameState(prev => ({\n        ...prev,\n        credits: prev.credits + revenue,\n        profit: prev.profit + (revenue - commodity.buyPrice * quantityToSell)\n      }));\n      \n      // Update holdings and supply\n      setCommodities(prev => prev.map(c => \n        c.id === commodityId \n          ? { \n              ...c, \n              holdings: c.holdings - quantityToSell,\n              supply: c.supply + quantityToSell\n            }\n          : c\n      ));\n      \n      // Add to trade feed\n      const newTrade = {\n        time: new Date().toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' }),\n        commodity: commodity.name.substring(0, 5).toUpperCase(),\n        action: 'SELL',\n        quantity: quantityToSell,\n        value: revenue\n      };\n      \n      setTradeFeed(prev => [newTrade, ...prev.slice(0, 4)]);\n      \n      // Show success notification\n      showNotification({\n        type: 'sell',\n        title: 'Trade Successful!',\n        message: `Sold ${quantityToSell} ${commodity.name} for ₹${revenue.toLocaleString()}`\n      });\n    } else {\n      // Show error notification for insufficient holdings\n      showNotification({\n        type: 'error',\n        title: 'Insufficient Holdings',\n        message: `You only have ${commodity.holdings} ${commodity.name} but trying to sell ${quantityToSell}`\n      });\n    }\n  };\n\n  const toggleSimulation = () => {\n    setGameState(prev => ({\n      ...prev,\n      isSimulationPaused: !prev.isSimulationPaused\n    }));\n  };\n\n  const showNotification = (notificationData) => {\n    const newNotification = {\n      id: Date.now() + Math.random(),\n      ...notificationData\n    };\n    \n    setNotifications(prev => [...prev, newNotification]);\n  };\n\n  const removeNotification = (notificationId) => {\n    setNotifications(prev => prev.filter(n => n.id !== notificationId));\n  };\n\n  // Initialize AI traders\n  useEffect(() => {\n    if (aiTraders.length === 0) {\n      setAiTraders(generateAITraders());\n    }\n  }, [aiTraders.length]);\n\n  // AI Trading simulation\n  useEffect(() => {\n    if (!gameState.isSimulationPaused && aiTraders.length > 0) {\n      const interval = setInterval(() => {\n        // Generate trading decisions for all AI traders\n        const allDecisions = [];\n        \n        aiTraders.forEach(trader => {\n          const decisions = generateTradingDecision(trader, commodities, { commodities, marketTrends }, aiTradeFeed);\n          allDecisions.push(...decisions);\n        });\n        \n        // Execute trades\n        if (allDecisions.length > 0) {\n          const executedTrades = [];\n          const updatedTraders = [...aiTraders];\n          \n          allDecisions.forEach(decision => {\n            const traderIndex = updatedTraders.findIndex(t => t.id === decision.traderId);\n            if (traderIndex !== -1) {\n              // Find the commodity being traded\n              const commodity = commodities.find(c => c.name === decision.commodityName);\n              \n              // Check if trade is valid (sufficient supply for buy, or sufficient holdings for sell)\n              let canExecute = false;\n              if (decision.action === 'BUY') {\n                canExecute = commodity && commodity.supply >= decision.quantity;\n              } else if (decision.action === 'SELL') {\n                // For AI traders, we'll assume they have holdings (simplified)\n                canExecute = true;\n              }\n              \n              if (canExecute) {\n                // Execute the trade\n                updatedTraders[traderIndex] = executeTrade(updatedTraders[traderIndex], decision, commodities);\n                \n                // Update commodity supply\n                setCommodities(prev => prev.map(c => {\n                  if (c.name === decision.commodityName) {\n                    if (decision.action === 'BUY') {\n                      return { ...c, supply: Math.max(0, c.supply - decision.quantity) };\n                    } else if (decision.action === 'SELL') {\n                      return { ...c, supply: c.supply + decision.quantity };\n                    }\n                  }\n                  return c;\n                }));\n                \n                // Add to AI trade feed\n                const aiTrade = {\n                  time: new Date().toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' }),\n                  trader: decision.traderName,\n                  commodity: decision.commodityName.substring(0, 5).toUpperCase(),\n                  action: decision.action,\n                  quantity: decision.quantity,\n                  value: decision.quantity * decision.price,\n                  strategy: decision.strategy,\n                  emotionalState: decision.emotionalState\n                };\n                \n                executedTrades.push(aiTrade);\n              }\n            }\n          });\n          \n          // Update AI traders\n          setAiTraders(updatedTraders.map(trader => updateTraderPerformance(trader)));\n          \n          // Update AI trade feed\n          setAiTradeFeed(prev => [...executedTrades, ...prev.slice(0, 19)]); // Keep last 20 trades\n          \n          // Update main trade feed with some AI trades\n          if (executedTrades.length > 0) {\n            const selectedTrades = executedTrades.slice(0, 3); // Show up to 3 AI trades\n            const newTradeFeed = selectedTrades.map(trade => ({\n              time: trade.time,\n              commodity: trade.commodity,\n              action: trade.action,\n              quantity: trade.quantity,\n              value: trade.value\n            }));\n            \n            setTradeFeed(prev => [...newTradeFeed, ...prev.slice(0, 2)]); // Keep last 5 trades\n          }\n        }\n      }, 5000); // AI traders make decisions every 5 seconds\n\n      return () => clearInterval(interval);\n    }\n  }, [gameState.isSimulationPaused, aiTraders, commodities, marketTrends, aiTradeFeed]);\n\n  const handleTraderSelect = (trader) => {\n    console.log('Selected trader:', trader);\n  };\n\n  // Simulate price fluctuations based on supply only\n  useEffect(() => {\n    if (!gameState.isSimulationPaused) {\n      const interval = setInterval(() => {\n        setCommodities(prev => prev.map(commodity => {\n          // Calculate price change based on supply only\n          // As supply increases, price decreases\n          // As supply decreases, price increases\n          const baseSupply = 1000; // Baseline supply level\n          const supplyRatio = commodity.supply / baseSupply;\n          \n          // Calculate price change based on supply relationship\n          // Higher supply = lower price, lower supply = higher price\n          const basePriceChange = (1 - supplyRatio) * 0.03; // Base change based on supply\n          \n          // Add some randomness to make it more realistic\n          const randomFactor = (Math.random() - 0.5) * 0.02; // ±1% random variation\n          const totalPriceChange = basePriceChange + randomFactor;\n          \n          // Calculate new price\n          const newLastPrice = Math.max(1, Math.round(commodity.lastPrice * (1 + totalPriceChange)));\n          \n          // Update buy/sell prices with spread\n          const spread = Math.floor(Math.random() * 3) + 1;\n          const newBuyPrice = Math.max(1, newLastPrice - spread);\n          const newSellPrice = newLastPrice + spread;\n          \n          // Update price history\n          const currentTime = new Date().toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' });\n          const newPriceHistory = [...commodity.priceHistory.slice(1), { time: currentTime, price: newLastPrice }];\n          \n          return {\n            ...commodity,\n            lastPrice: newLastPrice,\n            buyPrice: newBuyPrice,\n            sellPrice: newSellPrice,\n            priceHistory: newPriceHistory\n          };\n        }));\n      }, 3000);\n\n      return () => clearInterval(interval);\n    }\n  }, [gameState.isSimulationPaused]);\n\n  return (\n    <div className=\"App\">\n      <Header \n        gameState={gameState} \n        onToggleSimulation={toggleSimulation}\n      />\n      <div className=\"main-content\">\n        <TradingGrid \n          commodities={commodities}\n          onQuantityChange={handleQuantityChange}\n          onBuy={handleBuy}\n          onSell={handleSell}\n        />\n        <div className=\"sidebar-container\">\n          <Sidebar \n            aiPortfolio={aiPortfolio}\n            marketTrends={marketTrends}\n            tradeFeed={tradeFeed}\n            aiTradeFeed={aiTradeFeed}\n          />\n          \n          {/* AI Trading Controls */}\n          <div className=\"ai-controls\">\n            <button \n              className={`ai-control-btn ${showAITraders ? 'active' : ''}`}\n              onClick={() => setShowAITraders(!showAITraders)}\n            >\n              🤖 AI Traders ({aiTraders.length})\n            </button>\n            <button \n              className={`ai-control-btn ${showMarketSentiment ? 'active' : ''}`}\n              onClick={() => setShowMarketSentiment(!showMarketSentiment)}\n            >\n              📊 Market Sentiment\n            </button>\n          </div>\n          \n          {/* AI Trader Panel */}\n          {showAITraders && (\n            <div className=\"ai-panel-overlay\">\n              <div className=\"ai-panel-container\">\n                <button \n                  className=\"ai-panel-close-btn\"\n                  onClick={() => setShowAITraders(false)}\n                >\n                  ×\n                </button>\n                <AITraderPanel \n                  aiTraders={aiTraders}\n                  onTraderSelect={handleTraderSelect}\n                />\n              </div>\n            </div>\n          )}\n          \n          {/* Market Sentiment Panel */}\n          {showMarketSentiment && (\n            <div className=\"ai-panel-overlay\">\n              <MarketSentiment \n                aiTraders={aiTraders}\n                commodities={commodities}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      <NotificationContainer \n        notifications={notifications}\n        onRemoveNotification={removeNotification}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
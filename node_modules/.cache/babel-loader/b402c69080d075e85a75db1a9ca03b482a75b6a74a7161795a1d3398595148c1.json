{"ast":null,"code":"var _jsxFileName = \"F:\\\\Windsurf\\\\Native\\\\GTC 3\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport TradingGrid from './components/TradingGrid';\nimport Sidebar from './components/Sidebar';\nimport NotificationContainer from './components/NotificationContainer';\nimport AITraderPanel from './components/AITraderPanel';\nimport MarketSentiment from './components/MarketSentiment';\nimport FactoryManager from './components/FactoryManager';\nimport AIControlCenter from './components/AIControlCenter';\nimport Login from './components/Login';\nimport SettingsPanel from './components/SettingsPanel';\nimport { generateAITraders, generateTradingDecision, generateFactoryDecision, executeTrade, updateTraderPerformance } from './aiTraders';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Game Settings - Easy to modify\n  const [gameSettings, setGameSettings] = useState({\n    // Price calculation settings\n    targetSupply: 50000,\n    // Supply level where price should be around targetPrice\n    targetPrice: 200,\n    // Target price at targetSupply\n    maxPrice: 10000,\n    // Maximum price cap\n\n    // Game balance settings\n    startingCredits: 100000,\n    startingSupply: 50000,\n    // Factory settings\n    factoryProductionTime: 20,\n    // seconds\n\n    // AI settings\n    aiTradingInterval: 1000,\n    // milliseconds\n    priceUpdateInterval: 1000 // milliseconds\n  });\n  const [currentUser, setCurrentUser] = useState(null);\n  const [gameState, setGameState] = useState({\n    credits: gameSettings.startingCredits,\n    profit: 0,\n    pnl: 0,\n    totalMargin: 0,\n    isSimulationPaused: false\n  });\n  const [commodities, setCommodities] = useState([{\n    id: 'quantum-crystals',\n    name: 'Quantum Crystals',\n    icon: '💎',\n    lastPrice: 29,\n    supply: gameSettings.startingSupply,\n    buyPrice: 28,\n    sellPrice: 30,\n    buyQuantity: 1068,\n    sellQuantity: 1042,\n    unit: 'Tons',\n    quantity: 1,\n    holdings: 0,\n    costBasis: 0,\n    // Track average purchase price\n    priceHistory: [{\n      time: '00:00',\n      price: 25\n    }, {\n      time: '02:00',\n      price: 26\n    }, {\n      time: '04:00',\n      price: 27\n    }, {\n      time: '06:00',\n      price: 25\n    }, {\n      time: '08:00',\n      price: 26\n    }, {\n      time: '10:00',\n      price: 28\n    }, {\n      time: '12:00',\n      price: 28\n    }, {\n      time: '14:00',\n      price: 29\n    }, {\n      time: '16:00',\n      price: 30\n    }, {\n      time: '18:00',\n      price: 31\n    }, {\n      time: '20:00',\n      price: 29\n    }, {\n      time: '22:00',\n      price: 30\n    }]\n  }, {\n    id: 'dark-matter',\n    name: 'Dark Matter',\n    icon: '⚫',\n    lastPrice: 929,\n    supply: gameSettings.startingSupply,\n    buyPrice: 910,\n    sellPrice: 948,\n    buyQuantity: 800,\n    sellQuantity: 1200,\n    unit: 'Units',\n    quantity: 1,\n    holdings: 0,\n    costBasis: 0,\n    priceHistory: [{\n      time: '00:00',\n      price: 850\n    }, {\n      time: '02:00',\n      price: 860\n    }, {\n      time: '04:00',\n      price: 880\n    }, {\n      time: '06:00',\n      price: 870\n    }, {\n      time: '08:00',\n      price: 920\n    }, {\n      time: '10:00',\n      price: 935\n    }, {\n      time: '12:00',\n      price: 950\n    }, {\n      time: '14:00',\n      price: 945\n    }, {\n      time: '16:00',\n      price: 940\n    }, {\n      time: '18:00',\n      price: 935\n    }, {\n      time: '20:00',\n      price: 929\n    }, {\n      time: '22:00',\n      price: 925\n    }]\n  }, {\n    id: 'neural-processors',\n    name: 'Neural Processors',\n    icon: '🧠',\n    lastPrice: 304,\n    supply: gameSettings.startingSupply,\n    buyPrice: 298,\n    sellPrice: 310,\n    buyQuantity: 1500,\n    sellQuantity: 1000,\n    unit: 'Units',\n    quantity: 1,\n    holdings: 0,\n    costBasis: 0,\n    priceHistory: [{\n      time: '00:00',\n      price: 280\n    }, {\n      time: '02:00',\n      price: 285\n    }, {\n      time: '04:00',\n      price: 290\n    }, {\n      time: '06:00',\n      price: 288\n    }, {\n      time: '08:00',\n      price: 300\n    }, {\n      time: '10:00',\n      price: 305\n    }, {\n      time: '12:00',\n      price: 310\n    }, {\n      time: '14:00',\n      price: 308\n    }, {\n      time: '16:00',\n      price: 305\n    }, {\n      time: '18:00',\n      price: 302\n    }, {\n      time: '20:00',\n      price: 304\n    }, {\n      time: '22:00',\n      price: 306\n    }]\n  }, {\n    id: 'antimatter-cores',\n    name: 'Antimatter Cores',\n    icon: '⚛️',\n    lastPrice: 1347,\n    supply: gameSettings.startingSupply,\n    buyPrice: 1320,\n    sellPrice: 1374,\n    buyQuantity: 500,\n    sellQuantity: 800,\n    unit: 'Units',\n    quantity: 1,\n    holdings: 0,\n    costBasis: 0,\n    priceHistory: [{\n      time: '00:00',\n      price: 1300\n    }, {\n      time: '02:00',\n      price: 1310\n    }, {\n      time: '04:00',\n      price: 1320\n    }, {\n      time: '06:00',\n      price: 1315\n    }, {\n      time: '08:00',\n      price: 1350\n    }, {\n      time: '10:00',\n      price: 1365\n    }, {\n      time: '12:00',\n      price: 1380\n    }, {\n      time: '14:00',\n      price: 1375\n    }, {\n      time: '16:00',\n      price: 1360\n    }, {\n      time: '18:00',\n      price: 1355\n    }, {\n      time: '20:00',\n      price: 1347\n    }, {\n      time: '22:00',\n      price: 1350\n    }]\n  }, {\n    id: 'plasma-cells',\n    name: 'Plasma Cells',\n    icon: '⚡',\n    lastPrice: 77,\n    supply: gameSettings.startingSupply,\n    buyPrice: 75,\n    sellPrice: 79,\n    buyQuantity: 2000,\n    sellQuantity: 1500,\n    unit: 'Units',\n    quantity: 1,\n    holdings: 0,\n    costBasis: 0,\n    priceHistory: [{\n      time: '00:00',\n      price: 70\n    }, {\n      time: '02:00',\n      price: 71\n    }, {\n      time: '04:00',\n      price: 72\n    }, {\n      time: '06:00',\n      price: 71\n    }, {\n      time: '08:00',\n      price: 75\n    }, {\n      time: '10:00',\n      price: 76\n    }, {\n      time: '12:00',\n      price: 78\n    }, {\n      time: '14:00',\n      price: 77\n    }, {\n      time: '16:00',\n      price: 76\n    }, {\n      time: '18:00',\n      price: 75\n    }, {\n      time: '20:00',\n      price: 77\n    }, {\n      time: '22:00',\n      price: 78\n    }]\n  }, {\n    id: 'fusion-reactors',\n    name: 'Fusion Reactors',\n    icon: '🔋',\n    lastPrice: 5235,\n    supply: gameSettings.startingSupply,\n    buyPrice: 5130,\n    sellPrice: 5340,\n    buyQuantity: 100,\n    sellQuantity: 300,\n    unit: 'Units',\n    quantity: 1,\n    holdings: 0,\n    costBasis: 0,\n    priceHistory: [{\n      time: '00:00',\n      price: 5000\n    }, {\n      time: '02:00',\n      price: 5050\n    }, {\n      time: '04:00',\n      price: 5100\n    }, {\n      time: '06:00',\n      price: 5080\n    }, {\n      time: '08:00',\n      price: 5200\n    }, {\n      time: '10:00',\n      price: 5250\n    }, {\n      time: '12:00',\n      price: 5300\n    }, {\n      time: '14:00',\n      price: 5280\n    }, {\n      time: '16:00',\n      price: 5250\n    }, {\n      time: '18:00',\n      price: 5240\n    }, {\n      time: '20:00',\n      price: 5235\n    }, {\n      time: '22:00',\n      price: 5240\n    }]\n  }]);\n  const [aiPortfolio, setAiPortfolio] = useState({\n    'Quantum Crystals': 12345,\n    'Dark Matter': 8901,\n    'Neural Processors': 15678,\n    'Plasma Cells': 4567\n  });\n  const [marketTrends, setMarketTrends] = useState([{\n    name: 'Quantum Crystals',\n    trend: 'Bullish',\n    color: '#00ff88'\n  }, {\n    name: 'Dark Matter',\n    trend: 'Bearish',\n    color: '#ff4444'\n  }, {\n    name: 'Neural Processors',\n    trend: 'Bullish',\n    color: '#00ff88'\n  }]);\n  const [tradeFeed, setTradeFeed] = useState([{\n    time: '19:11',\n    commodity: 'FREAC',\n    action: 'SELL',\n    quantity: 11,\n    value: 56903,\n    trader: 'AlphaBot1',\n    isAI: true\n  }, {\n    time: '19:10',\n    commodity: 'ACORE',\n    action: 'BUY',\n    quantity: 47,\n    value: 61147,\n    trader: 'You',\n    isAI: false\n  }, {\n    time: '19:09',\n    commodity: 'QCRYS',\n    action: 'SELL',\n    quantity: 73,\n    value: 2190,\n    trader: 'CyberTrader2',\n    isAI: true\n  }, {\n    time: '19:08',\n    commodity: 'DMATT',\n    action: 'BUY',\n    quantity: 25,\n    value: 23225,\n    trader: 'You',\n    isAI: false\n  }, {\n    time: '19:07',\n    commodity: 'NPROC',\n    action: 'SELL',\n    quantity: 15,\n    value: 4560,\n    trader: 'QuantumAI3',\n    isAI: true\n  }]);\n  const [notifications, setNotifications] = useState([]);\n\n  // AI Trading System\n  const [aiTraders, setAiTraders] = useState([]);\n  const [aiTradeFeed, setAiTradeFeed] = useState([]);\n  const [showAITraders, setShowAITraders] = useState(false);\n  const [showMarketSentiment, setShowMarketSentiment] = useState(false);\n  const [showFactoryManager, setShowFactoryManager] = useState(false);\n  const [showAIControlCenter, setShowAIControlCenter] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const [factories, setFactories] = useState([]);\n  const handleQuantityChange = (commodityId, newQuantity) => {\n    setCommodities(prev => prev.map(commodity => commodity.id === commodityId ? {\n      ...commodity,\n      quantity: Math.max(1, newQuantity)\n    } : commodity));\n  };\n  const handleBuy = commodityId => {\n    const commodity = commodities.find(c => c.id === commodityId);\n    const cost = commodity.buyPrice * commodity.quantity;\n    if (gameState.credits >= cost && commodity.supply >= commodity.quantity) {\n      setGameState(prev => ({\n        ...prev,\n        credits: prev.credits - cost,\n        totalMargin: prev.totalMargin + cost\n      }));\n\n      // Update holdings, supply, and cost basis\n      setCommodities(prev => prev.map(c => c.id === commodityId ? {\n        ...c,\n        holdings: c.holdings + c.quantity,\n        supply: Math.max(0, c.supply - c.quantity),\n        costBasis: c.holdings === 0 ? c.buyPrice : (c.costBasis * c.holdings + c.buyPrice * c.quantity) / (c.holdings + c.quantity)\n      } : c));\n\n      // Add to trade feed\n      const newTrade = {\n        time: new Date().toLocaleTimeString('en-US', {\n          hour12: false,\n          hour: '2-digit',\n          minute: '2-digit'\n        }),\n        commodity: commodity.name.substring(0, 5).toUpperCase(),\n        action: 'BUY',\n        quantity: commodity.quantity,\n        value: cost,\n        trader: 'You',\n        isAI: false\n      };\n      setTradeFeed(prev => [newTrade, ...prev.slice(0, 14)]); // Keep last 15 trades total\n\n      // Show success notification\n      showNotification({\n        type: 'buy',\n        title: 'Trade Successful!',\n        message: `Bought ${commodity.quantity} ${commodity.name} for ₹${cost.toLocaleString()}`\n      });\n    } else if (commodity.supply < commodity.quantity) {\n      // Show error notification for insufficient supply\n      showNotification({\n        type: 'error',\n        title: 'Insufficient Supply',\n        message: `Only ${commodity.supply} ${commodity.name} available, but trying to buy ${commodity.quantity}`\n      });\n    } else {\n      // Show error notification for insufficient credits\n      showNotification({\n        type: 'error',\n        title: 'Insufficient Credits',\n        message: `You need ₹${cost.toLocaleString()} but only have ₹${gameState.credits.toLocaleString()}`\n      });\n    }\n  };\n  const handleSell = (commodityId, sellQuantity = null) => {\n    const commodity = commodities.find(c => c.id === commodityId);\n    const quantityToSell = sellQuantity !== null ? sellQuantity : commodity.quantity;\n    const revenue = commodity.sellPrice * quantityToSell;\n\n    // Check if user has enough holdings to sell\n    if (commodity.holdings >= quantityToSell) {\n      setGameState(prev => ({\n        ...prev,\n        credits: prev.credits + revenue,\n        profit: prev.profit + (revenue - commodity.costBasis * quantityToSell)\n      }));\n\n      // Update holdings, supply, and cost basis\n      setCommodities(prev => prev.map(c => c.id === commodityId ? {\n        ...c,\n        holdings: c.holdings - quantityToSell,\n        supply: c.supply + quantityToSell,\n        costBasis: c.holdings - quantityToSell === 0 ? 0 : c.costBasis // Reset cost basis if all sold\n      } : c));\n\n      // Add to trade feed\n      const newTrade = {\n        time: new Date().toLocaleTimeString('en-US', {\n          hour12: false,\n          hour: '2-digit',\n          minute: '2-digit'\n        }),\n        commodity: commodity.name.substring(0, 5).toUpperCase(),\n        action: 'SELL',\n        quantity: quantityToSell,\n        value: revenue,\n        trader: 'You',\n        isAI: false\n      };\n      setTradeFeed(prev => [newTrade, ...prev.slice(0, 14)]); // Keep last 15 trades total\n\n      // Show success notification\n      showNotification({\n        type: 'sell',\n        title: 'Trade Successful!',\n        message: `Sold ${quantityToSell} ${commodity.name} for ₹${revenue.toLocaleString()}`\n      });\n    } else {\n      // Show error notification for insufficient holdings\n      showNotification({\n        type: 'error',\n        title: 'Insufficient Holdings',\n        message: `You only have ${commodity.holdings} ${commodity.name} but trying to sell ${quantityToSell}`\n      });\n    }\n  };\n  const handleLogin = user => {\n    setCurrentUser(user);\n    // Load user's game state if it exists\n    if (user.gameState) {\n      setGameState(prev => ({\n        ...prev,\n        ...user.gameState\n      }));\n    }\n  };\n  const handleLogout = () => {\n    // Save current game state to user data\n    if (currentUser) {\n      const existingUsers = JSON.parse(localStorage.getItem('gtc_users') || '[]');\n      const updatedUsers = existingUsers.map(user => {\n        if (user.username === currentUser.username) {\n          return {\n            ...user,\n            gameState: {\n              credits: gameState.credits,\n              profit: gameState.profit,\n              pnl: gameState.pnl,\n              totalMargin: gameState.totalMargin\n            }\n          };\n        }\n        return user;\n      });\n      localStorage.setItem('gtc_users', JSON.stringify(updatedUsers));\n    }\n    setCurrentUser(null);\n    setGameState({\n      credits: gameSettings.startingCredits,\n      profit: 0,\n      pnl: 0,\n      totalMargin: 0,\n      isSimulationPaused: false\n    });\n  };\n  const toggleSimulation = () => {\n    setGameState(prev => ({\n      ...prev,\n      isSimulationPaused: !prev.isSimulationPaused\n    }));\n  };\n  const showNotification = notificationData => {\n    const newNotification = {\n      id: Date.now() + Math.random(),\n      ...notificationData\n    };\n    setNotifications(prev => [...prev, newNotification]);\n  };\n  const removeNotification = notificationId => {\n    setNotifications(prev => prev.filter(n => n.id !== notificationId));\n  };\n\n  // Calculate live portfolio P&L\n  const calculatePortfolioPnL = commoditiesList => {\n    let totalPnL = 0;\n    let totalPortfolioValue = 0;\n    commoditiesList.forEach(commodity => {\n      if (commodity.holdings > 0) {\n        const currentValue = commodity.holdings * commodity.lastPrice;\n        const costValue = commodity.holdings * commodity.costBasis;\n        const commodityPnL = currentValue - costValue;\n        totalPnL += commodityPnL;\n        totalPortfolioValue += currentValue;\n      }\n    });\n    return {\n      totalPnL,\n      totalPortfolioValue\n    };\n  };\n\n  // Initialize AI traders\n  useEffect(() => {\n    if (aiTraders.length === 0) {\n      setAiTraders(generateAITraders());\n    }\n  }, [aiTraders.length]);\n\n  // Update live P&L whenever commodities change\n  useEffect(() => {\n    const {\n      totalPnL,\n      totalPortfolioValue\n    } = calculatePortfolioPnL(commodities);\n    setGameState(prev => ({\n      ...prev,\n      pnl: totalPnL,\n      totalMargin: totalPortfolioValue\n    }));\n  }, [commodities]);\n\n  // AI Trading simulation - synchronized with price updates\n  useEffect(() => {\n    if (!gameState.isSimulationPaused && aiTraders.length > 0) {\n      const interval = setInterval(() => {\n        // Generate trading decisions for all AI traders\n        const allTradingDecisions = [];\n        const allFactoryDecisions = [];\n        aiTraders.forEach(trader => {\n          // Generate trading decisions\n          const tradingDecisions = generateTradingDecision(trader, commodities, {\n            commodities,\n            marketTrends\n          }, aiTradeFeed);\n          allTradingDecisions.push(...tradingDecisions);\n\n          // Generate factory building decisions (less frequent)\n          const factoryDecisions = generateFactoryDecision(trader, commodities, {\n            commodities,\n            marketTrends\n          }, aiTradeFeed);\n          allFactoryDecisions.push(...factoryDecisions);\n        });\n\n        // Execute trades\n        if (allTradingDecisions.length > 0) {\n          const executedTrades = [];\n          const updatedTraders = [...aiTraders];\n          allTradingDecisions.forEach(decision => {\n            const traderIndex = updatedTraders.findIndex(t => t.id === decision.traderId);\n            if (traderIndex !== -1) {\n              // Find the commodity being traded (use ID for more reliable matching)\n              const commodity = commodities.find(c => c.id === decision.commodityId || c.name === decision.commodityName);\n\n              // Check if trade is valid (sufficient supply for buy, or sufficient holdings for sell)\n              let canExecute = false;\n              if (decision.action === 'BUY') {\n                canExecute = commodity && commodity.supply >= decision.quantity;\n              } else if (decision.action === 'SELL') {\n                // Check if AI trader has sufficient holdings to sell\n                const trader = updatedTraders[traderIndex];\n                const traderHoldings = trader.portfolio[commodity.id] || 0;\n                canExecute = traderHoldings >= decision.quantity;\n              }\n              if (canExecute) {\n                // Execute the trade\n                updatedTraders[traderIndex] = executeTrade(updatedTraders[traderIndex], decision, commodities);\n\n                // Update commodity supply\n                setCommodities(prev => prev.map(c => {\n                  if (c.id === decision.commodityId || c.name === decision.commodityName) {\n                    if (decision.action === 'BUY') {\n                      return {\n                        ...c,\n                        supply: Math.max(0, c.supply - decision.quantity)\n                      };\n                    } else if (decision.action === 'SELL') {\n                      return {\n                        ...c,\n                        supply: c.supply + decision.quantity\n                      };\n                    }\n                  }\n                  return c;\n                }));\n\n                // Add to AI trade feed\n                const aiTrade = {\n                  time: new Date().toLocaleTimeString('en-US', {\n                    hour12: false,\n                    hour: '2-digit',\n                    minute: '2-digit'\n                  }),\n                  trader: decision.traderName,\n                  commodity: decision.commodityName.substring(0, 5).toUpperCase(),\n                  action: decision.action,\n                  quantity: decision.quantity,\n                  value: decision.quantity * decision.price,\n                  strategy: decision.strategy,\n                  emotionalState: decision.emotionalState\n                };\n                executedTrades.push(aiTrade);\n\n                // Debug: Log AI trade execution\n                console.log(`AI Trade: ${decision.traderName} ${decision.action} ${decision.quantity} ${decision.commodityName} at ₹${decision.price}. Supply changed from ${commodity.supply} to ${decision.action === 'BUY' ? commodity.supply - decision.quantity : commodity.supply + decision.quantity}`);\n              }\n            }\n          });\n\n          // Update AI traders\n          setAiTraders(updatedTraders.map(trader => updateTraderPerformance(trader)));\n\n          // Update AI trade feed\n          setAiTradeFeed(prev => [...executedTrades, ...prev.slice(0, 19)]); // Keep last 20 trades\n\n          // Update main trade feed with AI trades\n          if (executedTrades.length > 0) {\n            // Include more AI trades in the main feed for better visibility\n            const selectedTrades = executedTrades.slice(0, Math.min(executedTrades.length, 8)); // Show up to 8 AI trades\n            const newTradeFeed = selectedTrades.map(trade => ({\n              time: trade.time,\n              commodity: trade.commodity,\n              action: trade.action,\n              quantity: trade.quantity,\n              value: trade.value,\n              trader: trade.trader,\n              // Include trader name for identification\n              isAI: true // Mark as AI trade for styling\n            }));\n            setTradeFeed(prev => [...newTradeFeed, ...prev.slice(0, 7)]); // Keep last 15 trades total\n          }\n        }\n\n        // Execute factory building decisions\n        if (allFactoryDecisions.length > 0) {\n          const updatedTraders = [...aiTraders];\n          allFactoryDecisions.forEach(decision => {\n            const traderIndex = updatedTraders.findIndex(t => t.id === decision.traderId);\n            if (traderIndex !== -1) {\n              const trader = updatedTraders[traderIndex];\n\n              // Check if trader has enough capital for factory\n              const factoryCost = 75000; // Basic factory cost\n              if (trader.capital >= factoryCost) {\n                // Create factory for the AI trader\n                const newFactory = {\n                  id: `ai-factory-${trader.id}-${Date.now()}`,\n                  name: `${trader.name}'s ${decision.commodityName} Factory`,\n                  level: 1,\n                  commodityId: decision.commodityId,\n                  commodityName: decision.commodityName,\n                  productionUnit: 'Units',\n                  productionQuantity: 50,\n                  // AI factories produce less\n                  productionTime: gameSettings.factoryProductionTime,\n                  // Use settings\n                  timeRemaining: gameSettings.factoryProductionTime,\n                  currentProduction: 0,\n                  upgradeCost: 150000,\n                  upgradeMultiplier: 1.5,\n                  costMultiplier: 1.3,\n                  lastUpdate: Date.now(),\n                  owner: trader.id,\n                  ownerName: trader.name\n                };\n\n                // Add factory to trader's factories\n                updatedTraders[traderIndex] = {\n                  ...trader,\n                  factories: [...trader.factories, newFactory],\n                  capital: trader.capital - factoryCost,\n                  lastFactoryDecision: Date.now()\n                };\n\n                // Add factory to global factories list\n                setFactories(prev => [...prev, newFactory]);\n\n                // Show notification for AI factory building\n                showNotification({\n                  type: 'info',\n                  title: 'AI Factory Built!',\n                  message: `${trader.name} built a ${decision.commodityName} factory for ₹${factoryCost.toLocaleString()}`\n                });\n              }\n            }\n          });\n\n          // Update AI traders\n          setAiTraders(updatedTraders);\n        }\n      }, gameSettings.aiTradingInterval); // Use settings for AI trading interval\n\n      return () => clearInterval(interval);\n    }\n  }, [gameState.isSimulationPaused, aiTraders, commodities, marketTrends, aiTradeFeed]);\n  const handleTraderSelect = trader => {\n    console.log('Selected trader:', trader);\n  };\n\n  // Settings Functions\n  const handleUpdateSettings = newSettings => {\n    setGameSettings(newSettings);\n\n    // Show notification\n    showNotification({\n      type: 'success',\n      title: 'Settings Updated!',\n      message: 'Game settings have been updated successfully'\n    });\n  };\n\n  // AI Control Center Functions\n  const handleUpdateAITraders = updatedTraders => {\n    setAiTraders(updatedTraders);\n\n    // Show notification\n    showNotification({\n      type: 'info',\n      title: 'AI Settings Updated!',\n      message: `Updated settings for ${updatedTraders.length} AI traders`\n    });\n  };\n\n  // Factory Management Functions\n  const handleBuildFactory = (template, commodity) => {\n    const newFactory = {\n      id: `factory-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      name: `${template.name} - ${commodity.name}`,\n      level: 1,\n      commodityId: commodity.id,\n      commodityName: commodity.name,\n      productionUnit: commodity.unit,\n      productionQuantity: template.baseProduction,\n      productionTime: template.productionTime,\n      timeRemaining: template.productionTime,\n      currentProduction: 0,\n      upgradeCost: Math.round(template.cost * template.costMultiplier),\n      upgradeMultiplier: template.upgradeMultiplier,\n      costMultiplier: template.costMultiplier,\n      lastUpdate: Date.now(),\n      owner: 'player',\n      ownerName: 'Player'\n    };\n    setFactories(prev => [...prev, newFactory]);\n\n    // Deduct credits\n    setGameState(prev => ({\n      ...prev,\n      credits: prev.credits - template.cost\n    }));\n\n    // Show success notification\n    showNotification({\n      type: 'success',\n      title: 'Factory Built!',\n      message: `Successfully built ${newFactory.name} for ₹${template.cost.toLocaleString()}`\n    });\n  };\n  const handleUpgradeFactory = factoryId => {\n    const factory = factories.find(f => f.id === factoryId);\n    if (!factory || gameState.credits < factory.upgradeCost) {\n      showNotification({\n        type: 'error',\n        title: 'Cannot Upgrade',\n        message: `You need ₹${factory === null || factory === void 0 ? void 0 : factory.upgradeCost.toLocaleString()} to upgrade this factory`\n      });\n      return;\n    }\n    setFactories(prev => prev.map(f => {\n      if (f.id === factoryId) {\n        return {\n          ...f,\n          level: f.level + 1,\n          productionQuantity: Math.round(f.productionQuantity * f.upgradeMultiplier),\n          upgradeCost: Math.round(f.upgradeCost * f.costMultiplier)\n        };\n      }\n      return f;\n    }));\n\n    // Deduct credits\n    setGameState(prev => ({\n      ...prev,\n      credits: prev.credits - factory.upgradeCost\n    }));\n\n    // Show success notification\n    showNotification({\n      type: 'success',\n      title: 'Factory Upgraded!',\n      message: `Upgraded ${factory.name} to Level ${factory.level + 1} for ₹${factory.upgradeCost.toLocaleString()}`\n    });\n  };\n\n  // Simulate price fluctuations based on supply only\n  useEffect(() => {\n    if (!gameState.isSimulationPaused) {\n      const interval = setInterval(() => {\n        setCommodities(prev => prev.map(commodity => {\n          // Calculate price based on supply using game settings\n          // Use inverse relationship: price = basePrice * (targetSupply / currentSupply)\n          const basePrice = gameSettings.targetPrice * (gameSettings.targetSupply / commodity.supply);\n\n          // Add some variation to make it more realistic\n          const variation = (Math.random() - 0.5) * 0.2; // ±10% variation\n          const newLastPrice = Math.max(1, Math.round(basePrice * (1 + variation)));\n\n          // Add momentum based on supply changes\n          const supplyChange = commodity.supply - (commodity.supply + Math.floor((Math.random() - 0.5) * 50));\n          const momentumFactor = supplyChange / 1000 * 0.1; // Small momentum effect\n\n          // Final price with momentum and maximum cap\n          const finalPrice = Math.max(1, Math.min(gameSettings.maxPrice, Math.round(newLastPrice * (1 + momentumFactor))));\n\n          // Update buy/sell prices with spread\n          const spread = Math.floor(Math.random() * 3) + 1;\n          const newBuyPrice = Math.max(1, finalPrice - spread);\n          const newSellPrice = finalPrice + spread;\n\n          // Update price history - keep last 50 data points for longer history\n          const currentTime = new Date().toLocaleTimeString('en-US', {\n            hour12: false,\n            hour: '2-digit',\n            minute: '2-digit'\n          });\n          const newPriceHistory = [...commodity.priceHistory, {\n            time: currentTime,\n            price: finalPrice\n          }];\n          // Keep only the last 50 data points to prevent memory issues\n          if (newPriceHistory.length > 50) {\n            newPriceHistory.splice(0, newPriceHistory.length - 50);\n          }\n          return {\n            ...commodity,\n            lastPrice: finalPrice,\n            buyPrice: newBuyPrice,\n            sellPrice: newSellPrice,\n            priceHistory: newPriceHistory\n          };\n        }));\n      }, gameSettings.priceUpdateInterval); // Use settings for update interval\n\n      return () => clearInterval(interval);\n    }\n  }, [gameState.isSimulationPaused]);\n\n  // Factory Production Timer\n  useEffect(() => {\n    if (!gameState.isSimulationPaused && factories.length > 0) {\n      const interval = setInterval(() => {\n        setFactories(prev => prev.map(factory => {\n          const now = Date.now();\n          const timeDiff = Math.floor((now - factory.lastUpdate) / 1000); // Convert to seconds\n\n          if (factory.timeRemaining > 0) {\n            const newTimeRemaining = Math.max(0, factory.timeRemaining - timeDiff);\n            if (newTimeRemaining === 0 && factory.timeRemaining > 0) {\n              // Production cycle completed\n              if (factory.owner && factory.owner !== 'player') {\n                // AI-owned factory - add to AI trader's holdings\n                setAiTraders(prevTraders => prevTraders.map(trader => {\n                  if (trader.id === factory.owner) {\n                    return {\n                      ...trader,\n                      portfolio: {\n                        ...trader.portfolio,\n                        [factory.commodityId]: (trader.portfolio[factory.commodityId] || 0) + factory.productionQuantity\n                      }\n                    };\n                  }\n                  return trader;\n                }));\n\n                // Update commodity supply (AI production adds to market supply)\n                setCommodities(prevCommodities => prevCommodities.map(commodity => {\n                  if (commodity.id === factory.commodityId) {\n                    return {\n                      ...commodity,\n                      supply: commodity.supply + factory.productionQuantity\n                    };\n                  }\n                  return commodity;\n                }));\n\n                // Show notification for AI production\n                showNotification({\n                  type: 'info',\n                  title: 'AI Production Complete!',\n                  message: `${factory.ownerName}'s factory produced ${factory.productionQuantity} ${factory.commodityName}`\n                });\n              } else {\n                // Player-owned factory - add to player holdings\n                setCommodities(prevCommodities => prevCommodities.map(commodity => {\n                  if (commodity.id === factory.commodityId) {\n                    return {\n                      ...commodity,\n                      holdings: commodity.holdings + factory.productionQuantity\n                    };\n                  }\n                  return commodity;\n                }));\n\n                // Show notification for player production\n                showNotification({\n                  type: 'success',\n                  title: 'Production Complete!',\n                  message: `${factory.name} produced ${factory.productionQuantity} ${factory.commodityName} - automatically added to holdings!`\n                });\n              }\n\n              // Reset factory for next cycle\n              return {\n                ...factory,\n                timeRemaining: factory.productionTime,\n                currentProduction: 0,\n                lastUpdate: now\n              };\n            } else {\n              // Still producing\n              return {\n                ...factory,\n                timeRemaining: newTimeRemaining,\n                lastUpdate: now\n              };\n            }\n          }\n          return factory;\n        }));\n      }, 1000); // Update every second\n\n      return () => clearInterval(interval);\n    }\n  }, [gameState.isSimulationPaused, factories.length]);\n\n  // Show login screen if no user is logged in\n  if (!currentUser) {\n    return /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: handleLogin,\n      gameSettings: gameSettings\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 837,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      gameState: gameState,\n      onToggleSimulation: toggleSimulation,\n      currentUser: currentUser,\n      onLogout: handleLogout,\n      isSaving: isSaving,\n      onManualSave: handleManualSave,\n      onOpenSettings: () => setShowSettings(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 842,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(TradingGrid, {\n        commodities: commodities,\n        onQuantityChange: handleQuantityChange,\n        onBuy: handleBuy,\n        onSell: handleSell,\n        factories: factories\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 852,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar-container\",\n        children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n          aiPortfolio: aiPortfolio,\n          marketTrends: marketTrends,\n          tradeFeed: tradeFeed,\n          aiTradeFeed: aiTradeFeed\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 860,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ai-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `ai-control-btn ${showAITraders ? 'active' : ''}`,\n            onClick: () => setShowAITraders(!showAITraders),\n            children: [\"\\uD83E\\uDD16 AI Traders (\", aiTraders.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 869,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `ai-control-btn ${showMarketSentiment ? 'active' : ''}`,\n            onClick: () => setShowMarketSentiment(!showMarketSentiment),\n            children: \"\\uD83D\\uDCCA Market Sentiment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 875,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `ai-control-btn ${showFactoryManager ? 'active' : ''}`,\n            onClick: () => setShowFactoryManager(!showFactoryManager),\n            children: [\"\\uD83C\\uDFED Factories (\", factories.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 881,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `ai-control-btn ${showAIControlCenter ? 'active' : ''}`,\n            onClick: () => setShowAIControlCenter(!showAIControlCenter),\n            children: \"\\u2699\\uFE0F AI Controls\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 887,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 868,\n          columnNumber: 11\n        }, this), showAITraders && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ai-panel-overlay\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ai-panel-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"ai-panel-close-btn\",\n              onClick: () => setShowAITraders(false),\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 899,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(AITraderPanel, {\n              aiTraders: aiTraders,\n              onTraderSelect: handleTraderSelect\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 905,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 898,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 897,\n          columnNumber: 13\n        }, this), showMarketSentiment && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ai-panel-overlay\",\n          children: /*#__PURE__*/_jsxDEV(MarketSentiment, {\n            aiTraders: aiTraders,\n            commodities: commodities,\n            onClose: () => setShowMarketSentiment(false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 916,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 915,\n          columnNumber: 13\n        }, this), showFactoryManager && /*#__PURE__*/_jsxDEV(FactoryManager, {\n          factories: factories,\n          commodities: commodities,\n          credits: gameState.credits,\n          onBuildFactory: handleBuildFactory,\n          onUpgradeFactory: handleUpgradeFactory,\n          onClose: () => setShowFactoryManager(false),\n          gameSettings: gameSettings\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 926,\n          columnNumber: 13\n        }, this), showAIControlCenter && /*#__PURE__*/_jsxDEV(AIControlCenter, {\n          aiTraders: aiTraders,\n          onUpdateTraders: handleUpdateAITraders,\n          onClose: () => setShowAIControlCenter(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 939,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 859,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 851,\n      columnNumber: 7\n    }, this), showSettings && /*#__PURE__*/_jsxDEV(SettingsPanel, {\n      gameSettings: gameSettings,\n      onUpdateSettings: handleUpdateSettings,\n      onClose: () => setShowSettings(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 950,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(NotificationContainer, {\n      notifications: notifications,\n      onRemoveNotification: removeNotification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 957,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 841,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Zcaf517TntrPKMJngqiLzghvyfE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","TradingGrid","Sidebar","NotificationContainer","AITraderPanel","MarketSentiment","FactoryManager","AIControlCenter","Login","SettingsPanel","generateAITraders","generateTradingDecision","generateFactoryDecision","executeTrade","updateTraderPerformance","jsxDEV","_jsxDEV","App","_s","gameSettings","setGameSettings","targetSupply","targetPrice","maxPrice","startingCredits","startingSupply","factoryProductionTime","aiTradingInterval","priceUpdateInterval","currentUser","setCurrentUser","gameState","setGameState","credits","profit","pnl","totalMargin","isSimulationPaused","commodities","setCommodities","id","name","icon","lastPrice","supply","buyPrice","sellPrice","buyQuantity","sellQuantity","unit","quantity","holdings","costBasis","priceHistory","time","price","aiPortfolio","setAiPortfolio","marketTrends","setMarketTrends","trend","color","tradeFeed","setTradeFeed","commodity","action","value","trader","isAI","notifications","setNotifications","aiTraders","setAiTraders","aiTradeFeed","setAiTradeFeed","showAITraders","setShowAITraders","showMarketSentiment","setShowMarketSentiment","showFactoryManager","setShowFactoryManager","showAIControlCenter","setShowAIControlCenter","showSettings","setShowSettings","factories","setFactories","handleQuantityChange","commodityId","newQuantity","prev","map","Math","max","handleBuy","find","c","cost","newTrade","Date","toLocaleTimeString","hour12","hour","minute","substring","toUpperCase","slice","showNotification","type","title","message","toLocaleString","handleSell","quantityToSell","revenue","handleLogin","user","handleLogout","existingUsers","JSON","parse","localStorage","getItem","updatedUsers","username","setItem","stringify","toggleSimulation","notificationData","newNotification","now","random","removeNotification","notificationId","filter","n","calculatePortfolioPnL","commoditiesList","totalPnL","totalPortfolioValue","forEach","currentValue","costValue","commodityPnL","length","interval","setInterval","allTradingDecisions","allFactoryDecisions","tradingDecisions","push","factoryDecisions","executedTrades","updatedTraders","decision","traderIndex","findIndex","t","traderId","commodityName","canExecute","traderHoldings","portfolio","aiTrade","traderName","strategy","emotionalState","console","log","selectedTrades","min","newTradeFeed","trade","factoryCost","capital","newFactory","level","productionUnit","productionQuantity","productionTime","timeRemaining","currentProduction","upgradeCost","upgradeMultiplier","costMultiplier","lastUpdate","owner","ownerName","lastFactoryDecision","clearInterval","handleTraderSelect","handleUpdateSettings","newSettings","handleUpdateAITraders","handleBuildFactory","template","toString","substr","baseProduction","round","handleUpgradeFactory","factoryId","factory","f","basePrice","variation","newLastPrice","supplyChange","floor","momentumFactor","finalPrice","spread","newBuyPrice","newSellPrice","currentTime","newPriceHistory","splice","timeDiff","newTimeRemaining","prevTraders","prevCommodities","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onToggleSimulation","onLogout","isSaving","onManualSave","handleManualSave","onOpenSettings","onQuantityChange","onBuy","onSell","onClick","onTraderSelect","onClose","onBuildFactory","onUpgradeFactory","onUpdateTraders","onUpdateSettings","onRemoveNotification","_c","$RefreshReg$"],"sources":["F:/Windsurf/Native/GTC 3/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport TradingGrid from './components/TradingGrid';\nimport Sidebar from './components/Sidebar';\nimport NotificationContainer from './components/NotificationContainer';\nimport AITraderPanel from './components/AITraderPanel';\nimport MarketSentiment from './components/MarketSentiment';\nimport FactoryManager from './components/FactoryManager';\nimport AIControlCenter from './components/AIControlCenter';\nimport Login from './components/Login';\nimport SettingsPanel from './components/SettingsPanel';\nimport { \n  generateAITraders, \n  generateTradingDecision, \n  generateFactoryDecision,\n  executeTrade, \n  updateTraderPerformance \n} from './aiTraders';\n\nfunction App() {\n  // Game Settings - Easy to modify\n  const [gameSettings, setGameSettings] = useState({\n    // Price calculation settings\n    targetSupply: 50000, // Supply level where price should be around targetPrice\n    targetPrice: 200,    // Target price at targetSupply\n    maxPrice: 10000,     // Maximum price cap\n    \n    // Game balance settings\n    startingCredits: 100000,\n    startingSupply: 50000,\n    \n    // Factory settings\n    factoryProductionTime: 20, // seconds\n    \n      // AI settings\n  aiTradingInterval: 1000, // milliseconds\n  priceUpdateInterval: 1000, // milliseconds\n  });\n\n  const [currentUser, setCurrentUser] = useState(null);\n  const [gameState, setGameState] = useState({\n    credits: gameSettings.startingCredits,\n    profit: 0,\n    pnl: 0,\n    totalMargin: 0,\n    isSimulationPaused: false\n  });\n\n  const [commodities, setCommodities] = useState([\n    {\n      id: 'quantum-crystals',\n      name: 'Quantum Crystals',\n      icon: '💎',\n      lastPrice: 29,\n      supply: gameSettings.startingSupply,\n      buyPrice: 28,\n      sellPrice: 30,\n      buyQuantity: 1068,\n      sellQuantity: 1042,\n      unit: 'Tons',\n      quantity: 1,\n      holdings: 0,\n      costBasis: 0, // Track average purchase price\n      priceHistory: [\n        { time: '00:00', price: 25 }, { time: '02:00', price: 26 }, { time: '04:00', price: 27 }, \n        { time: '06:00', price: 25 }, { time: '08:00', price: 26 }, { time: '10:00', price: 28 },\n        { time: '12:00', price: 28 }, { time: '14:00', price: 29 }, { time: '16:00', price: 30 }, \n        { time: '18:00', price: 31 }, { time: '20:00', price: 29 }, { time: '22:00', price: 30 }\n      ]\n    },\n    {\n      id: 'dark-matter',\n      name: 'Dark Matter',\n      icon: '⚫',\n      lastPrice: 929,\n      supply: gameSettings.startingSupply,\n      buyPrice: 910,\n      sellPrice: 948,\n      buyQuantity: 800,\n      sellQuantity: 1200,\n      unit: 'Units',\n      quantity: 1,\n      holdings: 0,\n      costBasis: 0,\n      priceHistory: [\n        { time: '00:00', price: 850 }, { time: '02:00', price: 860 }, { time: '04:00', price: 880 }, \n        { time: '06:00', price: 870 }, { time: '08:00', price: 920 }, { time: '10:00', price: 935 },\n        { time: '12:00', price: 950 }, { time: '14:00', price: 945 }, { time: '16:00', price: 940 }, \n        { time: '18:00', price: 935 }, { time: '20:00', price: 929 }, { time: '22:00', price: 925 }\n      ]\n    },\n    {\n      id: 'neural-processors',\n      name: 'Neural Processors',\n      icon: '🧠',\n      lastPrice: 304,\n      supply: gameSettings.startingSupply,\n      buyPrice: 298,\n      sellPrice: 310,\n      buyQuantity: 1500,\n      sellQuantity: 1000,\n      unit: 'Units',\n      quantity: 1,\n      holdings: 0,\n      costBasis: 0,\n      priceHistory: [\n        { time: '00:00', price: 280 }, { time: '02:00', price: 285 }, { time: '04:00', price: 290 }, \n        { time: '06:00', price: 288 }, { time: '08:00', price: 300 }, { time: '10:00', price: 305 },\n        { time: '12:00', price: 310 }, { time: '14:00', price: 308 }, { time: '16:00', price: 305 }, \n        { time: '18:00', price: 302 }, { time: '20:00', price: 304 }, { time: '22:00', price: 306 }\n      ]\n    },\n    {\n      id: 'antimatter-cores',\n      name: 'Antimatter Cores',\n      icon: '⚛️',\n      lastPrice: 1347,\n      supply: gameSettings.startingSupply,\n      buyPrice: 1320,\n      sellPrice: 1374,\n      buyQuantity: 500,\n      sellQuantity: 800,\n      unit: 'Units',\n      quantity: 1,\n      holdings: 0,\n      costBasis: 0,\n      priceHistory: [\n        { time: '00:00', price: 1300 }, { time: '02:00', price: 1310 }, { time: '04:00', price: 1320 }, \n        { time: '06:00', price: 1315 }, { time: '08:00', price: 1350 }, { time: '10:00', price: 1365 },\n        { time: '12:00', price: 1380 }, { time: '14:00', price: 1375 }, { time: '16:00', price: 1360 }, \n        { time: '18:00', price: 1355 }, { time: '20:00', price: 1347 }, { time: '22:00', price: 1350 }\n      ]\n    },\n    {\n      id: 'plasma-cells',\n      name: 'Plasma Cells',\n      icon: '⚡',\n      lastPrice: 77,\n      supply: gameSettings.startingSupply,\n      buyPrice: 75,\n      sellPrice: 79,\n      buyQuantity: 2000,\n      sellQuantity: 1500,\n      unit: 'Units',\n      quantity: 1,\n      holdings: 0,\n      costBasis: 0,\n      priceHistory: [\n        { time: '00:00', price: 70 }, { time: '02:00', price: 71 }, { time: '04:00', price: 72 }, \n        { time: '06:00', price: 71 }, { time: '08:00', price: 75 }, { time: '10:00', price: 76 },\n        { time: '12:00', price: 78 }, { time: '14:00', price: 77 }, { time: '16:00', price: 76 }, \n        { time: '18:00', price: 75 }, { time: '20:00', price: 77 }, { time: '22:00', price: 78 }\n      ]\n    },\n    {\n      id: 'fusion-reactors',\n      name: 'Fusion Reactors',\n      icon: '🔋',\n      lastPrice: 5235,\n      supply: gameSettings.startingSupply,\n      buyPrice: 5130,\n      sellPrice: 5340,\n      buyQuantity: 100,\n      sellQuantity: 300,\n      unit: 'Units',\n      quantity: 1,\n      holdings: 0,\n      costBasis: 0,\n      priceHistory: [\n        { time: '00:00', price: 5000 }, { time: '02:00', price: 5050 }, { time: '04:00', price: 5100 }, \n        { time: '06:00', price: 5080 }, { time: '08:00', price: 5200 }, { time: '10:00', price: 5250 },\n        { time: '12:00', price: 5300 }, { time: '14:00', price: 5280 }, { time: '16:00', price: 5250 }, \n        { time: '18:00', price: 5240 }, { time: '20:00', price: 5235 }, { time: '22:00', price: 5240 }\n      ]\n    }\n  ]);\n\n  const [aiPortfolio, setAiPortfolio] = useState({\n    'Quantum Crystals': 12345,\n    'Dark Matter': 8901,\n    'Neural Processors': 15678,\n    'Plasma Cells': 4567\n  });\n\n  const [marketTrends, setMarketTrends] = useState([\n    { name: 'Quantum Crystals', trend: 'Bullish', color: '#00ff88' },\n    { name: 'Dark Matter', trend: 'Bearish', color: '#ff4444' },\n    { name: 'Neural Processors', trend: 'Bullish', color: '#00ff88' }\n  ]);\n\n  const [tradeFeed, setTradeFeed] = useState([\n    { time: '19:11', commodity: 'FREAC', action: 'SELL', quantity: 11, value: 56903, trader: 'AlphaBot1', isAI: true },\n    { time: '19:10', commodity: 'ACORE', action: 'BUY', quantity: 47, value: 61147, trader: 'You', isAI: false },\n    { time: '19:09', commodity: 'QCRYS', action: 'SELL', quantity: 73, value: 2190, trader: 'CyberTrader2', isAI: true },\n    { time: '19:08', commodity: 'DMATT', action: 'BUY', quantity: 25, value: 23225, trader: 'You', isAI: false },\n    { time: '19:07', commodity: 'NPROC', action: 'SELL', quantity: 15, value: 4560, trader: 'QuantumAI3', isAI: true }\n  ]);\n\n  const [notifications, setNotifications] = useState([]);\n  \n  // AI Trading System\n  const [aiTraders, setAiTraders] = useState([]);\n  const [aiTradeFeed, setAiTradeFeed] = useState([]);\n  const [showAITraders, setShowAITraders] = useState(false);\n  const [showMarketSentiment, setShowMarketSentiment] = useState(false);\n  const [showFactoryManager, setShowFactoryManager] = useState(false);\n  const [showAIControlCenter, setShowAIControlCenter] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const [factories, setFactories] = useState([]);\n\n  const handleQuantityChange = (commodityId, newQuantity) => {\n    setCommodities(prev => prev.map(commodity => \n      commodity.id === commodityId \n        ? { ...commodity, quantity: Math.max(1, newQuantity) }\n        : commodity\n    ));\n  };\n\n  const handleBuy = (commodityId) => {\n    const commodity = commodities.find(c => c.id === commodityId);\n    const cost = commodity.buyPrice * commodity.quantity;\n    \n    if (gameState.credits >= cost && commodity.supply >= commodity.quantity) {\n      setGameState(prev => ({\n        ...prev,\n        credits: prev.credits - cost,\n        totalMargin: prev.totalMargin + cost\n      }));\n      \n      // Update holdings, supply, and cost basis\n      setCommodities(prev => prev.map(c => \n        c.id === commodityId \n          ? { \n              ...c, \n              holdings: c.holdings + c.quantity,\n              supply: Math.max(0, c.supply - c.quantity),\n              costBasis: c.holdings === 0 ? c.buyPrice : \n                ((c.costBasis * c.holdings) + (c.buyPrice * c.quantity)) / (c.holdings + c.quantity)\n            }\n          : c\n      ));\n      \n      // Add to trade feed\n      const newTrade = {\n        time: new Date().toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' }),\n        commodity: commodity.name.substring(0, 5).toUpperCase(),\n        action: 'BUY',\n        quantity: commodity.quantity,\n        value: cost,\n        trader: 'You',\n        isAI: false\n      };\n      \n      setTradeFeed(prev => [newTrade, ...prev.slice(0, 14)]); // Keep last 15 trades total\n      \n      // Show success notification\n      showNotification({\n        type: 'buy',\n        title: 'Trade Successful!',\n        message: `Bought ${commodity.quantity} ${commodity.name} for ₹${cost.toLocaleString()}`\n      });\n    } else if (commodity.supply < commodity.quantity) {\n      // Show error notification for insufficient supply\n      showNotification({\n        type: 'error',\n        title: 'Insufficient Supply',\n        message: `Only ${commodity.supply} ${commodity.name} available, but trying to buy ${commodity.quantity}`\n      });\n    } else {\n      // Show error notification for insufficient credits\n      showNotification({\n        type: 'error',\n        title: 'Insufficient Credits',\n        message: `You need ₹${cost.toLocaleString()} but only have ₹${gameState.credits.toLocaleString()}`\n      });\n    }\n  };\n\n  const handleSell = (commodityId, sellQuantity = null) => {\n    const commodity = commodities.find(c => c.id === commodityId);\n    const quantityToSell = sellQuantity !== null ? sellQuantity : commodity.quantity;\n    const revenue = commodity.sellPrice * quantityToSell;\n    \n    // Check if user has enough holdings to sell\n    if (commodity.holdings >= quantityToSell) {\n      setGameState(prev => ({\n        ...prev,\n        credits: prev.credits + revenue,\n        profit: prev.profit + (revenue - commodity.costBasis * quantityToSell)\n      }));\n      \n      // Update holdings, supply, and cost basis\n      setCommodities(prev => prev.map(c => \n        c.id === commodityId \n          ? { \n              ...c, \n              holdings: c.holdings - quantityToSell,\n              supply: c.supply + quantityToSell,\n              costBasis: c.holdings - quantityToSell === 0 ? 0 : c.costBasis // Reset cost basis if all sold\n            }\n          : c\n      ));\n      \n      // Add to trade feed\n      const newTrade = {\n        time: new Date().toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' }),\n        commodity: commodity.name.substring(0, 5).toUpperCase(),\n        action: 'SELL',\n        quantity: quantityToSell,\n        value: revenue,\n        trader: 'You',\n        isAI: false\n      };\n      \n      setTradeFeed(prev => [newTrade, ...prev.slice(0, 14)]); // Keep last 15 trades total\n      \n      // Show success notification\n      showNotification({\n        type: 'sell',\n        title: 'Trade Successful!',\n        message: `Sold ${quantityToSell} ${commodity.name} for ₹${revenue.toLocaleString()}`\n      });\n    } else {\n      // Show error notification for insufficient holdings\n      showNotification({\n        type: 'error',\n        title: 'Insufficient Holdings',\n        message: `You only have ${commodity.holdings} ${commodity.name} but trying to sell ${quantityToSell}`\n      });\n    }\n  };\n\n  const handleLogin = (user) => {\n    setCurrentUser(user);\n    // Load user's game state if it exists\n    if (user.gameState) {\n      setGameState(prev => ({\n        ...prev,\n        ...user.gameState\n      }));\n    }\n  };\n\n  const handleLogout = () => {\n    // Save current game state to user data\n    if (currentUser) {\n      const existingUsers = JSON.parse(localStorage.getItem('gtc_users') || '[]');\n      const updatedUsers = existingUsers.map(user => {\n        if (user.username === currentUser.username) {\n          return {\n            ...user,\n            gameState: {\n              credits: gameState.credits,\n              profit: gameState.profit,\n              pnl: gameState.pnl,\n              totalMargin: gameState.totalMargin\n            }\n          };\n        }\n        return user;\n      });\n      localStorage.setItem('gtc_users', JSON.stringify(updatedUsers));\n    }\n    \n    setCurrentUser(null);\n    setGameState({\n      credits: gameSettings.startingCredits,\n      profit: 0,\n      pnl: 0,\n      totalMargin: 0,\n      isSimulationPaused: false\n    });\n  };\n\n  const toggleSimulation = () => {\n    setGameState(prev => ({\n      ...prev,\n      isSimulationPaused: !prev.isSimulationPaused\n    }));\n  };\n\n  const showNotification = (notificationData) => {\n    const newNotification = {\n      id: Date.now() + Math.random(),\n      ...notificationData\n    };\n    \n    setNotifications(prev => [...prev, newNotification]);\n  };\n\n  const removeNotification = (notificationId) => {\n    setNotifications(prev => prev.filter(n => n.id !== notificationId));\n  };\n\n  // Calculate live portfolio P&L\n  const calculatePortfolioPnL = (commoditiesList) => {\n    let totalPnL = 0;\n    let totalPortfolioValue = 0;\n    \n    commoditiesList.forEach(commodity => {\n      if (commodity.holdings > 0) {\n        const currentValue = commodity.holdings * commodity.lastPrice;\n        const costValue = commodity.holdings * commodity.costBasis;\n        const commodityPnL = currentValue - costValue;\n        \n        totalPnL += commodityPnL;\n        totalPortfolioValue += currentValue;\n      }\n    });\n    \n    return { totalPnL, totalPortfolioValue };\n  };\n\n  // Initialize AI traders\n  useEffect(() => {\n    if (aiTraders.length === 0) {\n      setAiTraders(generateAITraders());\n    }\n  }, [aiTraders.length]);\n\n  // Update live P&L whenever commodities change\n  useEffect(() => {\n    const { totalPnL, totalPortfolioValue } = calculatePortfolioPnL(commodities);\n    setGameState(prev => ({\n      ...prev,\n      pnl: totalPnL,\n      totalMargin: totalPortfolioValue\n    }));\n  }, [commodities]);\n\n  // AI Trading simulation - synchronized with price updates\n  useEffect(() => {\n    if (!gameState.isSimulationPaused && aiTraders.length > 0) {\n      const interval = setInterval(() => {\n        // Generate trading decisions for all AI traders\n        const allTradingDecisions = [];\n        const allFactoryDecisions = [];\n        \n        aiTraders.forEach(trader => {\n          // Generate trading decisions\n          const tradingDecisions = generateTradingDecision(trader, commodities, { commodities, marketTrends }, aiTradeFeed);\n          allTradingDecisions.push(...tradingDecisions);\n          \n          // Generate factory building decisions (less frequent)\n          const factoryDecisions = generateFactoryDecision(trader, commodities, { commodities, marketTrends }, aiTradeFeed);\n          allFactoryDecisions.push(...factoryDecisions);\n        });\n        \n        // Execute trades\n        if (allTradingDecisions.length > 0) {\n          const executedTrades = [];\n          const updatedTraders = [...aiTraders];\n          \n          allTradingDecisions.forEach(decision => {\n            const traderIndex = updatedTraders.findIndex(t => t.id === decision.traderId);\n            if (traderIndex !== -1) {\n              // Find the commodity being traded (use ID for more reliable matching)\n              const commodity = commodities.find(c => c.id === decision.commodityId || c.name === decision.commodityName);\n              \n              // Check if trade is valid (sufficient supply for buy, or sufficient holdings for sell)\n              let canExecute = false;\n              if (decision.action === 'BUY') {\n                canExecute = commodity && commodity.supply >= decision.quantity;\n              } else if (decision.action === 'SELL') {\n                // Check if AI trader has sufficient holdings to sell\n                const trader = updatedTraders[traderIndex];\n                const traderHoldings = trader.portfolio[commodity.id] || 0;\n                canExecute = traderHoldings >= decision.quantity;\n              }\n              \n              if (canExecute) {\n                // Execute the trade\n                updatedTraders[traderIndex] = executeTrade(updatedTraders[traderIndex], decision, commodities);\n                \n                // Update commodity supply\n                setCommodities(prev => prev.map(c => {\n                  if (c.id === decision.commodityId || c.name === decision.commodityName) {\n                    if (decision.action === 'BUY') {\n                      return { ...c, supply: Math.max(0, c.supply - decision.quantity) };\n                    } else if (decision.action === 'SELL') {\n                      return { ...c, supply: c.supply + decision.quantity };\n                    }\n                  }\n                  return c;\n                }));\n                \n                // Add to AI trade feed\n                const aiTrade = {\n                  time: new Date().toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' }),\n                  trader: decision.traderName,\n                  commodity: decision.commodityName.substring(0, 5).toUpperCase(),\n                  action: decision.action,\n                  quantity: decision.quantity,\n                  value: decision.quantity * decision.price,\n                  strategy: decision.strategy,\n                  emotionalState: decision.emotionalState\n                };\n                \n                executedTrades.push(aiTrade);\n                \n                // Debug: Log AI trade execution\n                console.log(`AI Trade: ${decision.traderName} ${decision.action} ${decision.quantity} ${decision.commodityName} at ₹${decision.price}. Supply changed from ${commodity.supply} to ${decision.action === 'BUY' ? commodity.supply - decision.quantity : commodity.supply + decision.quantity}`);\n              }\n            }\n          });\n          \n          // Update AI traders\n          setAiTraders(updatedTraders.map(trader => updateTraderPerformance(trader)));\n          \n          // Update AI trade feed\n          setAiTradeFeed(prev => [...executedTrades, ...prev.slice(0, 19)]); // Keep last 20 trades\n          \n          // Update main trade feed with AI trades\n          if (executedTrades.length > 0) {\n            // Include more AI trades in the main feed for better visibility\n            const selectedTrades = executedTrades.slice(0, Math.min(executedTrades.length, 8)); // Show up to 8 AI trades\n            const newTradeFeed = selectedTrades.map(trade => ({\n              time: trade.time,\n              commodity: trade.commodity,\n              action: trade.action,\n              quantity: trade.quantity,\n              value: trade.value,\n              trader: trade.trader, // Include trader name for identification\n              isAI: true // Mark as AI trade for styling\n            }));\n            \n            setTradeFeed(prev => [...newTradeFeed, ...prev.slice(0, 7)]); // Keep last 15 trades total\n          }\n        }\n        \n        // Execute factory building decisions\n        if (allFactoryDecisions.length > 0) {\n          const updatedTraders = [...aiTraders];\n          \n          allFactoryDecisions.forEach(decision => {\n            const traderIndex = updatedTraders.findIndex(t => t.id === decision.traderId);\n            if (traderIndex !== -1) {\n              const trader = updatedTraders[traderIndex];\n              \n              // Check if trader has enough capital for factory\n              const factoryCost = 75000; // Basic factory cost\n              if (trader.capital >= factoryCost) {\n                // Create factory for the AI trader\n                const newFactory = {\n                  id: `ai-factory-${trader.id}-${Date.now()}`,\n                  name: `${trader.name}'s ${decision.commodityName} Factory`,\n                  level: 1,\n                  commodityId: decision.commodityId,\n                  commodityName: decision.commodityName,\n                  productionUnit: 'Units',\n                                     productionQuantity: 50, // AI factories produce less\n                   productionTime: gameSettings.factoryProductionTime, // Use settings\n                   timeRemaining: gameSettings.factoryProductionTime,\n                  currentProduction: 0,\n                  upgradeCost: 150000,\n                  upgradeMultiplier: 1.5,\n                  costMultiplier: 1.3,\n                  lastUpdate: Date.now(),\n                  owner: trader.id,\n                  ownerName: trader.name\n                };\n                \n                // Add factory to trader's factories\n                updatedTraders[traderIndex] = {\n                  ...trader,\n                  factories: [...trader.factories, newFactory],\n                  capital: trader.capital - factoryCost,\n                  lastFactoryDecision: Date.now()\n                };\n                \n                // Add factory to global factories list\n                setFactories(prev => [...prev, newFactory]);\n                \n                // Show notification for AI factory building\n                showNotification({\n                  type: 'info',\n                  title: 'AI Factory Built!',\n                  message: `${trader.name} built a ${decision.commodityName} factory for ₹${factoryCost.toLocaleString()}`\n                });\n              }\n            }\n          });\n          \n          // Update AI traders\n          setAiTraders(updatedTraders);\n        }\n      }, gameSettings.aiTradingInterval); // Use settings for AI trading interval\n\n      return () => clearInterval(interval);\n    }\n  }, [gameState.isSimulationPaused, aiTraders, commodities, marketTrends, aiTradeFeed]);\n\n  const handleTraderSelect = (trader) => {\n    console.log('Selected trader:', trader);\n  };\n\n  // Settings Functions\n  const handleUpdateSettings = (newSettings) => {\n    setGameSettings(newSettings);\n    \n    // Show notification\n    showNotification({\n      type: 'success',\n      title: 'Settings Updated!',\n      message: 'Game settings have been updated successfully'\n    });\n  };\n\n  // AI Control Center Functions\n  const handleUpdateAITraders = (updatedTraders) => {\n    setAiTraders(updatedTraders);\n    \n    // Show notification\n    showNotification({\n      type: 'info',\n      title: 'AI Settings Updated!',\n      message: `Updated settings for ${updatedTraders.length} AI traders`\n    });\n  };\n\n  // Factory Management Functions\n  const handleBuildFactory = (template, commodity) => {\n    const newFactory = {\n      id: `factory-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      name: `${template.name} - ${commodity.name}`,\n      level: 1,\n      commodityId: commodity.id,\n      commodityName: commodity.name,\n      productionUnit: commodity.unit,\n      productionQuantity: template.baseProduction,\n      productionTime: template.productionTime,\n      timeRemaining: template.productionTime,\n      currentProduction: 0,\n      upgradeCost: Math.round(template.cost * template.costMultiplier),\n      upgradeMultiplier: template.upgradeMultiplier,\n      costMultiplier: template.costMultiplier,\n      lastUpdate: Date.now(),\n      owner: 'player',\n      ownerName: 'Player'\n    };\n\n    setFactories(prev => [...prev, newFactory]);\n    \n    // Deduct credits\n    setGameState(prev => ({\n      ...prev,\n      credits: prev.credits - template.cost\n    }));\n\n    // Show success notification\n    showNotification({\n      type: 'success',\n      title: 'Factory Built!',\n      message: `Successfully built ${newFactory.name} for ₹${template.cost.toLocaleString()}`\n    });\n  };\n\n  const handleUpgradeFactory = (factoryId) => {\n    const factory = factories.find(f => f.id === factoryId);\n    if (!factory || gameState.credits < factory.upgradeCost) {\n      showNotification({\n        type: 'error',\n        title: 'Cannot Upgrade',\n        message: `You need ₹${factory?.upgradeCost.toLocaleString()} to upgrade this factory`\n      });\n      return;\n    }\n\n    setFactories(prev => prev.map(f => {\n      if (f.id === factoryId) {\n        return {\n          ...f,\n          level: f.level + 1,\n          productionQuantity: Math.round(f.productionQuantity * f.upgradeMultiplier),\n          upgradeCost: Math.round(f.upgradeCost * f.costMultiplier)\n        };\n      }\n      return f;\n    }));\n\n    // Deduct credits\n    setGameState(prev => ({\n      ...prev,\n      credits: prev.credits - factory.upgradeCost\n    }));\n\n    // Show success notification\n    showNotification({\n      type: 'success',\n      title: 'Factory Upgraded!',\n      message: `Upgraded ${factory.name} to Level ${factory.level + 1} for ₹${factory.upgradeCost.toLocaleString()}`\n    });\n  };\n\n\n\n  // Simulate price fluctuations based on supply only\n  useEffect(() => {\n    if (!gameState.isSimulationPaused) {\n      const interval = setInterval(() => {\n        setCommodities(prev => prev.map(commodity => {\n          // Calculate price based on supply using game settings\n          // Use inverse relationship: price = basePrice * (targetSupply / currentSupply)\n          const basePrice = gameSettings.targetPrice * (gameSettings.targetSupply / commodity.supply);\n          \n          // Add some variation to make it more realistic\n          const variation = (Math.random() - 0.5) * 0.2; // ±10% variation\n          const newLastPrice = Math.max(1, Math.round(basePrice * (1 + variation)));\n          \n          // Add momentum based on supply changes\n          const supplyChange = commodity.supply - (commodity.supply + Math.floor((Math.random() - 0.5) * 50));\n          const momentumFactor = supplyChange / 1000 * 0.1; // Small momentum effect\n          \n          // Final price with momentum and maximum cap\n          const finalPrice = Math.max(1, Math.min(gameSettings.maxPrice, Math.round(newLastPrice * (1 + momentumFactor))));\n          \n          // Update buy/sell prices with spread\n          const spread = Math.floor(Math.random() * 3) + 1;\n          const newBuyPrice = Math.max(1, finalPrice - spread);\n          const newSellPrice = finalPrice + spread;\n          \n          // Update price history - keep last 50 data points for longer history\n          const currentTime = new Date().toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' });\n          const newPriceHistory = [...commodity.priceHistory, { time: currentTime, price: finalPrice }];\n          // Keep only the last 50 data points to prevent memory issues\n          if (newPriceHistory.length > 50) {\n            newPriceHistory.splice(0, newPriceHistory.length - 50);\n          }\n          \n          return {\n            ...commodity,\n            lastPrice: finalPrice,\n            buyPrice: newBuyPrice,\n            sellPrice: newSellPrice,\n            priceHistory: newPriceHistory\n          };\n        }));\n      }, gameSettings.priceUpdateInterval); // Use settings for update interval\n\n      return () => clearInterval(interval);\n    }\n  }, [gameState.isSimulationPaused]);\n\n  // Factory Production Timer\n  useEffect(() => {\n    if (!gameState.isSimulationPaused && factories.length > 0) {\n      const interval = setInterval(() => {\n        setFactories(prev => prev.map(factory => {\n          const now = Date.now();\n          const timeDiff = Math.floor((now - factory.lastUpdate) / 1000); // Convert to seconds\n          \n          if (factory.timeRemaining > 0) {\n            const newTimeRemaining = Math.max(0, factory.timeRemaining - timeDiff);\n            \n                         if (newTimeRemaining === 0 && factory.timeRemaining > 0) {\n               // Production cycle completed\n               if (factory.owner && factory.owner !== 'player') {\n                 // AI-owned factory - add to AI trader's holdings\n                 setAiTraders(prevTraders => prevTraders.map(trader => {\n                   if (trader.id === factory.owner) {\n                     return {\n                       ...trader,\n                       portfolio: {\n                         ...trader.portfolio,\n                         [factory.commodityId]: (trader.portfolio[factory.commodityId] || 0) + factory.productionQuantity\n                       }\n                     };\n                   }\n                   return trader;\n                 }));\n                 \n                 // Update commodity supply (AI production adds to market supply)\n                 setCommodities(prevCommodities => prevCommodities.map(commodity => {\n                   if (commodity.id === factory.commodityId) {\n                     return {\n                       ...commodity,\n                       supply: commodity.supply + factory.productionQuantity\n                     };\n                   }\n                   return commodity;\n                 }));\n                 \n                 // Show notification for AI production\n                 showNotification({\n                   type: 'info',\n                   title: 'AI Production Complete!',\n                   message: `${factory.ownerName}'s factory produced ${factory.productionQuantity} ${factory.commodityName}`\n                 });\n               } else {\n                 // Player-owned factory - add to player holdings\n                 setCommodities(prevCommodities => prevCommodities.map(commodity => {\n                   if (commodity.id === factory.commodityId) {\n                     return {\n                       ...commodity,\n                       holdings: commodity.holdings + factory.productionQuantity\n                     };\n                   }\n                   return commodity;\n                 }));\n                 \n                 // Show notification for player production\n                 showNotification({\n                   type: 'success',\n                   title: 'Production Complete!',\n                   message: `${factory.name} produced ${factory.productionQuantity} ${factory.commodityName} - automatically added to holdings!`\n                 });\n               }\n              \n              // Reset factory for next cycle\n              return {\n                ...factory,\n                timeRemaining: factory.productionTime,\n                currentProduction: 0,\n                lastUpdate: now\n              };\n            } else {\n              // Still producing\n              return {\n                ...factory,\n                timeRemaining: newTimeRemaining,\n                lastUpdate: now\n              };\n            }\n          }\n          \n          return factory;\n        }));\n      }, 1000); // Update every second\n\n      return () => clearInterval(interval);\n    }\n  }, [gameState.isSimulationPaused, factories.length]);\n\n  // Show login screen if no user is logged in\n  if (!currentUser) {\n    return <Login onLogin={handleLogin} gameSettings={gameSettings} />;\n  }\n\n  return (\n    <div className=\"App\">\n      <Header \n        gameState={gameState} \n        onToggleSimulation={toggleSimulation}\n        currentUser={currentUser}\n        onLogout={handleLogout}\n        isSaving={isSaving}\n        onManualSave={handleManualSave}\n        onOpenSettings={() => setShowSettings(true)}\n      />\n      <div className=\"main-content\">\n        <TradingGrid \n          commodities={commodities}\n          onQuantityChange={handleQuantityChange}\n          onBuy={handleBuy}\n          onSell={handleSell}\n          factories={factories}\n        />\n        <div className=\"sidebar-container\">\n          <Sidebar \n            aiPortfolio={aiPortfolio}\n            marketTrends={marketTrends}\n            tradeFeed={tradeFeed}\n            aiTradeFeed={aiTradeFeed}\n          />\n          \n          {/* AI Trading Controls */}\n          <div className=\"ai-controls\">\n            <button \n              className={`ai-control-btn ${showAITraders ? 'active' : ''}`}\n              onClick={() => setShowAITraders(!showAITraders)}\n            >\n              🤖 AI Traders ({aiTraders.length})\n            </button>\n            <button \n              className={`ai-control-btn ${showMarketSentiment ? 'active' : ''}`}\n              onClick={() => setShowMarketSentiment(!showMarketSentiment)}\n            >\n              📊 Market Sentiment\n            </button>\n            <button \n              className={`ai-control-btn ${showFactoryManager ? 'active' : ''}`}\n              onClick={() => setShowFactoryManager(!showFactoryManager)}\n            >\n              🏭 Factories ({factories.length})\n            </button>\n            <button \n              className={`ai-control-btn ${showAIControlCenter ? 'active' : ''}`}\n              onClick={() => setShowAIControlCenter(!showAIControlCenter)}\n            >\n              ⚙️ AI Controls\n            </button>\n          </div>\n          \n          {/* AI Trader Panel */}\n          {showAITraders && (\n            <div className=\"ai-panel-overlay\">\n              <div className=\"ai-panel-container\">\n                <button \n                  className=\"ai-panel-close-btn\"\n                  onClick={() => setShowAITraders(false)}\n                >\n                  ×\n                </button>\n                <AITraderPanel \n                  aiTraders={aiTraders}\n                  onTraderSelect={handleTraderSelect}\n                />\n              </div>\n            </div>\n          )}\n          \n          {/* Market Sentiment Panel */}\n          {showMarketSentiment && (\n            <div className=\"ai-panel-overlay\">\n              <MarketSentiment \n                aiTraders={aiTraders}\n                commodities={commodities}\n                onClose={() => setShowMarketSentiment(false)}\n              />\n            </div>\n          )}\n          \n          {/* Factory Manager Panel */}\n          {showFactoryManager && (\n            <FactoryManager\n              factories={factories}\n              commodities={commodities}\n              credits={gameState.credits}\n              onBuildFactory={handleBuildFactory}\n              onUpgradeFactory={handleUpgradeFactory}\n              onClose={() => setShowFactoryManager(false)}\n              gameSettings={gameSettings}\n            />\n          )}\n          \n          {/* AI Control Center */}\n          {showAIControlCenter && (\n            <AIControlCenter\n              aiTraders={aiTraders}\n              onUpdateTraders={handleUpdateAITraders}\n              onClose={() => setShowAIControlCenter(false)}\n            />\n          )}\n        </div>\n      </div>\n      \n      {/* Settings Panel */}\n      {showSettings && (\n        <SettingsPanel\n          gameSettings={gameSettings}\n          onUpdateSettings={handleUpdateSettings}\n          onClose={() => setShowSettings(false)}\n        />\n      )}\n      \n      <NotificationContainer \n        notifications={notifications}\n        onRemoveNotification={removeNotification}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}